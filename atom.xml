<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[EOF]]></title>
  <link href="http://jasonleaster.github.io/atom.xml" rel="self"/>
  <link href="http://jasonleaster.github.io/"/>
  <updated>2016-08-25T00:15:57+08:00</updated>
  <id>http://jasonleaster.github.io/</id>
  <author>
    <name><![CDATA[Jason Leaster]]></name>
    <email><![CDATA[jasonleaster@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Search Algorithm in Graph]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/08/24/search-algorithm-in-graph/"/>
    <updated>2016-08-24T20:46:43+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/08/24/search-algorithm-in-graph</id>
    <content type="html"><![CDATA[<p>Searching in a graph is the one of the most popular topic in CS.</p>

<p>In this article, I would like to make a summary about what algorithms for searching in graphes.</p>

<h3 id="presentation-of-graph">1. Presentation of Graph</h3>

<ul>
  <li>Adjacency Matrix</li>
  <li>Adjacency List</li>
</ul>

<p>What is better, adjacency lists or adjacency matrices for graph problem ?</p>

<p>It depends on the problem.</p>

<p>An adjacency matrix uses <code>O(n*n)</code> memory. It has fast lookups to check for presence or absence of a specific edge, but slow to iterate over all edges.</p>

<p>Adjacency lists use memory in proportion to the number edges, which might save a lot of memory if the adjacency matrix is sparse. It is fast to iterate over all edges, but finding the presence or absence specific edge is slightly slower than with the matrix.</p>

<p><strong>In this article, I would like to use adjacency matrix to represent the graph in our problems. I want to express the essential idea in algorithms but not the programming language grammer. So all implementation of algorithm will be written in Python.</strong></p>

<p>We will try to use different ways to solve the demo problem. Here is the graph which we will use in this article.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_08/graph.jpg" alt="images" /></p>

<p>The corresponding adjacency matrix:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">INF</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">&#39;inf&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">graph</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line"><span class="p">[</span><span class="n">INF</span><span class="p">,</span>   <span class="mi">7</span><span class="p">,</span>   <span class="mi">9</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span>  <span class="mi">14</span><span class="p">],</span>
</span><span class="line"><span class="p">[</span>  <span class="mi">7</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span>  <span class="mi">10</span><span class="p">,</span>  <span class="mi">15</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span> <span class="n">INF</span><span class="p">],</span>
</span><span class="line"><span class="p">[</span>  <span class="mi">9</span><span class="p">,</span>  <span class="mi">19</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span>  <span class="mi">11</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span>   <span class="mi">2</span><span class="p">],</span>
</span><span class="line"><span class="p">[</span><span class="n">INF</span><span class="p">,</span>  <span class="mi">15</span><span class="p">,</span>  <span class="mi">11</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span>   <span class="mi">6</span><span class="p">,</span> <span class="n">INF</span><span class="p">],</span>
</span><span class="line"><span class="p">[</span><span class="n">INF</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span>   <span class="mi">6</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span>   <span class="mi">9</span><span class="p">],</span>
</span><span class="line"><span class="p">[</span> <span class="mi">14</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span>   <span class="mi">2</span><span class="p">,</span> <span class="n">INF</span><span class="p">,</span>   <span class="mi">9</span><span class="p">,</span> <span class="n">INF</span><span class="p">]</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="bfs-breadth-first-search">2. BFS Breadth First Search</h3>

<p>Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a ‘search key’) and explores the neighbor nodes first, before moving to the next level neighbors.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">BFS</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class="line">    <span class="n">size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
</span><span class="line">    <span class="n">visited</span> <span class="o">=</span> <span class="p">[</span><span class="n">start</span><span class="p">]</span>
</span><span class="line">    <span class="n">Q</span> <span class="o">=</span> <span class="p">[</span> <span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="p">]</span>
</span><span class="line">    <span class="n">path</span> <span class="o">=</span> <span class="p">[]</span> <span class="c"># possible solution, @path is a nested list [[] ...]</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">Q</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="n">path</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="n">curNode</span> <span class="o">=</span> <span class="n">path</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="n">curNode</span> <span class="o">==</span> <span class="n">end</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">path</span> <span class="c"># the solution</span>
</span><span class="line">
</span><span class="line">        <span class="n">neighbors</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">curNode</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">INF</span><span class="p">:</span>
</span><span class="line">            <span class="n">neighbors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="c"># to find the neighbors who are unvisited</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">neighbors</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">neighbors</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">in</span> <span class="n">visited</span><span class="p">:</span>
</span><span class="line">                <span class="n">neighbors</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">neighbors</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">        <span class="c">#add unvisited neighbor into visited line.</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">neighbors</span><span class="p">:</span>
</span><span class="line">            <span class="n">visited</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">            <span class="n">Q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="dfs-depth-first-search">DFS Depth First Search</h3>

<p>Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. One starts at the root (selecting some arbitrary node as the root in the case of a graph) and explores as far as possible along each branch before backtracking.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_08/pathForDFS.jpg" alt="images" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#####################  Pesudo Code ########################</span>
</span><span class="line"><span class="n">Input</span><span class="p">:</span> <span class="n">A</span> <span class="n">graph</span> <span class="n">G</span> <span class="ow">and</span> <span class="n">a</span> <span class="n">vertex</span> <span class="n">v</span> <span class="n">of</span> <span class="n">G</span>
</span><span class="line">
</span><span class="line"><span class="n">Output</span><span class="p">:</span> <span class="n">All</span> <span class="n">vertices</span> <span class="n">reachable</span> <span class="kn">from</span> <span class="nn">v</span> <span class="nn">labeled</span> <span class="nn">as</span> <span class="nn">discovered</span>
</span><span class="line">
</span><span class="line"><span class="o">-----------------------------------------------------------</span>
</span><span class="line"><span class="n">A</span> <span class="n">recursive</span> <span class="n">implementation</span> <span class="n">of</span> <span class="n">DFS</span><span class="p">:</span>
</span><span class="line"><span class="o">-----------------------------------------------------------</span>
</span><span class="line"><span class="n">procedure</span> <span class="n">DFS</span><span class="p">(</span><span class="n">G</span><span class="p">,</span><span class="n">v</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="n">label</span> <span class="n">v</span> <span class="k">as</span> <span class="n">discovered</span>
</span><span class="line">    <span class="k">for</span> <span class="nb">all</span> <span class="n">edges</span> <span class="kn">from</span> <span class="nn">v</span> <span class="nn">to</span> <span class="nn">w</span> <span class="nn">in</span> <span class="nn">G.adjacentEdges</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="n">do</span>
</span><span class="line">        <span class="k">if</span> <span class="n">vertex</span> <span class="n">w</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">labeled</span> <span class="k">as</span> <span class="n">discovered</span> <span class="n">then</span>
</span><span class="line">            <span class="n">recursively</span> <span class="n">call</span> <span class="n">DFS</span><span class="p">(</span><span class="n">G</span><span class="p">,</span><span class="n">w</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="o">------------------------------------------------------------</span>
</span><span class="line"><span class="n">A</span> <span class="n">non</span><span class="o">-</span><span class="n">recursive</span> <span class="n">implementation</span> <span class="n">of</span> <span class="n">DFS</span><span class="p">:</span>
</span><span class="line"><span class="o">------------------------------------------------------------</span>
</span><span class="line">
</span><span class="line"><span class="n">procedure</span> <span class="n">DFS</span><span class="o">-</span><span class="n">iterative</span><span class="p">(</span><span class="n">G</span><span class="p">,</span><span class="n">v</span><span class="p">):</span>
</span><span class="line">    <span class="n">let</span> <span class="n">S</span> <span class="n">be</span> <span class="n">a</span> <span class="n">stack</span>
</span><span class="line">    <span class="n">S</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class="line">    <span class="k">while</span> <span class="n">S</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">empty</span>
</span><span class="line">        <span class="n">v</span> <span class="o">=</span> <span class="n">S</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">        <span class="k">if</span> <span class="n">v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">labeled</span> <span class="k">as</span> <span class="n">discovered</span><span class="p">:</span>
</span><span class="line">            <span class="n">label</span> <span class="n">v</span> <span class="k">as</span> <span class="n">discovered</span>
</span><span class="line">            <span class="k">for</span> <span class="nb">all</span> <span class="n">edges</span> <span class="kn">from</span> <span class="nn">v</span> <span class="nn">to</span> <span class="nn">w</span> <span class="nn">in</span> <span class="nn">G.adjacentEdges</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="n">do</span>
</span><span class="line">                 <span class="n">S</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="foly">Foly</h3>

<h3 id="shortest-path-search-dijkastra">Shortest Path Search (Dijkastra)</h3>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_08/pathForDijkastra.jpg" alt="images" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#####################  Pesudo Code ########################</span>
</span><span class="line">
</span><span class="line"><span class="n">function</span> <span class="n">Dijkstra</span><span class="p">(</span><span class="n">Graph</span><span class="p">,</span> <span class="n">source</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">      <span class="n">create</span> <span class="n">vertex</span> <span class="nb">set</span> <span class="n">Q</span>
</span><span class="line">
</span><span class="line">      <span class="k">for</span> <span class="n">each</span> <span class="n">vertex</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">Graph</span><span class="p">:</span>             <span class="o">//</span> <span class="n">Initialization</span>
</span><span class="line">          <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="err">←</span> <span class="n">INFINITY</span>                  <span class="o">//</span> <span class="n">Unknown</span> <span class="n">distance</span> <span class="kn">from</span> <span class="nn">source</span> <span class="nn">to</span> <span class="nn">v</span>
</span><span class="line">          <span class="n">prev</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="err">←</span> <span class="n">UNDEFINED</span>                 <span class="o">//</span> <span class="n">Previous</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">optimal</span> <span class="n">path</span> <span class="kn">from</span> <span class="nn">source</span>
</span><span class="line">          <span class="n">add</span> <span class="n">v</span> <span class="n">to</span> <span class="n">Q</span>                          <span class="o">//</span> <span class="n">All</span> <span class="n">nodes</span> <span class="n">initially</span> <span class="ow">in</span> <span class="n">Q</span> <span class="p">(</span><span class="n">unvisited</span> <span class="n">nodes</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">      <span class="n">dist</span><span class="p">[</span><span class="n">source</span><span class="p">]</span> <span class="err">←</span> <span class="mi">0</span>                        <span class="o">//</span> <span class="n">Distance</span> <span class="kn">from</span> <span class="nn">source</span> <span class="nn">to</span> <span class="nn">source</span>
</span><span class="line">
</span><span class="line">      <span class="k">while</span> <span class="n">Q</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">empty</span><span class="p">:</span>
</span><span class="line">          <span class="n">u</span> <span class="err">←</span> <span class="n">vertex</span> <span class="ow">in</span> <span class="n">Q</span> <span class="k">with</span> <span class="nb">min</span> <span class="n">dist</span><span class="p">[</span><span class="n">u</span><span class="p">]</span>    <span class="o">//</span> <span class="n">Source</span> <span class="n">node</span> <span class="n">will</span> <span class="n">be</span> <span class="n">selected</span> <span class="n">first</span>
</span><span class="line">          <span class="n">remove</span> <span class="n">u</span> <span class="kn">from</span> <span class="nn">Q</span>
</span><span class="line">
</span><span class="line">          <span class="k">for</span> <span class="n">each</span> <span class="n">neighbor</span> <span class="n">v</span> <span class="n">of</span> <span class="n">u</span><span class="p">:</span>           <span class="o">//</span> <span class="n">where</span> <span class="n">v</span> <span class="ow">is</span> <span class="n">still</span> <span class="ow">in</span> <span class="n">Q</span><span class="o">.</span>
</span><span class="line">              <span class="n">alt</span> <span class="err">←</span> <span class="n">dist</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="n">length</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class="line">              <span class="k">if</span> <span class="n">alt</span> <span class="o">&lt;</span> <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>               <span class="o">//</span> <span class="n">A</span> <span class="n">shorter</span> <span class="n">path</span> <span class="n">to</span> <span class="n">v</span> <span class="n">has</span> <span class="n">been</span> <span class="n">found</span>
</span><span class="line">                  <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="err">←</span> <span class="n">alt</span>
</span><span class="line">                  <span class="n">prev</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="err">←</span> <span class="n">u</span>
</span><span class="line">
</span><span class="line">      <span class="k">return</span> <span class="n">dist</span><span class="p">[],</span> <span class="n">prev</span><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Extention:</p>

<p>I will recommend you to finish the lab2 in 6.034</p>

<p>https://github.com/jasonleaster/MIT_6.034_2015/tree/master/lab2</p>

<p>This article does not finished and will be update these days :)</p>

<p>You can get my implementation on <a href="https://github.com/jasonleaster/Algorithm/blob/master/Graph/Dijkstra/Python/Dijkastra.py">github</a></p>

<hr />
<p>Photo by Annabella in ChongQin, China
<img src="http://jasonleaster.github.io/images/img_for_2016_08/zhuanyunlou.png" alt="images" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Great Ideas in Object Oriented Programming]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/06/14/great-ideas-in-object-oriented-programming/"/>
    <updated>2016-06-14T12:49:00+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/06/14/great-ideas-in-object-oriented-programming</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#encapsulation" id="markdown-toc-encapsulation">Encapsulation</a></li>
  <li><a href="#composition-inheritance-and-delegation" id="markdown-toc-composition-inheritance-and-delegation">Composition, inheritance, and delegation</a>    <ul>
      <li><a href="#warning-of-using-inheritance" id="markdown-toc-warning-of-using-inheritance">Warning of using inheritance</a></li>
    </ul>
  </li>
  <li><a href="#polymophsim" id="markdown-toc-polymophsim">Polymophsim</a></li>
  <li><a href="#oop-design" id="markdown-toc-oop-design">OOP Design</a></li>
</ul>

<blockquote>
  <p>Object-oriented programming (OOP) is a programming paradigm based on the concept of “objects”, which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. – <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">Wikipedia</a></p>
</blockquote>

<p>OOP is just a programming paradigm and it helps programmer to build more robust and implement more abstract concept which are needed in their project.OOP isn’t the treasure which only belongs to a special programming language. It offer a way to make the problem more easy to be understood and to be solved.</p>

<p>There are three gread ideas in OOP.</p>

<ul>
  <li>Encapsulation</li>
  <li>Composition, inheritance, and delegation</li>
  <li>Polymophsim</li>
</ul>

<!-- more -->

<h3 id="encapsulation">Encapsulation</h3>

<p>The most basic idea in OOP is that each object encapsulates some data and code. The object takes requests from other client object. The object alone is responsible for its own state, exposing public message for clients, and declaring private the variables and the methods. The client depends on the simple public interface, and does not known about or depend on the details of the implementation.</p>

<p><strong>Encapsulation remind us to put details and complexity into a black box. The outside people(user) don’t need to care about how this box was built but just use it with the instructions which the box suppled.</strong></p>

<p>Q: What if we want to implement a abstract concept in mathematic – Point.</p>

<p>Point, the most basic presentation of point is two coordinates in Descartes coordinate system(x, y). How to implement it with program ?</p>

<p>Consider the following implementation in java.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">[</span><span class="n">MyPoint1</span><span class="o">.</span><span class="na">java</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyPoint1</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>   <span class="c1">// x and y are public</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">MyPoint1</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span><span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Client Code</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class="line">
</span><span class="line">        <span class="n">MyPoint1</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyPoint1</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * Bad style to try to use the detail information of a class.</span>
</span><span class="line"><span class="cm">         * Here, client programmer should not use data member of the class directly.</span>
</span><span class="line"><span class="cm">         * With the software iteration and release the library which implement the</span>
</span><span class="line"><span class="cm">         * class which have used in your project. You may have to rewrite all your</span>
</span><span class="line"><span class="cm">         * client program. Because the author of that library may change the implementation</span>
</span><span class="line"><span class="cm">         * of that class and your code can&#39;t be used with the new library.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="n">p</span><span class="o">.</span><span class="na">y</span><span class="o">;</span><span class="c1">// !! Bad style.</span>
</span><span class="line">
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">z</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here all information is public, this is the most convenient for end users, but limits our ability to change things later in development. What would happend if you build a software and you find something should be changed with the implementation of <code>MyPoint1</code>. You may want to add more attributes into this class. You may also want to rewrite your code and change it into another coordinate system but not descartes coordinate system.</p>

<p>If the others module depends on your implementation of <code>MyPoints1</code> and use the data member of that class directly, you may have to rewrite your whole project and it will cost your a lot of time. It will be nightmare for programmer to be told “Hey, buddy. There is something changed with requirement, you have to rewrite your whole project. Just put the code into garbage collector. It can’t be modified to satisfy the new requirement.”</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_06_14/wth.png" alt="images" /></p>

<p>Here is a bettern one solution. In <code>MyPoint2</code>, the detail of this class are setted as private which means that the client(user) can’t use the information about the implementation directly. The only way that the user can use the information which they need is to use the interface that the class supply with. In this example, the interface which public can access is <em>getX()</em>  and <em>getY()</em> .</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">[</span><span class="n">MyPoint2</span><span class="o">.</span><span class="na">java</span><span class="o">]</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyPoint2</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>  <span class="c1">// x and y are private</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">MyPoint2</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span><span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getX</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getY</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Client Code</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class="line">        <span class="n">MyPoint2</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyPoint2</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">getX</span><span class="o">()</span> <span class="o">+</span> <span class="n">p</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span> <span class="c1">// Good Style :)</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">z</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The advantage of accessing control and encapsulation is that we can replace the current implementation into another better one and make sure the client don’t need to be modified for this changes in the original class(MyPoint2).</p>

<p>Here, we implement Point with polar coordinate system. All the interface that set as public in <code>MyPoint2</code> are unchanged. This make sure that the client which use <code>getX()</code> and <code>getY()</code> don’t need to be modified for changes with the implementation of Point.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">[</span><span class="n">MyPoint3</span><span class="o">.</span><span class="na">java</span><span class="o">]</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyPoint3</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">double</span> <span class="n">r</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">double</span> <span class="n">theta</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">MyPoint3</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span><span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span><span class="o">);</span>
</span><span class="line">        <span class="n">theta</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">atan</span><span class="o">(</span> <span class="o">(</span><span class="kt">double</span><span class="o">)</span> <span class="n">y</span> <span class="o">/</span> <span class="n">x</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getX</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">r</span> <span class="o">*</span> <span class="n">Math</span><span class="o">.</span><span class="na">cos</span><span class="o">(</span><span class="n">theta</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getY</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">r</span> <span class="o">*</span> <span class="n">Math</span><span class="o">.</span><span class="na">sin</span><span class="o">(</span><span class="n">theta</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Client Code don&#39;t need to be modified after the implemetation of Point changed</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class="line">        <span class="n">MyPoint2</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyPoint2</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">getX</span><span class="o">()</span> <span class="o">+</span> <span class="n">p</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span> <span class="c1">// Good Style :)</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">z</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="composition-inheritance-and-delegation">Composition, inheritance, and delegation</h3>

<p>In object-oriented programming, inheritance is when an object or class is based on another object (prototypal inheritance) or class (class-based inheritance), using the same implementation (inheriting from an object or class) specifying implementation to maintain the same behavior (realizing an interface; inheriting behavior). In this ariticle, we only talk about the class-based inheritance.</p>

<p>What’s the adavantages of inheritance ?</p>

<ul>
  <li>Overriding</li>
  <li>Code Reuse</li>
</ul>

<p>Many OOP programming language permit to replace the implementation of one or more method that it inherited from the base class. We call this feature as <strong>Overriding</strong>. There are two way to help us to reuse code. The one way is composition and the other way is inheritance.</p>

<p>You reuse code by creating new classes, but instead of creating them from scratch, you use existing classes that someone has already built and debugged.</p>

<p>In Java and Python (I don’t know the implementation of C++), you always doing inheritance when you create an object.</p>

<blockquote>
  <p>Class Object is the root of the class hierarchy. Every class has Object as a superclass. All objects, including arrays, implement the methods of this class.            Since: JDK1.0   – <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html">Java Doc notes</a></p>
</blockquote>

<p>You could also read my article about <a href="http://jasonleaster.github.io/blog/2015/06/13/memory-model-of-objects-in-c-plus-plus/">Moemory Model of Object in C++</a> and <a href="http://jasonleaster.github.io/blog/2016/02/03/memory-model-of-int-object-in-python/">In Object In Python</a>. If you are interesting in the implementation of inheritance, just read all about it.</p>

<h4 id="warning-of-using-inheritance">Warning of using inheritance</h4>

<p>In heritance is a clever and appealing techonology, it is best applied in somewhat rare circumstances where you have several deeply similar classes. It’s a common error for beginning OOP programmers to try to use inheritance for everything. In constrat, application of modularity and encapsulation and API design may be less flashy, but they are incredibly common and powerful.</p>

<h3 id="polymophsim">Polymophsim</h3>

<h3 id="oop-design">OOP Design</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Training Cascade With OpenCV]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/05/19/training-cascade-with-opencv/"/>
    <updated>2016-05-19T15:45:42+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/05/19/training-cascade-with-opencv</id>
    <content type="html"><![CDATA[<p>Platform: Linux/Ubuntu</p>

<p>Preparation:</p>

<p>You may have to prepare two different types of images for training a <code>Binary Classifier Model</code>, the positive samples and the negative samples.</p>

<p>Here, we gona to use image database from <strong>UIUC Image Database for Car Detection</strong> to demonstrate how to use OpenCV to detection cars in a image.</p>

<!-- more -->

<p>User should put all positive samples which have the same size into a directory.</p>

<pre><code>ls ./pos &gt; ./pos_list.info
ls ./neg &gt; ./neg_list.info
</code></pre>

<p>Open <code>pos_list.info</code> and you will see the path of images have been written into the info file.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_05_19/files.png" alt="images" /></p>

<p>But it isn’t enough. To train the cascade with OpenCV, you should supply with the information where is the object in the image. In this demo, what we want to detect is a car. The information that OpenCV need like this: <code>image_path num x y w h</code>, which should be append at the end of the path of a image.</p>

<p><code>x y w h</code> describe a rectangle which identify where is the object that we want to find. <code>num</code> describe how many objects in the rectangle.</p>

<p>So, I write a script in Python and this script will help to finish that job.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">[</span><span class="n">trans_pos_location</span><span class="o">.</span><span class="n">py</span><span class="p">]</span>
</span><span class="line"><span class="n">fileObj</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;./pos_list.info&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">newFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;./pos_list_new.info&quot;</span><span class="p">,</span> <span class="s">&quot;a+&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class="line">    <span class="n">newFile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;./pos/&quot;</span> <span class="o">+</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot; 1 0 0 100 40</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">fileObj</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line"><span class="n">newFile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="n">trans_neg_location</span><span class="o">.</span><span class="n">py</span><span class="p">]</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line">
</span><span class="line"><span class="n">fileObj</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;./neg_list.info&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">newFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;./neg_list_new.info&quot;</span><span class="p">,</span> <span class="s">&quot;a+&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class="line">    <span class="n">newFile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span> <span class="o">+</span> <span class="s">&quot;/neg/&quot;</span> <span class="o">+</span> <span class="n">line</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">fileObj</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line"><span class="n">newFile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Run the following comand:</p>

<pre><code>opencv_createsamples -info pos_list_new.info -num 550 -w 48 -h 24 -vec cars.vec

opencv_traincascade -data data -vec abc.vec -bg neg_list_new.info -numPos 550 -numNeg 500 -numStages 2 -w 48 -h 24
</code></pre>

<p><code>opencv_createsamples</code> and <code>opencv_traincascade</code> are two tool program with OpenCV. The original positive samples for training are images with 100x40 pixels. For the training process, it will cost a lot of memory, so we resize it into smaller one. With that command, <code>-w 48 -h 24</code>, positive images are resized into smaller images which’s width is 48 pixels and the height of that is 24 pixels.</p>

<p>Here, we can use this script to test the model that we get.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">cv2</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">image</span>
</span><span class="line">
</span><span class="line"><span class="n">car_cascade</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CascadeClassifier</span><span class="p">(</span><span class="s">&quot;/home/jasonleaster/Desktop/CarData/TrainImages/data/cascade.xml&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">gray</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s">&quot;/home/jasonleaster/Desktop/CarData/TestImages_Scale/test-1.pgm&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">faces</span> <span class="o">=</span> <span class="n">car_cascade</span><span class="o">.</span><span class="n">detectMultiScale</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span>
</span><span class="line">                                    <span class="n">scaleFactor</span> <span class="o">=</span> <span class="mf">1.3</span><span class="p">,</span>
</span><span class="line">                                    <span class="n">minNeighbors</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
</span><span class="line">                                    <span class="n">minSize</span><span class="o">=</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="mi">48</span><span class="p">),</span>
</span><span class="line">                                    <span class="n">flags</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cv</span><span class="o">.</span><span class="n">CV_HAAR_SCALE_IMAGE</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">img</span> <span class="o">=</span> <span class="n">gray</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span> <span class="ow">in</span> <span class="n">faces</span><span class="p">:</span>
</span><span class="line">    <span class="n">cv2</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">w</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="n">h</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pylab</span>
</span><span class="line"><span class="n">pyplot</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cmap</span> <span class="o">=</span> <span class="s">&quot;gray&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">pylab</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Result:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_05_19/detected_car1.png" alt="images" /></p>

<p>Reference:
1. http://blog.csdn.net/wuxiaoyao12/article/details/39227189
2. www.youtube.com/watch?v=WEzm7L5zoZE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterater and Generator in Python]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/04/09/iterater-and-generator-in-python/"/>
    <updated>2016-04-09T13:54:30+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/04/09/iterater-and-generator-in-python</id>
    <content type="html"><![CDATA[<p>Try to answer the following question?</p>

<ol>
  <li>
    <p>How do generators save memory?</p>
  </li>
  <li>
    <p>When is the best time to use a generator?</p>
  </li>
  <li>
    <p>How can I use itertools to create complex generator workflows?</p>
  </li>
  <li>
    <p>When is lazy evaluation beneficial, and when is it not?</p>
  </li>
</ol>

<!-- more -->

<p>Programmer who is familiar with another language start learning Python, they are taken aback by the difference in <strong>for</strong> loop notation.</p>

<p>With the influence from others language, they may try to finish iteration job by this code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class="line">    <span class="n">do_work</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What the beginner don’t know the implemenation of function range in Python(2.7). The first thing the <strong>range()</strong> function must precreate the list of all numbers within the range.</p>

<p>In Python2.7, range() produce a list but xrange() return a iterator.( In Python 3, the range() is replaced with the xrange() and there is no xrange() function anymore. From this modification, programmer can know that the develop team of Python aware that it’s neccessary to force the user to use a generator when they want to iteration job.)</p>

<p>Here is a test for the differences between the range() and xrange() in memory allocation.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_04_09/range_xrange_time.png" alt="images" />
<img src="http://jasonleaster.github.io/images/img_for_2016_04_09/range_xrange_mem.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tuple and List in Python]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/04/09/tuple-and-list-in-python/"/>
    <updated>2016-04-09T08:52:51+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/04/09/tuple-and-list-in-python</id>
    <content type="html"><![CDATA[<p>Try to answer the following question.</p>

<p>What are lists andd tuples good for?</p>

<p>What is the complexity of a lookup in a list/tuple?</p>

<p>How is that complexity achieved?</p>

<p>What are the differences between lists and tuples?</p>

<p>How does appending to a list work?</p>

<p>When should I use lists and tuples?</p>

<p>Lists and tuples are a class of data structure called arrays. An array is simply a flat list of data with some intrinsic ordering.
This demarcates another line between lists and tuples: <strong>lists are dynamic arrays while tuples are static arrays.</strong></p>

<h3 id="lists-versus-tuples">Lists Versus Tuples</h3>

<p>Differences between lists and tuple</p>

<ol>
  <li>
    <p>lists are dynamic arrays; they are mutable and allow for resizing(changing the number of elements that are held).</p>
  </li>
  <li>
    <p>Tuples are static arrays; they are immutable, and the data within them cannot be changed once they have been created.</p>
  </li>
  <li>
    <p>Tuples are cached by the Python runtime, which means that we don’t need to talk to the kernel to reserve memory every time we want to use one.</p>
  </li>
</ol>

<p>These differences outline the philosophical difference between the two: tuples are for describing multiple properties of one unchanging thing, and list can be used to store collections of data about completely disparate objects.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_04_09/tuple_list_construction_speed.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exception Control in Python]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/22/exception-control-in-python/"/>
    <updated>2016-02-22T11:31:34+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/22/exception-control-in-python</id>
    <content type="html"><![CDATA[<p>Pythoner may be familiar with exception control like the demo beblow there:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">try</span><span class="p">:</span>
</span><span class="line">    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;after abort:&quot;</span><span class="p">,</span> <span class="n">i</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;get here&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>If you press down <code>ctrl + c</code>, there will trigger a interruption by keyboard. The inner infinite loop will stop and jump into the exception handler. There are another examples of exception and interruption in the computer. Programmer may also ask what’s the benefite to handle the exception …</p>

<p>What if there is something unpredictable and it will stop the program to run correctly?</p>

<p>If you do 1 divide 0 in your program, the CPU don’t know how to compute that expression. In the level of operating system, OS will handle it as an exception and tell programmer that it doesn’t work. The program must be stopped or killed.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">try</span><span class="p">:</span>
</span><span class="line">    <span class="mi">1</span><span class="o">/</span><span class="mi">0</span>
</span><span class="line"><span class="k">except</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;Welcome Chapter 42 -- Guideline to galaxy&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Although there trig a exception for diveding zero, but we catch it and handle it correctly. So, the program end correctly.</p>

<p>The mechanism of exception handling come from operating system.</p>

<p>Here is the definition of exception object in Python. (Don’t forget that everything in Python is object).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="p">[</span><span class="n">Include</span><span class="o">/</span><span class="n">pyerrors</span><span class="p">.</span><span class="n">h</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="p">...</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="n">PyObject_HEAD</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">*</span><span class="n">dict</span><span class="p">;</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">*</span><span class="n">args</span><span class="p">;</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">*</span><span class="n">message</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="n">PyBaseExceptionObject</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">...</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* Predefined exceptions */</span>
</span><span class="line">
</span><span class="line"><span class="n">PyAPI_DATA</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">PyExc_BaseException</span><span class="p">;</span>
</span><span class="line"><span class="n">PyAPI_DATA</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">PyExc_Exception</span><span class="p">;</span>
</span><span class="line"><span class="n">PyAPI_DATA</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">PyExc_StopIteration</span><span class="p">;</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="n">PyAPI_DATA</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">PyExc_ZeroDivisionError</span><span class="p">;</span>
</span><span class="line"><span class="n">PyAPI_DATA</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">PyExc_EOFError</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is a example about how python deal with the exception.</p>

<p>What would happen if there is a expression <code>1/0</code>.
I use IPython interpreter do this demo.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">code</span> <span class="o">=</span> <span class="nb">compile</span><span class="p">(</span><span class="s">&quot;1/0&quot;</span><span class="p">,</span> <span class="s">&quot;testscript&quot;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span> <span class="s">&quot;exec&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="n">dis</span><span class="o">.</span><span class="n">disassemble</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class="line">      <span class="mi">1</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">                  <span class="mi">3</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">                  <span class="mi">6</span> <span class="n">BINARY_DIVIDE</span>
</span><span class="line">                  <span class="mi">7</span> <span class="n">POP_TOP</span>
</span><span class="line">                  <span class="mi">8</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class="line">                 <span class="mi">11</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The assemble code (opcode) of expression <code>1/0</code> in Python is compiled into that opcode code. It isn’t difficult to understand what the <code>LOAD_CONST</code> do.</p>

<p>Let’s dig into the detail of <code>BINARY_DIVIDE</code> in Python/ceval.c</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="p">[</span><span class="n">Python</span><span class="o">/</span><span class="n">ceval</span><span class="p">.</span><span class="n">c</span><span class="p">]</span>
</span><span class="line">    <span class="k">for</span><span class="p">(;;)</span><span class="c1">// big for loop</span>
</span><span class="line">        <span class="p">...</span>
</span><span class="line">        <span class="n">TARGET_NOARG</span><span class="p">(</span><span class="n">BINARY_DIVIDE</span><span class="p">)</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_Py_QnewFlag</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="n">w</span> <span class="o">=</span> <span class="n">POP</span><span class="p">();</span>
</span><span class="line">                    <span class="n">v</span> <span class="o">=</span> <span class="n">TOP</span><span class="p">();</span>
</span><span class="line">                    <span class="n">x</span> <span class="o">=</span> <span class="n">PyNumber_Divide</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">);</span> <span class="c1">//</span>
</span><span class="line">                    <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class="line">                    <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">w</span><span class="p">);</span>
</span><span class="line">                    <span class="n">SET_TOP</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class="line">                    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">DISPATCH</span><span class="p">();</span>
</span><span class="line">                    <span class="k">break</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">...</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/* </span>
</span><span class="line"><span class="cm">           set up the basic information for the reason </span>
</span><span class="line"><span class="cm">           why exception happened  -- notes by Jason Leaster</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="cm">/* Quickly continue if no error occurred */</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">why</span> <span class="o">==</span> <span class="n">WHY_NOT</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="n">READ_TIMESTAMP</span><span class="p">(</span><span class="n">loop1</span><span class="p">);</span>
</span><span class="line">                <span class="k">continue</span><span class="p">;</span> <span class="cm">/* Normal, fast path */</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="n">why</span> <span class="o">=</span> <span class="n">WHY_EXCEPTION</span><span class="p">;</span>
</span><span class="line">            <span class="n">x</span> <span class="o">=</span> <span class="n">Py_None</span><span class="p">;</span>
</span><span class="line">            <span class="n">err</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="p">...</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/* Log traceback info if this is a real exception */</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">why</span> <span class="o">==</span> <span class="n">WHY_EXCEPTION</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">PyTraceBack_Here</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class="line">            <span class="p">...</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="p">...</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="n">Objects</span><span class="o">/</span><span class="n">abstract</span><span class="p">.</span><span class="n">c</span><span class="p">]</span>
</span><span class="line"><span class="n">BINARY_FUNC</span><span class="p">(</span><span class="n">PyNumber_Subtract</span><span class="p">,</span> <span class="n">nb_subtract</span><span class="p">,</span> <span class="s">&quot;-&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* PyNumber_Divide is just the other name of function nb_divide </span>
</span><span class="line"><span class="cm">   and then you will find that the nb_divide is just a function pointer</span>
</span><span class="line"><span class="cm">   in struct PyNumberMethods.</span>
</span><span class="line">
</span><span class="line"><span class="cm">   The REAL implementation is function @int_classic_div in </span>
</span><span class="line"><span class="cm">   Objects/intobject.c. The @int_classic_div will call function</span>
</span><span class="line"><span class="cm">   @i_divmod in Objects/intobject.c</span>
</span><span class="line">
</span><span class="line"><span class="cm">                                    -- notes by Jason Leaster</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="n">BINARY_FUNC</span><span class="p">(</span><span class="n">PyNumber_Divide</span><span class="p">,</span> <span class="n">nb_divide</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">BINARY_FUNC</span><span class="p">(</span><span class="n">PyNumber_Divmod</span><span class="p">,</span> <span class="n">nb_divmod</span><span class="p">,</span> <span class="s">&quot;divmod()&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="n">Objects</span><span class="o">/</span><span class="n">intobject</span><span class="p">.</span><span class="n">c</span><span class="p">]</span>
</span><span class="line"><span class="n">i_divmod</span><span class="p">(</span><span class="k">register</span> <span class="kt">long</span> <span class="n">x</span><span class="p">,</span> <span class="k">register</span> <span class="kt">long</span> <span class="n">y</span><span class="p">,</span>
</span><span class="line">           <span class="kt">long</span> <span class="o">*</span><span class="n">p_xdivy</span><span class="p">,</span> <span class="kt">long</span> <span class="o">*</span><span class="n">p_xmody</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">xdivy</span><span class="p">,</span> <span class="n">xmody</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">         Keypoint!</span>
</span><span class="line"><span class="cm">         Here is where Python setup a new exception for &quot;divide zero&quot;</span>
</span><span class="line"><span class="cm">         problem.</span>
</span><span class="line"><span class="cm">                                            -- notes by JasonLeaster</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">PyErr_SetString</span><span class="p">(</span><span class="n">PyExc_ZeroDivisionError</span><span class="p">,</span>
</span><span class="line">                <span class="s">&quot;integer division or modulo by zero&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="n">DIVMOD_ERROR</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span> <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s the last mile to get the target place.
<code>PyErr_SetString</code> finish the job about the initialization of <code>divide zero</code> exception.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="p">[</span><span class="n">Python</span><span class="o">/</span><span class="n">errors</span><span class="p">.</span><span class="n">c</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span>
</span><span class="line"><span class="n">PyErr_Restore</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="n">type</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">value</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">traceback</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PyThreadState</span> <span class="o">*</span><span class="n">tstate</span> <span class="o">=</span> <span class="n">PyThreadState_GET</span><span class="p">();</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">*</span><span class="n">oldtype</span><span class="p">,</span> <span class="o">*</span><span class="n">oldvalue</span><span class="p">,</span> <span class="o">*</span><span class="n">oldtraceback</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* Save these in locals to safeguard against recursive</span>
</span><span class="line"><span class="cm">       invocation through Py_XDECREF */</span>
</span><span class="line">    <span class="n">oldtype</span> <span class="o">=</span> <span class="n">tstate</span><span class="o">-&gt;</span><span class="n">curexc_type</span><span class="p">;</span>
</span><span class="line">    <span class="n">oldvalue</span> <span class="o">=</span> <span class="n">tstate</span><span class="o">-&gt;</span><span class="n">curexc_value</span><span class="p">;</span>
</span><span class="line">    <span class="n">oldtraceback</span> <span class="o">=</span> <span class="n">tstate</span><span class="o">-&gt;</span><span class="n">curexc_traceback</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">tstate</span><span class="o">-&gt;</span><span class="n">curexc_type</span> <span class="o">=</span> <span class="n">type</span><span class="p">;</span>
</span><span class="line">    <span class="n">tstate</span><span class="o">-&gt;</span><span class="n">curexc_value</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class="line">    <span class="n">tstate</span><span class="o">-&gt;</span><span class="n">curexc_traceback</span> <span class="o">=</span> <span class="n">traceback</span><span class="p">;</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span>
</span><span class="line"><span class="n">PyErr_SetObject</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="n">exception</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* log this exception message into thread state */</span>
</span><span class="line">    <span class="n">PyErr_Restore</span><span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span>
</span><span class="line"><span class="n">PyErr_SetString</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="n">exception</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">string</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="n">PyString_FromString</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
</span><span class="line">    <span class="n">PyErr_SetObject</span><span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class="line">    <span class="n">Py_XDECREF</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After the VM (ceval.c) know why there is a exception, the VM will take step
into handling this exception. We have knew that the big <code>for switch loop</code> execute the opcode step by step. 
Once there is something wrong with the opcode at runtime, the VM will setup
 exception object by <code>PyErr_SetObject</code>. And then VM also will setup the traceback object of type <code>PyTracebackObject</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="cm">/* Traceback interface */</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_traceback</span> <span class="p">{</span>
</span><span class="line">    <span class="n">PyObject_HEAD</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">_traceback</span> <span class="o">*</span><span class="n">tb_next</span><span class="p">;</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">_frame</span> <span class="o">*</span><span class="n">tb_frame</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">tb_lasti</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">tb_lineno</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="n">PyTracebackObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You may notice that the <code>PyTracebackObject</code> is a single direction linked-list.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="k">static</span> <span class="n">PyTracebackObject</span> <span class="o">*</span>
</span><span class="line"><span class="nf">newtracebackobject</span><span class="p">(</span><span class="n">PyTracebackObject</span> <span class="o">*</span><span class="n">next</span><span class="p">,</span> <span class="n">PyFrameObject</span> <span class="o">*</span><span class="n">frame</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PyTracebackObject</span> <span class="o">*</span><span class="n">tb</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="p">((</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">PyTraceBack_Check</span><span class="p">(</span><span class="n">next</span><span class="p">))</span> <span class="o">||</span>
</span><span class="line">            <span class="n">frame</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="o">!</span><span class="n">PyFrame_Check</span><span class="p">(</span><span class="n">frame</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">        <span class="n">PyErr_BadInternalCall</span><span class="p">();</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">tb</span> <span class="o">=</span> <span class="n">PyObject_GC_New</span><span class="p">(</span><span class="n">PyTracebackObject</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">PyTraceBack_Type</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">tb</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">Py_XINCREF</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
</span><span class="line">        <span class="n">tb</span><span class="o">-&gt;</span><span class="n">tb_next</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class="line">        <span class="n">Py_XINCREF</span><span class="p">(</span><span class="n">frame</span><span class="p">);</span>
</span><span class="line">        <span class="n">tb</span><span class="o">-&gt;</span><span class="n">tb_frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class="line">        <span class="n">tb</span><span class="o">-&gt;</span><span class="n">tb_lasti</span> <span class="o">=</span> <span class="n">frame</span><span class="o">-&gt;</span><span class="n">f_lasti</span><span class="p">;</span>
</span><span class="line">        <span class="n">tb</span><span class="o">-&gt;</span><span class="n">tb_lineno</span> <span class="o">=</span> <span class="n">PyFrame_GetLineNumber</span><span class="p">(</span><span class="n">frame</span><span class="p">);</span>
</span><span class="line">        <span class="n">PyObject_GC_Track</span><span class="p">(</span><span class="n">tb</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">tb</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span>
</span><span class="line"><span class="nf">PyTraceBack_Here</span><span class="p">(</span><span class="n">PyFrameObject</span> <span class="o">*</span><span class="n">frame</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PyThreadState</span> <span class="o">*</span><span class="n">tstate</span> <span class="o">=</span> <span class="n">PyThreadState_GET</span><span class="p">();</span>
</span><span class="line">    <span class="n">PyTracebackObject</span> <span class="o">*</span><span class="n">oldtb</span> <span class="o">=</span> <span class="p">(</span><span class="n">PyTracebackObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">tstate</span><span class="o">-&gt;</span><span class="n">curexc_traceback</span><span class="p">;</span>
</span><span class="line">    <span class="n">PyTracebackObject</span> <span class="o">*</span><span class="n">tb</span> <span class="o">=</span> <span class="n">newtracebackobject</span><span class="p">(</span><span class="n">oldtb</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">tb</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="n">tstate</span><span class="o">-&gt;</span><span class="n">curexc_traceback</span> <span class="o">=</span> <span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span><span class="n">tb</span><span class="p">;</span>
</span><span class="line">    <span class="n">Py_XDECREF</span><span class="p">(</span><span class="n">oldtb</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">h</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;in frame :&quot;</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">()</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;in function :&quot;</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">()</span><span class="o">.</span><span class="n">f_code</span><span class="o">.</span><span class="n">co_name</span>
</span><span class="line">    <span class="mi">1</span><span class="o">/</span><span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">g</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;in frame :&quot;</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">()</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;in function :&quot;</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">()</span><span class="o">.</span><span class="n">f_code</span><span class="o">.</span><span class="n">co_name</span>
</span><span class="line">    <span class="n">h</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;in frame :&quot;</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">()</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;in function :&quot;</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">()</span><span class="o">.</span><span class="n">f_code</span><span class="o">.</span><span class="n">co_name</span>
</span><span class="line">    <span class="n">g</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">f</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This program will trig the exception at function h().
Here is the output of that program.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_22/traceback.png" alt="images" /></p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_22/frameobjectlist.png" alt="images" /></p>

<h3 id="hacker-time">Hacker Time</h3>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_22/hacktime0.png" alt="images" /></p>

<hr />
<p>Photo by Jason Leaster, ChangeDe, HuNan, China
<img src="http://jasonleaster.github.io/images/img_for_2016_02_22/bridge.jpg" alt="images" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Architecture of Python Virtual Machine]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/21/architecture-of-python-virtual-machine/"/>
    <updated>2016-02-21T11:42:50+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/21/architecture-of-python-virtual-machine</id>
    <content type="html"><![CDATA[<p>Python virtual machine is the core part of this language. After compiling the original python code into <code>Opcode</code>(byte code), python VM will take the job left. Python will take every opcode from <code>PyCodeObject</code>.</p>

<!-- more -->

<h3 id="executing-environment-in-python-vm">Executing environment in Python VM</h3>

<p>Actually, all the things that VM do is simulating what the OS do to excute a program.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_21/stack.png" alt="images" /></p>

<p>The figure over there show the representation of the model of stack-based machine.</p>

<p>If you are fimilary with system programming in C, it’s easy to understand the meaning of that figure.</p>

<p>But if you are an beginner with programming in C, you may try to finish the lab2( bomb ) in CSAPP. It will help beginner a lot to understand the mechanism of stack-based machine.</p>

<p><strong>We know that all the static information about the program store in <code>PyCodeObject</code>. But what about the dynamic information when the program is running in the Python VM?</strong></p>

<p><code>PyCodeObject</code> can’t include the dynamic information and the environment where program is running.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">number</span> <span class="o">=</span> <span class="mi">2016</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span><span class="line">    <span class="n">number</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class="line">    <span class="k">print</span> <span class="n">number</span> <span class="c"># 42</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You must know <code>number</code> in function <code>f()</code> and the variable which is not inside the block of function <code>f()</code> with the same name. That two variable are in different frame which means envrionment in running time.</p>

<p>In Python, there is a class to describe the envrionment at running time – <code>PyFrameObject</code>. It’s a simulation of stack frame in x86 platform.</p>

<p>You noticed that <code>PyFrameObject</code> is a size-variable Python Object class. Because this class maintain a <code>PyCodeObject</code> and stack in different block have different size. So <code>PyFrameObject</code> can’t be a size fixed class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="p">[</span><span class="n">Inlcude</span><span class="o">/</span><span class="n">frameobject</span><span class="p">.</span><span class="n">h</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_frame</span> <span class="p">{</span>
</span><span class="line">    <span class="n">PyObject_VAR_HEAD</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">_frame</span> <span class="o">*</span><span class="n">f_back</span><span class="p">;</span>  <span class="cm">/* previous frame, or NULL */</span>
</span><span class="line">
</span><span class="line">    <span class="n">PyCodeObject</span> <span class="o">*</span><span class="n">f_code</span><span class="p">;</span>   <span class="cm">/* code segment */</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">*</span><span class="n">f_builtins</span><span class="p">;</span>   <span class="cm">/* builtin symbol table (PyDictObject) */</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">*</span><span class="n">f_globals</span><span class="p">;</span>    <span class="cm">/* global symbol table (PyDictObject) */</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">*</span><span class="n">f_locals</span><span class="p">;</span>     <span class="cm">/* local symbol table (any mapping) */</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">**</span><span class="n">f_valuestack</span><span class="p">;</span><span class="cm">/* points after the last local */</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* Next free slot in f_valuestack.  </span>
</span><span class="line"><span class="cm">    Frame creation sets to f_valuestack.</span>
</span><span class="line"><span class="cm">    Frame evaluation usually NULLs it, but a frame that yields sets it</span>
</span><span class="line"><span class="cm">    to the current stack top. */</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">**</span><span class="n">f_stacktop</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span> <span class="n">PyFrameObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This figure show the origanization of PyFrameObject like a single linked-list. <code>f_back</code> point to the previous frame. <code>f_valuestack</code> is something like <code>ebp</code> register in x86 and <code>f_stacktop</code> like the <code>esp</code> register.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_21/frame.png" alt="images" /></p>

<p>How to create a new PyFrameObject? The answer is function <code>PyFrame_New</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="p">[</span><span class="n">Object</span><span class="o">/</span><span class="n">frameobject</span><span class="p">.</span><span class="n">c</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">PyFrameObject</span> <span class="o">*</span>
</span><span class="line"><span class="n">PyFrame_New</span><span class="p">(</span><span class="n">PyThreadState</span> <span class="o">*</span><span class="n">tstate</span><span class="p">,</span> <span class="n">PyCodeObject</span> <span class="o">*</span><span class="n">code</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">globals</span><span class="p">,</span>
</span><span class="line">                    <span class="n">PyObject</span> <span class="o">*</span><span class="n">locals</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">PyFrameObject</span> <span class="o">*</span><span class="n">back</span> <span class="o">=</span> <span class="n">tstate</span><span class="o">-&gt;</span><span class="n">frame</span><span class="p">;</span>
</span><span class="line">    <span class="n">PyFrameObject</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span> <span class="cm">/* New frame object */</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">*</span><span class="n">builtins</span><span class="p">;</span>
</span><span class="line">    <span class="n">Py_ssize_t</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="cm">/* Big block of code to set value of @builtins */</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">
</span><span class="line">    <span class="n">f</span><span class="o">-&gt;</span><span class="n">f_stacktop</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">f_valuestack</span><span class="p">;</span>
</span><span class="line">    <span class="n">f</span><span class="o">-&gt;</span><span class="n">f_builtins</span> <span class="o">=</span> <span class="n">builtins</span><span class="p">;</span>
</span><span class="line">    <span class="n">Py_XINCREF</span><span class="p">(</span><span class="n">back</span><span class="p">);</span>
</span><span class="line">    <span class="n">f</span><span class="o">-&gt;</span><span class="n">f_back</span> <span class="o">=</span> <span class="n">back</span><span class="p">;</span>
</span><span class="line">    <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">code</span><span class="p">);</span>
</span><span class="line">    <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">globals</span><span class="p">);</span>
</span><span class="line">    <span class="n">f</span><span class="o">-&gt;</span><span class="n">f_globals</span> <span class="o">=</span> <span class="n">globals</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="cm">/* some details are ommited */</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">
</span><span class="line">    <span class="n">f</span><span class="o">-&gt;</span><span class="n">f_locals</span> <span class="o">=</span> <span class="n">locals</span><span class="p">;</span>
</span><span class="line">    <span class="n">f</span><span class="o">-&gt;</span><span class="n">f_tstate</span> <span class="o">=</span> <span class="n">tstate</span><span class="p">;</span>
</span><span class="line">    <span class="n">f</span><span class="o">-&gt;</span><span class="n">f_lasti</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="n">f</span><span class="o">-&gt;</span><span class="n">f_lineno</span> <span class="o">=</span> <span class="n">code</span><span class="o">-&gt;</span><span class="n">co_firstlineno</span><span class="p">;</span>
</span><span class="line">    <span class="n">f</span><span class="o">-&gt;</span><span class="n">f_iblock</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">_PyObject_GC_TRACK</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">f</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Luckly, we could access <code>PyFrameObject</code> in Python at running time.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="n">value</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">g</span><span class="p">():</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    _getframe([depth]) return a frame object from the call stack.</span>
</span><span class="line"><span class="sd">    If that is deeper than the call stack, ValueError is raised.  The default</span>
</span><span class="line"><span class="sd">    for depth is zero, returning the frame at the top of the call stack.</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">frame</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">()</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;current function is : &quot;</span><span class="p">,</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_code</span><span class="o">.</span><span class="n">co_name</span>
</span><span class="line">    <span class="n">caller</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_back</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;caller function is : &quot;</span><span class="p">,</span> <span class="n">caller</span><span class="o">.</span><span class="n">f_code</span><span class="o">.</span><span class="n">co_name</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;caller&#39;s local namespace : &quot;</span><span class="p">,</span> <span class="n">caller</span><span class="o">.</span><span class="n">f_locals</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;caller&#39;s global namespace : &quot;</span><span class="p">,</span> <span class="n">caller</span><span class="o">.</span><span class="n">f_globals</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span><span class="line">    <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line">    <span class="n">g</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">show</span><span class="p">():</span>
</span><span class="line">    <span class="n">f</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">show</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">the output of this program :</span>
</span><span class="line"><span class="sd">jasonleaster@ubuntu:~/Code_by_Jason/Python_language$ python caller.py </span>
</span><span class="line"><span class="sd">current function is :  g</span>
</span><span class="line"><span class="sd">caller function is :  f</span>
</span><span class="line"><span class="sd">caller&#39;s local namespace :  {&#39;a&#39;: 1, &#39;b&#39;: 2}</span>
</span><span class="line"><span class="sd">caller&#39;s global namespace :  [&#39;g&#39;, &#39;f&#39;, &#39;__builtins__&#39;, &#39;__file__&#39;, &#39;show&#39;, &#39;value&#39;, &#39;__package__&#39;, &#39;sys&#39;, &#39;__name__&#39;, &#39;__doc__&#39;]</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="name-scope-and-namespace">Name, Scope and Namespace</h3>

<p>We have knew the three different namespace – locals, globals and builtins.
In Python, there is a important basic structure – <code>module</code>.
More generally, every <code>.py</code> file is a module in Python. This concept help Python to divide namespace and reuse the program which have been writed.</p>

<p>Name is helpful to memory something which is not simple enough.</p>

<p>Assignment expression in Python have two things in common:</p>

<ul>
  <li>Create a new object</li>
  <li>build a connection between that new object and a name</li>
</ul>

<p>You may be familary with assignment like this <code>x = 1</code>. But expression like
<code>def function():</code> and <code>class A():</code>, all these expression are also assignment expressions. What assignment to do is that build a connection between the object and name. It’s like a pair (name, object), (x, 1), (code, codeObject) and so on.</p>

<p>A namespace is corresponding with unique scope.</p>

<p>There is a comparasion between Python and C about namespace.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_21/compare.png" alt="images" /></p>

<p>Just guess what would happend if you run these two program ?</p>

<p>The right side C program will run correctly but the left side Python program will run into exception for “local variable ‘a’ referenced before assignment”.</p>

<p>The reason is that no matter where the variable are decalred in the scope, all things in that scope can see that variable. But what is interesting is that the assignment expression are after the first print expression. When program run into the first print expression, the assginment are unfinished, 
<strong>which means the local object haven’t created yet.</strong></p>

<p><code>global</code> keyword help programmer to declare a name which is in the global scope.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span><span class="line">    <span class="k">global</span> <span class="n">a</span>
</span><span class="line">    <span class="k">print</span> <span class="n">a</span>
</span><span class="line">    <span class="n">a</span> <span class="o">=</span> <span class="mi">2016</span>
</span><span class="line">    <span class="k">print</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>But you should know that once you declare a variable with <code>global</code> keyword, all thing happen to the variable in the local scope will influence that object in the global scope and change it’s value. After function <code>f()</code> finished, the value of a in global scope changed into 2016.</p>

<h3 id="runtime-architecture-of-python-vm">Runtime Architecture of Python VM</h3>

<p>This function is the core part of virtual machine in Python. Once we get the opcode from <code>PyFrameObject</code>, the function <code>PyEval_EvalFrameEx</code> will process that opcode and run it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="p">[</span><span class="n">Python</span><span class="o">/</span><span class="n">ceval</span><span class="p">.</span><span class="n">c</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="p">...</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* Code access macros */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define INSTR_OFFSET()  ((int)(next_instr - first_instr))</span>
</span><span class="line"><span class="cp">#define NEXTOP()        (*next_instr++)</span>
</span><span class="line"><span class="cp">#define NEXTARG()       (next_instr += 2, (next_instr[-1]&lt;&lt;8) + next_instr[-2])</span>
</span><span class="line"><span class="cp">#define PEEKARG()       ((next_instr[2]&lt;&lt;8) + next_instr[1])</span>
</span><span class="line"><span class="cp">#define JUMPTO(x)       (next_instr = first_instr + (x))</span>
</span><span class="line"><span class="cp">#define JUMPBY(x)       (next_instr += (x))</span>
</span><span class="line">
</span><span class="line"><span class="p">...</span>
</span><span class="line">
</span><span class="line"><span class="n">PyObject</span> <span class="o">*</span>
</span><span class="line"><span class="n">PyEval_EvalFrameEx</span><span class="p">(</span><span class="n">PyFrameObject</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">int</span> <span class="n">throwflag</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="k">for</span><span class="p">(;;)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">            <span class="n">f</span><span class="o">-&gt;</span><span class="n">f_lasti</span> <span class="o">=</span> <span class="n">INSTR_OFFSET</span><span class="p">();</span><span class="c1">// get the opcode</span>
</span><span class="line">            <span class="p">...</span>
</span><span class="line">            <span class="n">opcode</span> <span class="o">=</span> <span class="n">NEXTOP</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">            <span class="n">oparg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">            <span class="cm">/* allows oparg to be stored in a register because</span>
</span><span class="line"><span class="cm">               it doesn&#39;t have to be remembered across a full loop */</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">HAS_ARG</span><span class="p">(</span><span class="n">opcode</span><span class="p">))</span>
</span><span class="line">                <span class="n">oparg</span> <span class="o">=</span> <span class="n">NEXTARG</span><span class="p">();</span>
</span><span class="line"><span class="nl">dispatch_opcode</span><span class="p">:</span>
</span><span class="line">                                                                                    <span class="cm">/* Main switch on opcode */</span>
</span><span class="line">                                                                                        <span class="n">READ_TIMESTAMP</span><span class="p">(</span><span class="n">inst0</span><span class="p">);</span>
</span><span class="line">            <span class="k">switch</span> <span class="p">(</span><span class="n">opcode</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">                <span class="k">case</span> <span class="nl">NOP</span><span class="p">:</span>
</span><span class="line">                    <span class="p">...</span>
</span><span class="line">                <span class="k">case</span> <span class="nl">LOAD_FAST</span><span class="p">:</span>
</span><span class="line">                    <span class="p">...</span>
</span><span class="line">                <span class="k">case</span> <span class="nl">LOAD_CONST</span><span class="p">:</span>
</span><span class="line">                    <span class="p">...</span>
</span><span class="line">                    <span class="p">...</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p>Photo by QianNan Qu. In XiangTan, HuNan, China.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_21/me.jpg" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Crawler]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/19/web-crawler/"/>
    <updated>2016-02-19T21:27:47+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/19/web-crawler</id>
    <content type="html"><![CDATA[<table>
  <tbody>
    <tr>
      <td>Finished my first web scrawler … =_=</td>
    </tr>
  </tbody>
</table>

<p>Here is all about the spider. It’s small but funny.</p>

<p>After I finish this web scrawler, I learn that. The most important thing to build a web scrawler is not the code but the inverse process. How to build your program like a web browser.</p>

<p>Static web page is easy to get but how about a dynamic web page. Nowadays, more and more website use <code>ajax</code> to meet their bussiness requirement. If you just send a simple request to the server of that web site, you will find than the returned page is just only part of the total user page that you saw in the web browser.</p>

<!-- more -->

<p>Here is my demonstration.
<a href="www.duitang.com">duitang.com</a> is a funny images web site. I love a cute virtual character who is named as Mr.zhangcao . There is a lot of images of that guy. So I want build a web crawler to get that images all.</p>

<p>If you send a request to the <a href="http://www.duitang.com/album/56759353">main page</a> and anlysis the returned page (Python’s library <strong>BeautifulSoup</strong> is helpful to analysis html files), you will find there are some links in the html file. But you will only get about 20+ images but not all images that you viewed in the web browser. When you pull down the button of the brower, you will see more and more images coming out to user.</p>

<p>Why the returned page don’t have all links of images? The answer is <code>ajax</code>(asynchronous JavaScript and XML) is a set of web development techniques using many web technologies on the client-side to create asynchronous Web application.</p>

<p><strong>The monitor in browswer will help programmer who is writing a web spider.</strong></p>

<p>Dig into the detail of http transport, you will find a special request which are sent to server by the client browser.</p>

<p>This is that special url.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">duitang</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">napi</span><span class="o">/</span><span class="n">blog</span><span class="o">/</span><span class="nb">list</span><span class="o">/</span><span class="n">by_album</span><span class="o">/</span><span class="err">?</span><span class="n">album_id</span><span class="o">=</span>
</span><span class="line"><span class="o">&amp;</span><span class="n">limit</span><span class="o">=</span><span class="mi">24</span>
</span><span class="line"><span class="o">&amp;</span><span class="n">include_fields</span><span class="o">=</span><span class="n">top_comments</span><span class="o">%</span><span class="mi">2</span><span class="n">Cis_root</span><span class="o">%</span><span class="mi">2</span><span class="n">Csource_link</span><span class="o">%</span><span class="mi">2</span><span class="n">Cbuyable</span><span class="o">%</span><span class="mi">2</span><span class="n">Croot_id</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span>
</span><span class="line"><span class="n">status</span><span class="o">%</span><span class="mi">2</span><span class="n">Clike_count</span><span class="o">%</span><span class="mi">2</span><span class="n">Csender</span><span class="o">%</span><span class="mi">2</span><span class="n">Creply_count</span><span class="o">&amp;</span><span class="n">start</span><span class="o">=</span><span class="mi">48</span><span class="o">&amp;</span><span class="n">_</span><span class="o">=</span><span class="mi">1455881387791</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If client request that url to the server, the server will return a json data object. The job left is to analysis the json object and then get the resource links.</p>

<p>The important part of building a web crawler is not the code but how to find the useful url and get more useful information.</p>

<p>Here is a screenshut for what my web scrawler got.
<img src="http://jasonleaster.github.io/images/img_for_2016_02_19/screenshut.png" alt="images" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Programmer 	: EOF</span>
</span><span class="line"><span class="sd">E-mail 		: jasonleaster@163.com</span>
</span><span class="line"><span class="sd">File        : duitang.py</span>
</span><span class="line"><span class="sd">Date        : 2016.02.19</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">urllib</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">json</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="n">downloadCount</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">album_id</span> <span class="o">=</span> <span class="mi">72129639</span>
</span><span class="line"><span class="n">limit</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class="line"><span class="n">start</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="c"># This function return a URL and this URL will return a json object data.</span>
</span><span class="line"><span class="k">def</span> <span class="nf">duitangURLMaker</span><span class="p">(</span><span class="n">album_id</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="n">start</span><span class="p">):</span>
</span><span class="line">    <span class="n">url_part_1</span> <span class="o">=</span> <span class="s">&quot;http://www.duitang.com/napi/blog/list/by_album/?album_id=&quot;</span>
</span><span class="line">    <span class="n">url_part_2</span> <span class="o">=</span> <span class="s">&quot;&amp;limit=&quot;</span>
</span><span class="line">    <span class="n">url_part_3</span> <span class="o">=</span> <span class="s">&quot;&amp;include_fields=top_comments%2Cis_root%2Csource_link%2Cbuyable%2Croot_id%2Cstatus%2Clike_count%2Csender%2Creply_count&amp;start=&quot;</span>
</span><span class="line">    <span class="n">url_part_4</span> <span class="o">=</span> <span class="s">&quot;&amp;_=1455881387791&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">URL</span> <span class="o">=</span> <span class="n">url_part_1</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">album_id</span><span class="p">)</span> <span class="o">+</span> <span class="n">url_part_2</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span> <span class="o">+</span> <span class="n">url_part_3</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">start</span><span class="p">)</span> <span class="o">+</span> <span class="n">url_part_4</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">URL</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">imgURLs</span><span class="p">(</span><span class="n">jsonDict</span><span class="p">):</span>
</span><span class="line">	<span class="n">URLs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">	<span class="n">object_list</span> <span class="o">=</span> <span class="n">jsonDict</span><span class="p">[</span><span class="s">&quot;data&quot;</span><span class="p">][</span><span class="s">&quot;object_list&quot;</span><span class="p">]</span>
</span><span class="line">	<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">object_list</span><span class="p">:</span>
</span><span class="line">		<span class="n">URLs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="s">&quot;photo&quot;</span><span class="p">][</span><span class="s">&quot;path&quot;</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">	<span class="k">return</span> <span class="n">URLs</span>
</span><span class="line">
</span><span class="line"><span class="n">URL</span> 		<span class="o">=</span> <span class="n">duitangURLMaker</span><span class="p">(</span><span class="n">album_id</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="n">start</span><span class="p">)</span>
</span><span class="line"><span class="n">string</span> 		<span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">URL</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line"><span class="n">jsonDict</span> 	<span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">URLs</span> <span class="o">=</span> <span class="n">imgURLs</span><span class="p">(</span><span class="n">jsonDict</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">URLs</span><span class="p">:</span>
</span><span class="line">    <span class="n">Filename</span> <span class="o">=</span> <span class="s">&quot;duitang_</span><span class="si">%s</span><span class="s">.jpeg&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">downloadCount</span><span class="p">)</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="n">urllib</span><span class="o">.</span><span class="n">urlretrieve</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">Filename</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;Download from&quot;</span><span class="p">,</span> <span class="n">url</span>
</span><span class="line">        <span class="n">downloadCount</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">except</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;Analyse Failed&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="download-some-pdf-documents-on-a-website">Download some pdf documents on a website</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Programmer 	:   EOF</span>
</span><span class="line"><span class="sd">E-mail 		:   jasonleaster@163.com</span>
</span><span class="line"><span class="sd">File        :   stanford.py</span>
</span><span class="line"><span class="sd">Date        :   2016.02.19</span>
</span><span class="line">
</span><span class="line"><span class="sd">Description:</span>
</span><span class="line"><span class="sd">	This programmer will help user who is learn cs97 in stanford to download some pdf material in the website.</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">urllib</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">BeautifulSoup</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">json</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="n">URL</span> <span class="o">=</span> <span class="s">&quot;http://web.stanford.edu/class/cs97si/&quot;</span>
</span><span class="line"><span class="n">html</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">URL</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line"><span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</span><span class="line"><span class="n">tags</span> <span class="o">=</span> <span class="n">soup</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">downloadCount</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">pattern</span> <span class="o">=</span> <span class="s">&quot;.pdf$&quot;</span>
</span><span class="line"><span class="n">regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">tags</span><span class="p">:</span>
</span><span class="line">    <span class="n">fileName</span> <span class="o">=</span> <span class="n">tag</span><span class="p">[</span><span class="s">&quot;href&quot;</span><span class="p">]</span>
</span><span class="line">    <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span> <span class="o">+</span> <span class="n">fileName</span>
</span><span class="line">
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    search(string[, pos[, endpos]]) --&gt; match object or None.</span>
</span><span class="line"><span class="sd">    Scan through string looking for a match, and return a corresponding</span>
</span><span class="line"><span class="sd">    MatchObject instance. Return None if no position in the string matches.</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">url</span> <span class="o">=</span> <span class="n">regex</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">    <span class="n">regex</span><span class="o">.</span><span class="n">search</span>
</span><span class="line">    <span class="k">if</span> <span class="n">url</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">        <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="n">string</span>
</span><span class="line">        <span class="k">try</span><span class="p">:</span>
</span><span class="line">            <span class="n">urllib</span><span class="o">.</span><span class="n">urlretrieve</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">fileName</span><span class="p">)</span>
</span><span class="line">            <span class="k">print</span> <span class="s">&quot;Download from&quot;</span><span class="p">,</span> <span class="n">url</span>
</span><span class="line">            <span class="n">downloadCount</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">except</span><span class="p">:</span>
</span><span class="line">            <span class="k">print</span> <span class="s">&quot;Analyse Failed&quot;</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />
<p>Photo by Jason Leaster. LiuYe Lake in ChangDe, HuNan, China.
<img src="http://jasonleaster.github.io/images/img_for_2016_02_19/liuyehu.jpg" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brief Introduction to Opcodes in Python]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/06/brief-introduction-to-opcodes-in-python/"/>
    <updated>2016-02-06T18:39:50+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/06/brief-introduction-to-opcodes-in-python</id>
    <content type="html"><![CDATA[<p>Python program is compiled down to bytecode which is sort of like assembly for the python virtual machine. The interpreter executes each of these bytecodes one by one.</p>

<p>Let’s look the following code. It’s easy to understand what it is doing without my explanation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">[</span><span class="n">demo</span><span class="o">.</span><span class="n">py</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line"><span class="n">y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line"><span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;x, y, z&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!-- more -->

<p>Programmer can use python module <code>dis</code> to transform that code into the assemble program of Python.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">dis</span> <span class="s">&quot;./demo.py&quot;</span>
</span><span class="line"><span class="c">#line number </span>
</span><span class="line"><span class="c">#in the       #assemble code           # object name in the source code</span>
</span><span class="line"><span class="c">#source code</span>
</span><span class="line"><span class="mi">1</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">            <span class="mi">3</span> <span class="n">STORE_NAME</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="mi">2</span>           <span class="mi">6</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">            <span class="mi">9</span> <span class="n">STORE_NAME</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="mi">3</span>          <span class="mi">12</span> <span class="n">LOAD_NAME</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class="line">           <span class="mi">15</span> <span class="n">LOAD_NAME</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line">           <span class="mi">18</span> <span class="n">BINARY_ADD</span>
</span><span class="line">           <span class="mi">19</span> <span class="n">STORE_NAME</span>               <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="mi">4</span>          <span class="mi">22</span> <span class="n">LOAD_NAME</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class="line">           <span class="mi">25</span> <span class="n">PRINT_ITEM</span>
</span><span class="line">           <span class="mi">26</span> <span class="n">LOAD_NAME</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line">           <span class="mi">29</span> <span class="n">PRINT_ITEM</span>
</span><span class="line">           <span class="mi">30</span> <span class="n">LOAD_NAME</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span><span class="line">           <span class="mi">33</span> <span class="n">PRINT_ITEM</span>
</span><span class="line">           <span class="mi">34</span> <span class="n">PRINT_NEWLINE</span>
</span><span class="line">           <span class="mi">35</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class="line">           <span class="mi">38</span> <span class="n">RETURN_VALUE</span>
</span><span class="line">
</span><span class="line"><span class="c">########################################################</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">In the interpreter of Python, programmer also can call</span>
</span><span class="line"><span class="sd">the built-in function @compile and import module @dis</span>
</span><span class="line"><span class="sd">to do the same thing.</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">source</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;./hello.py&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">code</span> <span class="o">=</span> <span class="nb">compile</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="s">&quot;demo&quot;</span><span class="p">,</span> <span class="s">&quot;exec&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">dis</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s not hard to understand the <code>opcode</code>. In implementation of CPython, all opcode defined as Macro in the header file <code>Include/opcode.h</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="p">[</span><span class="n">Include</span><span class="o">/</span><span class="n">opcode</span><span class="p">.</span><span class="n">h</span><span class="p">]</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="cp">#define LOAD_CONST  100 </span><span class="cm">/* Index in const list */</span><span class="cp"></span>
</span><span class="line"><span class="cp">#define LOAD_NAME   101 </span><span class="cm">/* Index in name list */</span><span class="cp"></span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The evaluation machine of Python is a stack-based machine.
If you find the detail of <code>18 BINARY_ADD</code>, you will find that this opcode 
will pop the two object on the stack and then add them together.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="p">[</span><span class="n">Python</span><span class="o">/</span><span class="n">ceval</span><span class="p">.</span><span class="n">c</span><span class="p">]</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* Stack manipulation macros */</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* The stack can grow at most MAXINT deep, as co_nlocals and</span>
</span><span class="line"><span class="cm">      co_stacksize are ints. */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define STACK_LEVEL()     ((int)(stack_pointer - f-&gt;f_valuestack))</span>
</span><span class="line"><span class="cp">#define EMPTY()           (STACK_LEVEL() == 0)</span>
</span><span class="line"><span class="cp">#define TOP()             (stack_pointer[-1])</span>
</span><span class="line"><span class="cp">#define SECOND()          (stack_pointer[-2])</span>
</span><span class="line"><span class="cp">#define THIRD()           (stack_pointer[-3])</span>
</span><span class="line"><span class="cp">#define FOURTH()          (stack_pointer[-4])</span>
</span><span class="line"><span class="cp">#define PEEK(n)           (stack_pointer[-(n)])</span>
</span><span class="line"><span class="cp">#define SET_TOP(v)        (stack_pointer[-1] = (v))</span>
</span><span class="line"><span class="cp">#define SET_SECOND(v)     (stack_pointer[-2] = (v))</span>
</span><span class="line"><span class="cp">#define SET_THIRD(v)      (stack_pointer[-3] = (v))</span>
</span><span class="line"><span class="cp">#define SET_FOURTH(v)     (stack_pointer[-4] = (v))</span>
</span><span class="line"><span class="cp">#define SET_VALUE(n, v)   (stack_pointer[-(n)] = (v))</span>
</span><span class="line"><span class="cp">#define BASIC_STACKADJ(n) (stack_pointer += n)</span>
</span><span class="line"><span class="cp">#define BASIC_PUSH(v)     (*stack_pointer++ = (v))</span>
</span><span class="line"><span class="cp">#define BASIC_POP()       (*--stack_pointer)</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming in Python]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/05/functional-programming-in-python/"/>
    <updated>2016-02-05T02:37:57+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/05/functional-programming-in-python</id>
    <content type="html"><![CDATA[<p>Functional programming is not only use functions.
Think of “y = f(x)” or “h = f * g”</p>

<p>For comparasion, there are different paradigms in programming.</p>

<ul>
  <li>Structured/Procedural – Functions, loops, conditions</li>
  <li>Object-Oriented Programming (OOP) – Classes, objects, methods</li>
  <li>Functional Programming – Decorators, comprehensions, and generators</li>
  <li>Logic Programming</li>
</ul>

<p>Functions in Python are <code>first class value</code>. It can take functions as arguments and return functions like a value.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">function @calc take @f as an argument and use it as a function.</span>
</span><span class="line"><span class="sd">Something like function pointer in C.</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">calc</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span>
</span><span class="line">
</span><span class="line"><span class="n">calc</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>In Python, there have anonymous functions which is called <code>Lambda Expression</code> which’s body is limited to one expression.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">calc</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">calc</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here, lambda expression used as a argument which is passed into function <code>calc</code>. Function like <code>add</code> and <code>sub</code>, they are too short and don’t need a special name to be identified. So, Python support a mechanism – anonymous function which is called <code>Lambda Expression</code>.</p>

<p>There is a another demo. We will change the code from procedure oriented into functional style.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">In a procedure way.</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">incr</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">increment_each</span><span class="p">(</span><span class="n">elements</span><span class="p">):</span>
</span><span class="line">    <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">elements</span><span class="p">:</span>
</span><span class="line">        <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">incr</span><span class="p">(</span><span class="n">elem</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">results</span>
</span><span class="line">
</span><span class="line"><span class="n">increment_each</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span><span class="line"><span class="c"># -&gt; [2, 3, 4]</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">In a functional way.</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="nb">map</span><span class="p">(</span><span class="n">incr</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span><span class="line"><span class="c"># or</span>
</span><span class="line"><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="c"># if we want to get the length of each element in a iterable object</span>
</span><span class="line"><span class="nb">map</span><span class="p">(</span><span class="nb">len</span><span class="p">,</span> <span class="n">iterable_object</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>filter</code> is a related idea in functional tools like map.
<code>filter</code> return a new sequence where values are taken from the given sequence if they return True when passed to a given function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</span><span class="line"><span class="c"># -&gt; [2, 4]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>reduce</code> will accumulate and return a single result, given a sequence
and passing each value to a function along with the current result.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
</span><span class="line"><span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">accum</span><span class="p">,</span> <span class="n">current</span><span class="p">:</span> <span class="n">accum</span> <span class="o">+</span> <span class="n">current</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="c"># -&gt; 6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="decorator">Decorator</h3>

<p>In Python, function is first-class value and can be used as returned value.
So, programmer can define nested functions in Python like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Nested function</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">outer</span><span class="p">():</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;I am the inner function&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">inner</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="o">=</span> <span class="n">outer</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span><span class="p">()</span>
</span><span class="line"><span class="c"># -&gt; I am the inner function</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Closure</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">outer</span><span class="p">(</span><span class="n">var</span> <span class="o">=</span> <span class="mi">10</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="s">&quot;Local scope of function @outer&quot;</span>
</span><span class="line">
</span><span class="line">     <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
</span><span class="line">         <span class="k">print</span> <span class="s">&quot;I am the inner function!&quot;</span>
</span><span class="line">         <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">         You can&#39;t change value of variable once the</span>
</span><span class="line"><span class="sd">         @outer function finished. You will get error</span>
</span><span class="line"><span class="sd">         if you modify variable which is not in scope</span>
</span><span class="line"><span class="sd">         of function @inner. You can&#39;t modify @var</span>
</span><span class="line"><span class="sd">         like this: var += 1 (You will get exception</span>
</span><span class="line"><span class="sd">         information like &quot;UnboundLocalError&quot;)</span>
</span><span class="line"><span class="sd">         &quot;&quot;&quot;</span>
</span><span class="line">         <span class="k">return</span> <span class="n">var</span> <span class="o">+</span> <span class="n">number</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">inner</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="o">=</span> <span class="n">outer</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span><span class="p">(</span><span class="mi">90</span><span class="p">)</span>
</span><span class="line"><span class="c"># -&gt; 100</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Look the demo below there.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">cheker</span><span class="p">(</span><span class="n">arguments_of_func</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">            @checker receive the same arguments as @func</span>
</span><span class="line"><span class="sd">            and do something that @func didn&#39;t do.</span>
</span><span class="line"><span class="sd">        &quot;&quot;&quot;</span>
</span><span class="line">        <span class="k">return</span> <span class="n">new_retVal</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">checker</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Actually, the reture value of <code>wrapper</code> is a function just little different from the original function passed into <code>wrapper</code> – <code>func</code>. Function <code>wrapper</code> like a shell on the original function and return with a more powerful function. That’s decorator. <code>wrapper</code> is a decorator.</p>

<p><strong>Decorator: A decorator is any callable Python object that is used to modify a function, method or class definition. A decorator is passed th original object being defined and returns a modified object, which is then bound to the name in the definition. Python decorators were inspired in part by Java annotations, and have a similar syntax; teh decorator syntax is pure syntactic sugar, using @ as the keyword               – Wikipedia</strong></p>

<p>Here is a more generic decorators</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;Show arguments: </span><span class="si">%s</span><span class="s">, </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">inner</span>
</span><span class="line">
</span><span class="line"><span class="nd">@wrapper</span>
</span><span class="line"><span class="k">def</span> <span class="nf">adder</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">adder</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">90</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#-&gt; Show arguments: (10, 90), {}</span>
</span><span class="line"><span class="c">#   100</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A better and more detailed explaination reader could read the blog
<a href="http://www.simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/">Understanding Python Decoratos in 12 Easy Steps!</a>
which is written by <code>simeon franklin</code>.</p>

<h3 id="generator">Generator</h3>

<p>A <code>generator</code> is a special type of iterator(not vice versa!). 
Generator is a factory that lazily produces values.</p>

<p>There are two types of generators in Python: generator functions and generator expression.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Demo for generator</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">():</span>
</span><span class="line">    <span class="n">prev</span><span class="p">,</span> <span class="n">curr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">            There is no @return keyword in generator,</span>
</span><span class="line"><span class="sd">        but there must be a @yield with a return object </span>
</span><span class="line"><span class="sd">        if there is a  generator function.</span>
</span><span class="line"><span class="sd">        &quot;&quot;&quot;</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">curr</span>
</span><span class="line">        <span class="n">prev</span><span class="p">,</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">,</span> <span class="n">prev</span> <span class="o">+</span> <span class="n">curr</span>
</span><span class="line">
</span><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="n">fib</span><span class="p">()</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c">############################################</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Generator Expression</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">lazy_square</span> <span class="o">=</span> <span class="p">(</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Type:        generator</span>
</span><span class="line"><span class="sd">String form: &lt;generator object &lt;genexpr&gt; at 0x7fd3bc119fa0&gt;</span>
</span><span class="line"><span class="sd">Docstring:   &lt;no docstring&gt;</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">lazy_square</span> <span class="o">==</span> <span class="nb">list</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="n">lazy_square</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="o">&lt;</span><span class="n">genexpr</span><span class="o">&gt;</span> <span class="n">at</span> <span class="mh">0x7fd3bc0da410</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="n">lazy_square</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="n">lazy_square</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="n">lazy_square</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />
<p>Photo by Jason Leaster in ChangDe, HuNan, China.</p>

<p>What a big banana :)</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_06/banana.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dict Object in Python]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/04/dict-object-in-python/"/>
    <updated>2016-02-04T12:54:11+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/04/dict-object-in-python</id>
    <content type="html"><![CDATA[<p>Try to answer these question.</p>

<ol>
  <li>
    <p>Whatare dictionaries and sets good for?</p>
  </li>
  <li>
    <p>How are dictionaries and set the same?</p>
  </li>
  <li>
    <p>What is the overhead when using a dictionary?</p>
  </li>
  <li>
    <p>How can I optimize the performance of a dictionary?</p>
  </li>
  <li>
    <p>How does Python use dictionaries to keep track of namespace?</p>
  </li>
</ol>

<!-- more -->

<p>Dictionary object type – mapping from hashable object to object</p>

<p>In the implemenation, Python don’t choose <code>Red-Black Tree</code> as the basic data structure but Hash Table with a special technology – <code>Open Addressing</code>.</p>

<p>About open addressing:</p>

<blockquote>
  <p>In computer science, lazy deletion refers to a method of deleting elements from a hash table that uses open addressing. In this method, deletions are done by marking an element as deleted, rather than erasing it entirely. Deleted locations are treated as empty when inserting and as occupied during a search. – Wikipedia</p>
</blockquote>

<p>There three kinds of slots in the table:</p>

<ol>
  <li>
    <p>Unused.  <code>me_key</code> == <code>me_value</code> == <code>NULL</code>
Does not hold an active (key, value) pair now and never did.  Unused can transition to Active upon key insertion.  This is the only case in which <code>me_key</code> is NULL, and is each slot’s initial state.</p>
  </li>
  <li>
    <p>Active.  <code>me_key</code> != NULL and <code>me_key</code> != dummy and <code>me_value</code> != NULL Holds an active (key, value) pair.  Active can transition to Dummy upon key deletion.  This is the only case in which <code>me_value</code> != NULL.</p>
  </li>
  <li>
    <p>Dummy.  <code>me_key</code> == dummy and <code>me_value</code> == NULL
Previously held an active (key, value) pair, but that was deleted and an active pair has not yet overwritten the slot.  Dummy can transition to Active upon key insertion. Dummy slots cannot be made Unused again (cannot have <code>me_key</code> set to NULL), else the probe sequence in case of collision would have no way to know they were once active.</p>
  </li>
</ol>

<p>Here, Python define the entry data type of dict in python <code>PyDictObejct</code>. A entry is like a paire (key, value). To avoid calculating the hash value of <code>me_key</code>, <code>me_hash</code> used as a cached value for it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="p">[</span><span class="n">Include</span><span class="o">/</span><span class="n">dictobject</span><span class="p">.</span><span class="n">h</span><span class="p">]</span>
</span><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="n">Py_ssize_t</span> <span class="n">me_hash</span><span class="p">;</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">*</span><span class="n">me_key</span><span class="p">;</span>
</span><span class="line">    <span class="n">PyObject</span> <span class="o">*</span><span class="n">me_value</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="n">PyDictEntry</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To ensure the lookup algorithm terminates, there must be at least one Unused slot (NULL key) in the table.</p>

<p>The value <code>ma_fill</code> is the number of non-NULL keys (sum of Active and Dummy);
   <code>ma_used</code> is the number of non-NULL, non-dummy keys (== the number of non-NULL values == the number of Active items).
   To avoid slowing down lookups on a near-full table, we resize the table when it’s <font color="red">two-thirds</font> full.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="p">[</span><span class="n">Include</span><span class="o">/</span><span class="n">dictobject</span><span class="p">.</span><span class="n">h</span><span class="p">]</span>
</span><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_dictobject</span> <span class="n">PyDictObject</span><span class="p">;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">_dictobject</span> <span class="p">{</span>
</span><span class="line">    <span class="n">PyObject_HEAD</span>
</span><span class="line">    <span class="n">Py_ssize_t</span> <span class="n">ma_fill</span><span class="p">;</span>  <span class="cm">/* # Active + # Dummy */</span>
</span><span class="line">    <span class="n">Py_ssize_t</span> <span class="n">ma_used</span><span class="p">;</span>  <span class="cm">/* # Active */</span>
</span><span class="line">    <span class="cm">/* The table contains ma_mask + 1 slots, and that&#39;s a power of 2.</span>
</span><span class="line"><span class="cm">     * We store the mask instead of the size because the mask is more</span>
</span><span class="line"><span class="cm">     * frequently needed.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">Py_ssize_t</span> <span class="n">ma_mask</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">     <span class="err">*/</span>
</span><span class="line">    <span class="n">PyDictEntry</span> <span class="o">*</span><span class="n">ma_table</span><span class="p">;</span>
</span><span class="line">    <span class="n">PyDictEntry</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">ma_lookup</span><span class="p">)(</span><span class="n">PyDictObject</span> <span class="o">*</span><span class="n">mp</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="kt">long</span> <span class="n">hash</span><span class="p">);</span>
</span><span class="line">    <span class="n">PyDictEntry</span> <span class="n">ma_smalltable</span><span class="p">[</span><span class="n">PyDict_MINSIZE</span><span class="p">];</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>PyDict_MINSIZE</code> is the minimum size of a dictionary.  This many slots are allocated directly in the dict object.
(in the <code>ma_smalltable</code> member). 
It must be a power of 2, and at least 4.  8 allows dicts with no more than 5 active entries to live in <code>ma_smalltable</code> (and so avoid an additional malloc); instrumentation suggested this suffices for the majority of dicts (consisting mostly of usually-small instance dicts and usually-small dicts created to pass keyword arguments).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="cp">#define PyDict_MINSIZE 8</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here defined a array <code>ma_smalltable</code> which store 8 <code>PyDictEntry</code>.
<code>ma_table</code> points to <code>ma_smalltable</code> for small tables, else to 
additional malloc’ed memory.  <code>ma_table</code> is never NULL!<br />
This rule saves repeated runtime null-tests in the workhorse getitem and setitem calls.</p>

<p>I draw a figure to make the idea easy to be understand.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_04/dictTable.png" alt="images" /></p>

<p>The question is coming. When Python will resize the diction table of that object?</p>

<p>The answer is in function <code>dictresize</code> in file <code>Object/dictobject.c</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="p">[</span><span class="n">Object</span><span class="o">/</span><span class="n">dictobject</span><span class="p">.</span><span class="n">c</span><span class="p">]</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Recall the rule of 2/3 --notes by Jason Leaster</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">mp</span><span class="o">-&gt;</span><span class="n">ma_used</span> <span class="o">&gt;</span> <span class="n">n_used</span> <span class="o">&amp;&amp;</span> <span class="n">mp</span><span class="o">-&gt;</span><span class="n">ma_fill</span><span class="o">*</span><span class="mi">3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">mp</span><span class="o">-&gt;</span><span class="n">ma_mask</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Debug information add by Jason Leaster</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Try to resize the old diction</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;mp-&gt;ma_used  :%p </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">mp</span><span class="o">-&gt;</span><span class="n">ma_used</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;mp-&gt;ma_fill  :%p </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">mp</span><span class="o">-&gt;</span><span class="n">ma_fill</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="nf">dictresize</span><span class="p">(</span><span class="n">mp</span><span class="p">,</span> <span class="p">(</span><span class="n">mp</span><span class="o">-&gt;</span><span class="n">ma_used</span> <span class="o">&gt;</span> <span class="mi">50000</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">:</span> <span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="n">mp</span><span class="o">-&gt;</span><span class="n">ma_used</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Attention, once <code>mp-ma_fill</code> bigger or equal to (2/3)<code>mp-&gt;ma_mask+1</code> and we have finished a insert operation(<code>mp-&gt;ma_used</code> &gt; <code>n_used</code>), <strong>we should resize the container(ma_table) of  the dictionary</strong>.</p>

<p>Yes, we should resize the dictionary object if there have 6 or more object in the container but <strong>not</strong> 8.</p>

<p>Here is the result of hacking.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_04/testResizeDict.png" alt="images" /></p>

<p>Actually, <code>dummy</code> PyDictObject is just a <code>PyStringObject</code> in Python. Initially, dummy is a pointer in C but it finally comes to a <code>PyStringObject</code> after initialization of <code>PyDictObject</code> first time.</p>

<p><strong>It’s important to note that resizing can happen to make a hash table larger or smaller. This is , if sufficiently many element of a hash table are deleted, the table can be scaled down in size. However, resizing only happens during an insert.</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="cm">/* Object used as dummy key to fill deleted entries */</span>
</span><span class="line"><span class="k">static</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">dummy</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="cm">/* Initialized by first call to newPyDictObject() */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="initialization-part">Initialization Part</h3>

<p>There are two ways to create a dict:  <code>PyDict_New()</code> is the main C API function, 
and the <code>tp_new</code> slot maps to <code>dict_new()</code>.  In the latter case we
    can save a little time over what PyDict_New does because it’s guaranteed
    that the PyDictObject struct is already zeroed out.
    Everyone except dict_new() should use EMPTY_TO_MINSIZE (unless they have an excellent reason not to).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="cp">#define INIT_NONZERO_DICT_SLOTS(mp) do { \</span>
</span><span class="line"><span class="cp">    (mp)-&gt;ma_table = (mp)-&gt;ma_smalltable;\</span>
</span><span class="line"><span class="cp">    (mp)-&gt;ma_mask = PyDict_MINSIZE - 1; \</span>
</span><span class="line"><span class="cp">} while(0)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define EMPTY_TO_MINSIZE(mp) do {   \</span>
</span><span class="line"><span class="cp">    memset((mp)-&gt;ma_smalltable, 0, sizeof((mp)-&gt;ma_smalltable))\</span>
</span><span class="line"><span class="cp">    (mp)-&gt;ma_used = (mp)-&gt;ma_fill = 0;\</span>
</span><span class="line"><span class="cp">    INIT_NONZERO_DICT_SLOTS(mp); \</span>
</span><span class="line"><span class="cp">        } while(0)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />
<p>Photo By Jason Leaster</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_04/street.jpg" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Int Object in Python]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/03/memory-model-of-int-object-in-python/"/>
    <updated>2016-02-03T00:56:31+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/03/memory-model-of-int-object-in-python</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#preparation" id="markdown-toc-preparation">Preparation</a></li>
  <li><a href="#rules-of-object-in-python" id="markdown-toc-rules-of-object-in-python">Rules of Object in Python.</a></li>
  <li><a href="#firt-glance-at-the-implementation" id="markdown-toc-firt-glance-at-the-implementation">Firt glance at the implementation.</a></li>
  <li><a href="#initialization-of-pyintobject" id="markdown-toc-initialization-of-pyintobject">Initialization of PyIntObject</a></li>
  <li><a href="#insert-and-delete" id="markdown-toc-insert-and-delete">Insert and Delete</a></li>
  <li><a href="#time-for-hacking" id="markdown-toc-time-for-hacking">Time for Hacking</a></li>
  <li><a href="#extention-reading" id="markdown-toc-extention-reading">Extention reading</a></li>
</ul>

<h3 id="preparation">Preparation</h3>

<p>Here, we are goint to analysis how Python deal with <code>Int Object</code> in itself.</p>

<p>First of all, we should have a environment which help us to explore the detail of the implementation in <code>Python 2.7</code>. At the same time, our operation shouldn’t influence the origianl Python in your workstation, if you have install Python before.</p>

<p>You can get the source code from offical website of Python. And you will find that there have a file <code>configure</code> in the directory of the source.</p>

<p><em>In the file configure, you can replace all string ‘Python’ with ‘pyLab’. And then move all file prefix with <code>Python</code> into <code>pyLab</code>(mainly in directory Misc/ and Modules)</em></p>

<p>Don’t forget to run the configuration file – configure with the option <code>--prefix=Location where you want the Python which is for lab to install </code></p>

<p>Finally, just run <code>make &amp; make install</code></p>

<p>Repeat myself again, the reason that I move all ‘Python’ into ‘pyLab’ is all for making a difference with the original instance which is official and it shouldn’t be influence by any operation from us.</p>

<h3 id="rules-of-object-in-python">Rules of Object in Python.</h3>

<ul>
  <li>Objects are structures allocated on the heap.</li>
  <li>Objects are never allocated statically or on the stack; they must be accessed through special macros and functions only.</li>
</ul>

<!-- more -->

<ul>
  <li>
    <p>An object has a ‘reference count’ that is increased or decreased when a pointer to the object is copied or deleted; when the reference count reaches zero there are no references to the object left and it can be removed from the heap.</p>
  </li>
  <li>
    <p>An object has a ‘type’ that determines what it represents and what kind of data it contains.  An object’s type is fixed when it is created. Types themselves are represented as objects; an object contains a pointer to the corresponding type object.  The type itself has a type pointer pointing to the object representing the type ‘type’, which contains a pointer to itself!).</p>
  </li>
  <li>
    <p>Objects do not float around in memory; once allocated an object keeps the same size and address.  Objects that must hold variable-size data can contain pointers to variable-size parts of the object.  Not all objects of the same type have the same size; but the size cannot change after allocation.</p>
  </li>
  <li>
    <p>Objects are always accessed through pointers of the type ‘PyObject *’.</p>
  </li>
</ul>

<h3 id="firt-glance-at-the-implementation">Firt glance at the implementation.</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">   There are two basic different type of Object in Python.</span>
</span><span class="line"><span class="cm">   1. PyObject.    (Immutable Object eg: int, string object which&#39;s </span>
</span><span class="line"><span class="cm">                                size is known when it is creating.)</span>
</span><span class="line"><span class="cm">   2. PyVarObject. (Mutable Object eg: list object which&#39;s size is </span>
</span><span class="line"><span class="cm">                    unknown when it is creating and support the </span>
</span><span class="line"><span class="cm">                    operation of deleting and inserting)</span>
</span><span class="line"><span class="cm">                        -- notes by Jason Leaster</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_object</span> <span class="p">{</span>
</span><span class="line">    <span class="n">PyObject_HEAD</span>
</span><span class="line"><span class="p">}</span> <span class="n">PyObject</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="n">PyObject_VAR_HEAD</span>
</span><span class="line"><span class="p">}</span> <span class="n">PyVarObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Actually, PyObject are created by Macro <code>PyObject_HEAD</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="p">[</span><span class="n">Include</span><span class="o">/</span><span class="n">object</span><span class="p">.</span><span class="n">h</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="p">...</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define _PyObject_HEAD_EXTRA            \</span>
</span><span class="line"><span class="cp">    struct _object *_ob_next;           \</span>
</span><span class="line"><span class="cp">    struct _object *_ob_prev;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define _PyObject_EXTRA_INIT 0, 0,</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define PyObject_HEAD                   \</span>
</span><span class="line"><span class="cp">    _PyObject_HEAD_EXTRA                \</span>
</span><span class="line"><span class="cp">    Py_ssize_t ob_refcnt;               \</span>
</span><span class="line"><span class="cp">    struct _typeobject *ob_type;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* </span>
</span><span class="line"><span class="cm">   There also have some Macro to get the data member of PyObject.</span>
</span><span class="line"><span class="cm">                    -- notes by Jason Leaster</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="cp">#define Py_REFCNT(ob)           (((PyObject*)(ob))-&gt;ob_refcnt)</span>
</span><span class="line"><span class="cp">#define Py_TYPE(ob)             (((PyObject*)(ob))-&gt;ob_type)</span>
</span><span class="line"><span class="cp">#define Py_SIZE(ob)             (((PyVarObject*)(ob))-&gt;ob_size)</span>
</span><span class="line">
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Typically, the Int Object in Python <code>PyIntObject</code> is a <code>immutable object</code>. Once we created the object, we can’t change the value in that object.</p>

<p>Back to our topic, let’s look at the definition of <code>PyIntObject</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="c1">//[Include/intobject.h]</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
</span><span class="line">    <span class="n">PyObject_HEAD</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">ob_ival</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="n">PyIntObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Aha, the <code>PyIntObject</code> is just a simple capsulation of <code>long</code> in C.
This object maintain a long data member.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="k">static</span> <span class="kt">int</span>
</span><span class="line"><span class="nf">int_compare</span><span class="p">(</span><span class="n">PyIntObject</span> <span class="o">*</span><span class="n">v</span><span class="p">,</span> <span class="n">PyIntObject</span> <span class="o">*</span><span class="n">w</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">    You will sigh that &quot;the author of Python is a master in </span>
</span><span class="line"><span class="cm">    programming&quot;. For efficient, they use `register` keyword and </span>
</span><span class="line"><span class="cm">    try to apply for using register to store the local variable.</span>
</span><span class="line"><span class="cm">                            -- notes by Jason Leaster.</span>
</span><span class="line"><span class="cm">    */</span>
</span><span class="line">    <span class="k">register</span> <span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">ob_ival</span><span class="p">;</span>
</span><span class="line">    <span class="k">register</span> <span class="kt">long</span> <span class="n">j</span> <span class="o">=</span> <span class="n">w</span><span class="o">-&gt;</span><span class="n">ob_ival</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">j</span><span class="p">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>How about the detail of printing a integer in Python ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="cm">/* ARGSUSED */</span>
</span><span class="line"><span class="k">static</span> <span class="kt">int</span>
</span><span class="line"><span class="nf">int_print</span><span class="p">(</span><span class="n">PyIntObject</span> <span class="o">*</span><span class="n">v</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span>
</span><span class="line">    <span class="cm">/* flags -- not used but required by interface */</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">int_val</span> <span class="o">=</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">ob_ival</span><span class="p">;</span>
</span><span class="line">    <span class="n">Py_BEGIN_ALLOW_THREADS</span>
</span><span class="line">    <span class="n">fprintf</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="s">&quot;%ld&quot;</span><span class="p">,</span> <span class="n">int_val</span><span class="p">);</span>
</span><span class="line">    <span class="n">Py_END_ALLOW_THREADS</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There have many others method which are defined in <code>PyNumberMethods</code>. Python programmer can get the information about the object with a data member <code>__doc__</code>, like this:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_03/doc.png" alt="images" /></p>

<p>The implementation of that is just a plain text string in <code>Object/intobject.c</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="n">PyDoc_STRVAR</span><span class="p">(</span><span class="n">int_doc</span><span class="p">,</span>
</span><span class="line"><span class="s">&quot;int(x=0) -&gt; int or long</span><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="s">int(x, base=10) -&gt; int or long</span><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="s">Convert a number or string to an integer, or return 0 if no arguments</span><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="s">are given.  If x is floating point, the conversion truncates towards zero.</span><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="s">If x is outside the integer range, the function returns a long instead.</span><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="s">If x is not a number or if base is given, then x must be a string or</span><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="s">Unicode object representing an integer literal in the given base.  The</span><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="s">literal can be preceded by &#39;+&#39; or &#39;-&#39; and be surrounded by whitespace.</span><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="s">The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to</span><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="s">interpret the base from the string as an integer literal.</span><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="s">&gt;&gt;&gt; int(&#39;0b100&#39;, base=0)</span><span class="se">\n</span><span class="s">\</span>
</span><span class="line"><span class="s">4&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="initialization-of-pyintobject">Initialization of PyIntObject</h3>

<p>Python support many different API to construct a <code>PyIntObject</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="p">[</span><span class="n">Include</span><span class="o">/</span><span class="n">intobject</span><span class="p">.</span><span class="n">h</span><span class="p">]</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="n">PyAPI_FUNC</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">PyInt_FromString</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class="line"><span class="cp">#ifdef Py_USING_UNICODE</span>
</span><span class="line"><span class="n">PyAPI_FUNC</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">PyInt_FromUnicode</span><span class="p">(</span><span class="n">Py_UNICODE</span><span class="o">*</span><span class="p">,</span> <span class="n">Py_ssize_t</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="n">PyAPI_FUNC</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">PyInt_FromLong</span><span class="p">(</span><span class="kt">long</span><span class="p">);</span>
</span><span class="line"><span class="n">PyAPI_FUNC</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">PyInt_FromSize_t</span><span class="p">(</span><span class="kt">size_t</span><span class="p">);</span>
</span><span class="line"><span class="n">PyAPI_FUNC</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">PyInt_FromSsize_t</span><span class="p">(</span><span class="n">Py_ssize_t</span><span class="p">);</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Before we dig into the implementation of the initialization process.
Let’s do a lab.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_03/different_address.png" alt="images" /></p>

<p><code>id(object)</code> will returen the address of object in CPython.(If you are interesting in the implementation 
of built-in method id(object), you can jump to the end of this article and I presented how CPython implement this function.)</p>

<p>Try to answer the following question.</p>

<p>Why int object <code>m</code> and <code>n</code> of value <code>1000</code> have different address?</p>

<p>Why int object <code>x</code> and <code>y</code> of value <code>1</code>    have the same  address?</p>

<p>The answer relate to the mechanism with numbers in Python.</p>

<p><em>In daily programming stuff, small number are used frequently. But large number may used frequent more than small numbers</em></p>

<p>If there isn’t a special mechanism, Python will allocate memory(call malloc() in C) again and again. This stratege isn’t efficient at run time.
So, Python support a mechanism which will create small number only once but not bigger number.</p>

<p>There also have the other question. What means big? What means small?
It’s not clearly in theory. But in the implementation, there have a trade off. People can’t cache all integer number for the limitation of memory(RAM).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="p">[</span><span class="n">Object</span><span class="o">/</span><span class="n">intobject</span><span class="p">]</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">NSMALLPOSINTS:    Numbers of small positive integers number</span>
</span><span class="line"><span class="cm">NSMALLNEGINTS:    Numbers of small negative integers number</span>
</span><span class="line"><span class="cm">        --notes by Jason Leaster</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line"><span class="cp">#ifndef NSMALLPOSINTS  </span>
</span><span class="line"><span class="cp">#define NSMALLPOSINTS           257</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="cp">#ifndef NSMALLNEGINTS  </span>
</span><span class="line"><span class="cp">#define NSMALLNEGINTS           5</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="cp">#if NSMALLNEGINTS + NSMALLPOSINTS &gt; 0</span>
</span><span class="line"><span class="cm">/*  References to small integers are saved in this array so that they</span>
</span><span class="line"><span class="cm">    can be shared.</span>
</span><span class="line"><span class="cm">    The integers that are saved are those in the range</span>
</span><span class="line"><span class="cm">    -NSMALLNEGINTS (inclusive) to NSMALLPOSINTS (not inclusive).</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line"><span class="k">static</span> <span class="n">PyIntObject</span> <span class="o">*</span><span class="n">small_ints</span><span class="p">[</span><span class="n">NSMALLNEGINTS</span> <span class="o">+</span> <span class="n">NSMALLPOSINTS</span><span class="p">];</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>According to the implementation, the small number is [-5, 257). You can also modify the source code and recomplie it to change the range of small number, if you would like to.</p>

<blockquote>
  <p>Integers are quite normal objects, to make object handling uniform.
   (Using odd pointers to represent integers would save much space
   but require extra checks for this special case throughout the code.)
   Since a typical Python program spends much of its time allocating
   and deallocating integers, these operations should be very fast.
   Therefore we use a dedicated allocation scheme with a much lower
   overhead (in space and time) than straight malloc(): a simple
   dedicated free list, filled when necessary with memory from malloc().
   block_list is a singly-linked list of all PyIntBlocks ever allocated,  linked via their next members.  PyIntBlocks are never returned to the
   system before shutdown (PyInt_Fini).
   free_list is a singly-linked list of available PyIntObjects, linked
   via abuse of their ob_type members.</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="cp">#define BLOCK_SIZE      1000    </span><span class="cm">/* 1K less typical malloc overhead */</span><span class="cp"></span>
</span><span class="line"><span class="cp">#define BHEAD_SIZE      8       </span><span class="cm">/* Enough for a 64-bit pointer */</span><span class="cp"></span>
</span><span class="line"><span class="cp">#define N_INTOBJECTS    ((BLOCK_SIZE - BHEAD_SIZE) / sizeof(PyIntObject))</span>
</span><span class="line">
</span><span class="line"><span class="k">struct</span> <span class="n">_intblock</span> <span class="p">{</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">_intblock</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">    <span class="n">PyIntObject</span> <span class="n">objects</span><span class="p">[</span><span class="n">N_INTOBJECTS</span><span class="p">];</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_intblock</span> <span class="n">PyIntBlock</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="n">PyIntBlock</span> <span class="o">*</span><span class="n">block_list</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="k">static</span> <span class="n">PyIntObject</span> <span class="o">*</span><span class="n">free_list</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="c1">// Initliazed by fill_free_list()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="insert-and-delete">Insert and Delete</h3>

<p>A initialization routine from <code>long type</code> integer number.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="n">PyObject</span> <span class="o">*</span>
</span><span class="line"><span class="nf">PyInt_FromLong</span><span class="p">(</span><span class="kt">long</span> <span class="n">ival</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">register</span> <span class="n">PyIntObject</span> <span class="o">*</span><span class="n">v</span><span class="p">;</span>
</span><span class="line">    <span class="c1">// try to use small number pool</span>
</span><span class="line"><span class="cp">#if NSMALLNEGINTS + NSMALLPOSINTS &gt; 0</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="n">NSMALLNEGINTS</span> <span class="o">&lt;=</span> <span class="n">ival</span> <span class="o">&amp;&amp;</span> <span class="n">ival</span> <span class="o">&lt;</span> <span class="n">NSMALLPOSINTS</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">v</span> <span class="o">=</span> <span class="n">small_ints</span><span class="p">[</span><span class="n">ival</span> <span class="o">+</span> <span class="n">NSMALLNEGINTS</span><span class="p">];</span>
</span><span class="line">        <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class="line"><span class="cp">#ifdef COUNT_ALLOCS</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">ival</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">            <span class="n">quick_int_allocs</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="k">else</span>
</span><span class="line">            <span class="n">quick_neg_int_allocs</span><span class="o">++</span><span class="p">;</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">        <span class="k">return</span> <span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">v</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line">   <span class="c1">// if ival is not a small number, create a new instance object.</span>
</span><span class="line">   <span class="k">if</span> <span class="p">(</span><span class="n">free_list</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">       <span class="k">if</span> <span class="p">((</span><span class="n">free_list</span> <span class="o">=</span> <span class="n">fill_free_list</span><span class="p">())</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class="line">           <span class="cm">/*</span>
</span><span class="line"><span class="cm">              fill_free_list() will create a general number pool </span>
</span><span class="line"><span class="cm">              for PyIntObjects.</span>
</span><span class="line"><span class="cm">              But if there is no memory, return NULL</span>
</span><span class="line"><span class="cm">            */</span>
</span><span class="line">           <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line">   <span class="cm">/* Inline PyObject_New */</span>
</span><span class="line">   <span class="n">v</span> <span class="o">=</span> <span class="n">free_list</span><span class="p">;</span>
</span><span class="line">   <span class="n">free_list</span> <span class="o">=</span> <span class="p">(</span><span class="n">PyIntObject</span> <span class="o">*</span><span class="p">)</span><span class="n">Py_TYPE</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class="line">   <span class="c1">// Py_TYPE(ob)  (((PyObject*)(ob))-&gt;ob_type) --notes by Jason Leaster</span>
</span><span class="line">   <span class="n">PyObject_INIT</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">PyInt_Type</span><span class="p">);</span>
</span><span class="line">   <span class="n">v</span><span class="o">-&gt;</span><span class="n">ob_ival</span> <span class="o">=</span> <span class="n">ival</span><span class="p">;</span>
</span><span class="line">   <span class="k">return</span> <span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span> <span class="n">v</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="time-for-hacking">Time for Hacking</h3>
<p>Modify the <code>int_print</code> function in <code>Object/intobject.c</code>.
Here is my modification:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> Programmer : Jason Leaster</span>
</span><span class="line"><span class="cm"> Date       : 2016.02.03</span>
</span><span class="line">
</span><span class="line"><span class="cm"> Modify from Robert Chen&#39;s code.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="n">tatic</span> <span class="kt">int</span> <span class="n">values</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="n">refcounts</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span>
</span><span class="line"><span class="nf">int_print</span><span class="p">(</span><span class="n">PyIntObject</span> <span class="o">*</span><span class="n">v</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span>
</span><span class="line">         <span class="cm">/* flags -- not used but required by interface */</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="c1">// &lt;&lt;&lt; modified by Jason Leaster</span>
</span><span class="line">        <span class="n">PyIntObject</span><span class="o">*</span> <span class="n">intObjectPtr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">        <span class="n">PyIntBlock</span><span class="o">*</span> <span class="n">p</span>    <span class="o">=</span> <span class="n">block_list</span><span class="p">;</span>
</span><span class="line">        <span class="n">PyIntBlock</span><span class="o">*</span> <span class="n">last</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">while</span><span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">            <span class="n">last</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class="line">            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">intObjectPtr</span> <span class="o">=</span> <span class="n">last</span><span class="o">-&gt;</span><span class="n">objects</span><span class="p">;</span>
</span><span class="line">        <span class="n">intObjectPtr</span><span class="o">+=</span> <span class="n">N_INTOBJECTS</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; Address @%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="o">--</span><span class="n">intObjectPtr</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">intObjectPtr</span><span class="o">-&gt;</span><span class="n">ob_ival</span><span class="p">;</span>
</span><span class="line">            <span class="n">refcounts</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">intObjectPtr</span><span class="o">-&gt;</span><span class="n">ob_refcnt</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; Values: &quot;</span><span class="p">);</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; refcnt: &quot;</span><span class="p">);</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">refcounts</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; block_list count: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; free_list : %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">free_list</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// &gt;&gt;&gt; Origianl</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">int_val</span> <span class="o">=</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">ob_ival</span><span class="p">;</span>
</span><span class="line">        <span class="n">Py_BEGIN_ALLOW_THREADS</span>
</span><span class="line">        <span class="n">fprintf</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="s">&quot;%ld&quot;</span><span class="p">,</span> <span class="n">int_val</span><span class="p">);</span>
</span><span class="line">        <span class="n">Py_END_ALLOW_THREADS</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Tips for debugging:
<code>getrefcount</code> in module <code>sys</code> is helpful to get the reference number of object.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2016_02_03/printout.png" alt="images" /></p>

<h3 id="extention-reading">Extention reading</h3>

<p>There are lots of built-in methods in Python. id(Object) is one of them.</p>

<p>According to the build-in doc for function id(Object).</p>

<blockquote>
  <p>In [1]: print id.__doc__<br />
id(object) -&gt; integer<br />
Return the identity of an object.  This is guaranteed to be unique among
simultaneously existing objects.  (Hint: it’s the object’s memory address.)</p>
</blockquote>

<p>There is a hint and say the return value of built-in function id(object) is the object’s memory address.</p>

<p>All the function do is just 5-line codes in the implementation of CPython.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="Python"><span class="line"><span class="p">[</span><span class="n">Python</span><span class="o">/</span><span class="n">bltinmodule</span><span class="o">.</span><span class="n">c</span><span class="p">]</span>
</span><span class="line"><span class="n">static</span> <span class="n">PyObject</span> <span class="o">*</span>
</span><span class="line"><span class="n">builtin_id</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="bp">self</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">v</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">PyLong_FromVoidPtr</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="o">...</span>
</span><span class="line">
</span><span class="line"><span class="n">static</span> <span class="n">PyMethodDef</span> <span class="n">builtin_methods</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="p">{</span><span class="s">&quot;id&quot;</span><span class="p">,</span>              <span class="n">builtin_id</span><span class="p">,</span>         <span class="n">METH_O</span><span class="p">,</span> <span class="n">id_doc</span><span class="p">},</span> <span class="o">//</span> <span class="n">id_doc</span> <span class="ow">is</span> <span class="n">just</span> <span class="n">the</span> <span class="n">value</span> <span class="n">of</span> <span class="nb">id</span><span class="o">.</span><span class="n">__doc__</span>
</span><span class="line">    <span class="p">{</span><span class="s">&quot;isinstance&quot;</span><span class="p">,</span>  <span class="n">builtin_isinstance</span><span class="p">,</span> <span class="n">METH_VARARGS</span><span class="p">,</span> <span class="n">isinstance_doc</span><span class="p">},</span>
</span><span class="line">    <span class="p">{</span><span class="s">&quot;len&quot;</span><span class="p">,</span>             <span class="n">builtin_len</span><span class="p">,</span>        <span class="n">METH_O</span><span class="p">,</span> <span class="n">len_doc</span><span class="p">},</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s all about the built-in method id(Object)</p>

<hr />

<p>Photo by Jason Leaster, in ChangeDe Hunan
<img src="http://jasonleaster.github.io/images/img_for_2016_02_03/street.jpg" alt="images" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning With K-Means]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/12/30/machine-learning-with-k-means/"/>
    <updated>2015-12-30T16:03:13+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/12/30/machine-learning-with-k-means</id>
    <content type="html"><![CDATA[<p>K-Means is a classical unsupervised clustering Learning Algorithm. The detail of the theory about K-Means that you can find it in Wikipedia. Now I introduce to implement this algorithm by myself.</p>

<p>If you are interesting in the implementation and change it into a better version, you could find it in my github repository and give me some advices. I will be appreciated.</p>

<hr />

<p>So consider about if I want to classify the data into three different cluster. How could I make it?</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_30/original.png" alt="images" /></p>

<p>Here is the result:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_30/result.png" alt="images" /></p>

<p>With the mean values:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">Means</span> <span class="o">=</span>
</span><span class="line"><span class="p">[[</span><span class="mf">3.5</span>       <span class="mi">1</span>       <span class="mi">6</span><span class="p">]</span>
</span><span class="line"> <span class="p">[</span><span class="mf">1.66666</span>   <span class="mi">6</span>       <span class="mi">6</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>In the implementation, I just choose the euclidean distance equation as my sensor to calculate the distance between samples. You could assign the <code>self.distance</code> with your function which is in your application.</p>

<p>Here, I show you how to classify the sample point in <code>K-Means</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">classify</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">SampleNum</span><span class="p">):</span>
</span><span class="line">        <span class="n">minDis</span> <span class="o">=</span> <span class="o">+</span><span class="n">numpy</span><span class="o">.</span><span class="n">inf</span>
</span><span class="line">        <span class="n">label</span>  <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">classNum</span><span class="p">):</span>
</span><span class="line">            <span class="n">d</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">distance</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_Mat</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">meanVal</span><span class="p">[:,</span> <span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">())</span>
</span><span class="line">            <span class="k">if</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="n">minDis</span><span class="p">:</span>
</span><span class="line">                <span class="n">minDis</span> <span class="o">=</span> <span class="n">d</span>
</span><span class="line">                <span class="n">label</span>  <span class="o">=</span> <span class="n">k</span>
</span><span class="line">
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">classification</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">label</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">classification</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">minDis</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>And, here you will glance at the main procesure of this algorithm.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    After you initialized this class, just call this</span>
</span><span class="line"><span class="sd">    function and K Means Model will be built</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">stopOrNot</span><span class="p">():</span>
</span><span class="line">                <span class="k">return</span>
</span><span class="line">
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">classify</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">classNum</span><span class="p">):</span>
</span><span class="line">                <span class="n">mean</span>    <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">                <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">SampleNum</span><span class="p">):</span>
</span><span class="line">                    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">classification</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span>
</span><span class="line">                        <span class="k">if</span> <span class="n">mean</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">                            <span class="n">mean</span> <span class="o">=</span>  <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_Mat</span><span class="p">[:,</span> <span class="n">i</span><span class="p">])</span><span class="o">*</span><span class="mf">1.</span>
</span><span class="line">                        <span class="k">else</span><span class="p">:</span>
</span><span class="line">                            <span class="n">mean</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_Mat</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">                        <span class="n">counter</span> <span class="o">+=</span> <span class="mf">1.</span>
</span><span class="line">
</span><span class="line">                <span class="n">mean</span> <span class="o">/=</span> <span class="n">counter</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">meanVal</span><span class="p">[:,</span> <span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">mean</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hope my work will help you in some day. Thank you.</p>

<p>Yous, EOF</p>

<hr />
<p>Photo by Annabella</p>

<p>Aha! Look! What a big shark. I’m fighting …</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_30/bigshark.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Labs of MIT 6.034]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/12/25/labs-of-mit-6-dot-034/"/>
    <updated>2015-12-25T23:30:06+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/12/25/labs-of-mit-6-dot-034</id>
    <content type="html"><![CDATA[<p>Two month ago, I decide to do a project about machine learning. So, I get start to learn machine learning and implemment some algorithms of ML.
I find that there is a course in MIT – 6.034 Artificial Intelligence which contain a lot of funny labs. That will help me to learn ML.</p>

<p>I don’t want to write a lot of analysis article about this course like what I have done in 6.008 . So, I just push my solution which also is incompletement onto github. If anyone interesting in this lab, you could touch me and I would like to communicate with you about these labs if I’m not busy.</p>

<p>What you should know is that the version of this labs is updated in 2015.</p>

<p>Here is the link you could get my solution:
<a href="https://github.com/jasonleaster/MIT_6.034_2015">My Solution of MIT 6.034</a></p>

<!-- more -->

<hr />
<p>Photo by Jason Leaster</p>

<p>Thanks god. There is a beautiful girl in my life and encourage me walk through the dark time of my life. Thank you. Annabella.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_25/girlfriend.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning With Boosting]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/12/13/machine-learning-with-boosting/"/>
    <updated>2015-12-13T17:00:47+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/12/13/machine-learning-with-boosting</id>
    <content type="html"><![CDATA[<p>This blog will talk about the theory and implementation about famouse
concept in machine learning – <code>Boosting</code>.</p>

<p>All algorithms are implemented in Python.</p>

<p>There are two main tasks which people want to finish with Machine Learning.</p>

<ul>
  <li>Classification</li>
  <li>Regression</li>
</ul>

<p>There are a lot of other ways to do it but now we focus on <code>boosting</code> algorithm. You know that it’s a fantastic way to make our work done.</p>

<h3 id="adaboost-for-classification">Adaboost for classification</h3>

<p>If you never hear about adaboost, I recommend you to finish the 7-th lab in MIT 6.034. It will help you a lot to understand what I’m taking about. But this lab didn’t build adaboost completely. So, I implement it individually.</p>

<p>Give the input training samples which have tag with it.</p>

<div style="text-align:center"><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/equation.png" align="middle" /> </div>

<p>where x[i] is the feature of the i-th sample point and y[i] is the <code>label</code> (soemtimes we call it as <code>tag</code>) with the sample point.</p>

<p>In this algorithm, there are only two different label of samples {-1, +1}.</p>

<p>Some classifier like decision tree also can work correctly about classification. But it’s also easy to overfitting. So, we can’t use it in some special situation. Instread of using decision tree, we use <code>decision stump</code> which is a special type of decision tree which’s depth is only one. So we call it as <code>decision stump</code>.</p>

<div style="text-align:center"><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/stump.png" align="middle" /> </div>

<div style="text-align:center"><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/weakClassifier.png" align="middle" /> </div>

<p><code>Yoav Freund</code> and <code>Robert Schapire</code> create this algorithm <strong>AdaBoost</strong> which means adaptive boosting.</p>

<div style="text-align:center"><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/AdaBoost.png" align="middle" /> </div>

<p>Test case:</p>

<p>There are training points with two different label. What if we input a point which’s type is unkown, what the result will be?</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/samples.png" alt="images" /></p>

<p>The test result is below there:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/result.png" alt="images" /></p>

<p>Just create a object of class <code>Adaboost</code> with your training samples with label. like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">adaboost</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="n">AdaBoost</span><span class="p">(</span><span class="n">Original_Data</span><span class="p">,</span> <span class="n">Tag</span><span class="p">)</span>
</span><span class="line"><span class="c"># The up bound of training time to avoid the algorithm won&#39;t stop for not meeting the training accuracy.</span>
</span><span class="line"><span class="n">times</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">times</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span><span class="o">.</span><span class="n">prediction</span><span class="p">(</span><span class="n">UnkownPoints</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>API <code>prediction()</code> of class AdaBoost will return the result of prediction according to the model. All job done.</p>

<p>You could find other test case in my repository in github.</p>

<p><a href="https://github.com/jasonleaster/Machine_Learning/tree/master/Adaboost">Implementation of Adaboost in Python</a></p>

<p>There is an <a href="http://cs229.stanford.edu/extra-notes/boosting.pdf">assignment</a> about AdaBoost in Stanford CS 229, which will ask student to implement stump booster. But I don’t really understand the skeleton of that source code. I think there must be something worng with that matlab script <code>stump_booster.m</code>. The week classifier can’t lost the direction information.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="c">%%% !!! Don&#39;t forget the important variable -- direction</span>
</span><span class="line">
</span><span class="line"><span class="n">API</span> <span class="n">given</span> <span class="n">by</span> <span class="n">the</span> <span class="n">course</span> <span class="n">materials</span><span class="p">:</span>
</span><span class="line"><span class="k">function</span><span class="w"> </span>[ind, thresh] <span class="p">=</span><span class="w"> </span><span class="nf">find_best_threshold</span><span class="p">(</span>X, y, p_dist<span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="k">function</span><span class="w"> </span>[theta, feature_inds, thresholds] <span class="p">=</span><span class="w"> </span><span class="nf">stump_booster</span><span class="p">(</span>X, y, T<span class="p">)</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="n">API</span> <span class="n">of</span> <span class="n">my</span> <span class="n">solution</span><span class="p">:</span>
</span><span class="line"><span class="k">function</span><span class="w"> </span>[ind, thresh, direction] <span class="p">=</span><span class="w"> </span><span class="nf">find_best_threshold</span><span class="p">(</span>X, y, p_dist<span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="k">function</span><span class="w"> </span>[theta, feature_inds, thresholds, directions] <span class="p">=</span><span class="w"> </span><span class="nf">stump_booster</span><span class="p">(</span>X, y, T<span class="p">)</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Run <code>boost_example.m</code>, you will see the <strong>classifier line</strong> with different iteration.</p>

<div style="text-align:center"><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/iter2.jpg" width="400" height="400" align="middle" /> </div>

<div style="text-align:center"><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/iter5.jpg" width="400" height="400" align="middle" /> </div>

<div style="text-align:center"><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/iter10.jpg" width="400" height="400" align="middle" /> </div>

<h3 id="boosting-tree">Boosting Tree</h3>

<p>We have knew to use <code>AdaBoost</code> to do classification. <code>Boosting Tree</code> will help us to do regression.</p>

<p>We also use decision stump as the weak classifier. But implementation of decision stump in this algorithm is not the same as that in AdaBoost.</p>

<p>There are ten samples in my test module:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">Original_Data</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>
</span><span class="line">        <span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mi">4</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mi">5</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mi">6</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mi">7</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mi">8</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mi">9</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mi">10</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">        <span class="p">])</span><span class="o">.</span><span class="n">transpose</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">ExpVal</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>
</span><span class="line">        <span class="p">[</span><span class="mf">5.70</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mf">5.91</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mf">6.40</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mf">6.80</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mf">7.05</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mf">8.90</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mf">8.70</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mf">9.00</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mf">9.05</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span><span class="mf">5.56</span><span class="p">]</span>
</span><span class="line">        <span class="p">])</span><span class="o">.</span><span class="n">transpose</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The expected value of Original_Data[i] is ExpVal[i]. The input is from 1 to 10. How about to predict the output when the input is 1 or 11?</p>

<p>Let’s test it. Here is the result:
<img src="http://jasonleaster.github.io/images/img_for_2015_12_13/output_of_boosting_tree.png" alt="images" /></p>

<p>Just used 11 weak classifier to construct a stronger classifier to do the regressio. The output is reasonable.</p>

<p>Here is my implementation of <code>Boosting Tree</code>
<a href="https://github.com/jasonleaster/Machine_Learning/tree/master/Boosting_Tree">Implementation of Boosting Tree in Python</a></p>

<p>Reference:</p>

<ol>
  <li>MIT-6.034, Artificial Intelligence. Lab-7</li>
  <li>« The statistic methods » by HangLi.</li>
  <li><a href="https://en.wikipedia.org/wiki/AdaBoost">Wikipedia</a></li>
</ol>

<hr />

<p>Photo by Jason Leaster</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/street.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Search Tree]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/09/24/binary-search-tree/"/>
    <updated>2015-09-24T01:28:33+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/09/24/binary-search-tree</id>
    <content type="html"><![CDATA[<p>I try to collect problems about <code>Binary Search Tree (BST)</code> which are asked in interview frequently.</p>

<p>Basicly, here is the definition of Binary Search Tree. And I show the way how to implement the basic operation like <code>insert</code>, <code>delete</code> and so on.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">()</span> <span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">num</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">right</span>  <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">left</span>   <span class="o">=</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You could find all my practices with BST in github: <a href="https://github.com/jasonleaster/Algorithm/blob/master/Binary_Search_Tree/Python_version/bst.py">BST</a></p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_09_25/bst.png" alt="images" /></p>

<!-- more -->

<p>There are three different ways to travel a BST. N(node), L(left subtree), R(right subtree)</p>

<ul>
  <li>
    <p>NLR: Firstly the traveller access the data of the Node(N) and then it enter into the left sub-tree, travel the right sub-tree</p>
  </li>
  <li>
    <p>LNR</p>
  </li>
  <li>
    <p>LRN</p>
  </li>
</ul>

<p>It’s very easy and obvious to implement the recursive definition of the three different traveller.</p>

<p>You will find that it’s a very efficient way to understand what means Pre-traveller, In-traveller and Post-traveller.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Recursive definition</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">pre_traveller</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="bp">None</span> <span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">pre_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">pre_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">in_traveller</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">in_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">in_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">post_traveller</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">post_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">post_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But the interview officer may not be satisfy with your recursive implementation. Take some time to understand the iteratly implementation below there.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    Iterately implementation</span>
</span><span class="line">
</span><span class="line"><span class="sd">    Given a binary tree, return the preorder traversal of </span>
</span><span class="line"><span class="sd">    its nodes&#39; values.</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">preorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">        :type root: TreeNode</span>
</span><span class="line"><span class="sd">        :rtype: List[int]</span>
</span><span class="line"><span class="sd">        &quot;&quot;&quot;</span>
</span><span class="line">        <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line">        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
</span><span class="line">        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line">        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="n">ret</span>
</span><span class="line">
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    Given a binary tree, return the inorder traversal </span>
</span><span class="line"><span class="sd">    of its nodes&#39; values.</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">inorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class="line">        <span class="n">res</span><span class="p">,</span> <span class="n">stack</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>
</span><span class="line">        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">            <span class="k">while</span> <span class="n">root</span><span class="p">:</span>
</span><span class="line">                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">                <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span>
</span><span class="line">            <span class="k">if</span> <span class="ow">not</span> <span class="n">stack</span><span class="p">:</span>
</span><span class="line">                <span class="k">return</span> <span class="n">res</span>
</span><span class="line">            <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">            <span class="n">root</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">postorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">        :type root: TreeNode</span>
</span><span class="line"><span class="sd">        :rtype: List[int]</span>
</span><span class="line"><span class="sd">        &quot;&quot;&quot;</span>
</span><span class="line">        <span class="n">res</span>   <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">):</span>
</span><span class="line">            <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">            <span class="k">if</span> <span class="n">node</span><span class="p">:</span>
</span><span class="line">                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class="line">                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="n">res</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There is another interesting problem that how to travel a BST in level order. Something like this:
For example:</p>

<p>Given binary tree {3,9,20,#,#,15,7},</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_09_25/1.png" alt="images" /></p>

<p>return its level order traversal as:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_09_25/2.png" alt="images" /></p>

<p>At this moment, you should try to use some basic data structure to solve this problem. Don’t forget STACK :)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Given a binary tree, return the level order traversal of </span>
</span><span class="line"><span class="sd">its nodes&#39; values. (ie, from left to right, level by level).</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">levelOrder</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line">    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">node</span><span class="p">]</span>
</span><span class="line">    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span>
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="n">length</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">([])</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">            <span class="n">ret</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">left</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">right</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
</span><span class="line">            <span class="n">stack</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">        <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span>
</span><span class="line">        <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After you solve this problem, you have knew that stack is a efficient and useful ADT. Once you meet a hard problem, try to use another ADT to solve your problem.</p>

<p>Function <code>isValidBST</code> help us to check whether the tree is a BST. Now, if you have no idea about what means a BST, go to wikipedia and help yourself :)</p>

<p>You know that if we travel the tree with <code>In-Order traveller</code>, the output of the traveller is sorted from small element to big one.</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">isValidBST</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class="line">    <span class="n">A</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">A</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">in_traveller</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There is a joke about how to invert a BST. 
&gt; Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p>

<p>It’s easy to solve this problem by recursion.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">invertTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span>
</span><span class="line">
</span><span class="line">    <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">invertTree</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">invertTree</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You may also be asked to translate a sorted array into BST. So, how to make it?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">sortedArrayToBST</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    :type nums: List[int]</span>
</span><span class="line"><span class="sd">    :rtype: TreeNode</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">helperSortedArrayToBST</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">helperSortedArrayToBST</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">start</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">    <span class="n">middle</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">middle</span><span class="p">])</span>
</span><span class="line">    <span class="n">root</span><span class="o">.</span><span class="n">left</span>  <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">helper</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">middle</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">helper</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">root</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>How to use the output of <code>InOrder-Traveller</code> and <code>PostOrder-Traveller</code> to rebuild a BST ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Given inorder and postorder traversal of a tree, </span>
</span><span class="line"><span class="sd">construct the binary tree.</span>
</span><span class="line">
</span><span class="line"><span class="sd">Note:</span>
</span><span class="line"><span class="sd">You may assume that duplicates do not exist in the tree.</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">buildTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inorder</span><span class="p">,</span> <span class="n">postorder</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    :type inorder: List[int]</span>
</span><span class="line"><span class="sd">    :type postorder: List[int]</span>
</span><span class="line"><span class="sd">    :rtype: TreeNode</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">inorder</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">postorder</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">    <span class="n">index</span> <span class="o">=</span> <span class="n">inorder</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">postorder</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
</span><span class="line">    <span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">inorder</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">    <span class="c"># You HAVE TO build right sub-tree first, </span>
</span><span class="line">    <span class="c"># otherwise you will get wrong answer</span>
</span><span class="line">    <span class="c"># because you poped the last element of @postorder before here.</span>
</span><span class="line">    <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">buildTree</span><span class="p">(</span><span class="n">inorder</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span> <span class="n">postorder</span><span class="p">)</span>
</span><span class="line">    <span class="n">root</span><span class="o">.</span><span class="n">left</span>  <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">buildTree</span><span class="p">(</span><span class="n">inorder</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">index</span><span class="p">]</span> <span class="p">,</span> <span class="n">postorder</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">root</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />
<p>Photo By Jason Leaster in ChangDe, China</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_09_25/highschool.jpg" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Search]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/07/24/binary-search/"/>
    <updated>2015-07-24T10:17:20+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/07/24/binary-search</id>
    <content type="html"><![CDATA[<p>This is a story why I write this algorithm again.</p>

<blockquote>
  <p>In this days, I work as an intern for Alibaba. To be honest, it totally a bad time for the beginning days. More awful fact to me is that my mentor do his job mostly in Java and I have to pick it up as quickly as possible. It’s totally a stranger for me about Java. <strong>What I have to say is that thanks god and my mentor.</strong> He is so nice and never blame me for my problem. You know that I suffer pressure heavily for I learned nothing but time wasted in this two weeks. I asked for help from human resource manager and hope to find someone guide me to walk out this shadow. Bo who is my mentor. He understand me and know my feeling. Bo encourage me and try to let me believe things will be better. Today, I face to a problem which I think is very naive but I didn’t show the solution to a leader of a department very well. And I could feel that he doubt about my ability in programming. I feel shame about he ask me that “Do you have programming in C or C++ for ten thousand lines ?”.</p>
</blockquote>

<!-- more -->

<p>Ok, the story is end and it don’t important to me anymore. What should I do is to pay attention to my weak ability and work hard to make me more stronger. Then I will prepare for the coming recruitment in autumn.</p>

<p>This is a classical question. How to find an element in sequenced data ? The solution is <code>Binary Search</code>. It’s the quickest way to find element in sorted data set.</p>

<p>The theory about <code>Binary Search</code> show in blew picture.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_07_24/binary_search.png" alt="images" /></p>

<p>Here you could see my code and show you how to implement a Binary Search in C++, Java and Python.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="cm">/**********************************************************</span>
</span><span class="line"><span class="cm">Programmer   :  EOF</span>
</span><span class="line"><span class="cm">E-mail       :  jasonleaster@163.com</span>
</span><span class="line"><span class="cm">File         :  binary_search.cpp</span>
</span><span class="line"><span class="cm">Date         :  2015.07.25</span>
</span><span class="line">
</span><span class="line"><span class="cm">***********************************************************/</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">T</span> <span class="n">BinarySearch</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="n">p_array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">,</span> <span class="n">T</span> <span class="n">target</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">p_array</span> <span class="o">||</span> <span class="n">start</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Empty Data set or bad scope &quot;</span>
</span><span class="line">                     <span class="s">&quot;try to modify your parameter @start &quot;</span>
</span><span class="line">                     <span class="s">&quot;or end. And make sure that @start smaller &quot;</span>
</span><span class="line">                     <span class="s">&quot;than @end&quot;</span>
</span><span class="line">                   <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">p_array</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">start</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">p_array</span><span class="p">[</span><span class="n">end</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">end</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(;</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">;)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">middle</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">p_array</span><span class="p">[</span><span class="n">middle</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">middle</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">p_array</span><span class="p">[</span><span class="n">middle</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">start</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">else</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">end</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The element you find don&#39;t exist in the data set&quot;</span>
</span><span class="line">              <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">array</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">20</span><span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="n">BinarySearch</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="mi">7</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="n">BinarySearch</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="mi">12</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You could also find the other implementation follow this link:</p>

<p><a href="https://github.com/jasonleaster/Algorithm/tree/master/Binary_search">Binary Search</a></p>

<hr />
<p>Photo by Jason Leaster, Hangzhou, China</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_07_24/cute.png" alt="images" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Should We Focus on ?]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/06/17/what-should-we-focus-on/"/>
    <updated>2015-06-17T02:46:15+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/06/17/what-should-we-focus-on</id>
    <content type="html"><![CDATA[<p>Nowadays, people use the social networks like <code>Facebook</code>, <code>Weibo</code>, <code>Qzone</code> and so on. That social networks make you feel that you live with others who have no relationship with you in real life. And more and more people pay a lot of time to refresh the website or the software which is programed for social networks. So did I …</p>

<p>The most important fact is that the message comes from the social networks didn’t help us a lot. If you pay the same time to read a classical book or work hard on your projects, you will get more.</p>

<p>But you choose to refresh your social networks and fall into it. You may know that you are wasting time but you still focus on it. Something like drug … yes, you are drugging but in a different way. Social networks also let you indulge yourself with idle and feel hollow after you have waste a lot of time on that. Day after day, you get nothing but only feel more and more hollow. You know that people live well from the message which the social networks feed you.</p>

<p>Times always change, there will be more and more temptation. But the thing we should know is that we should learn to distinguish what’s important and what just kill us by wating our time.</p>

<p>I delete all message I posted on <code>Weibo</code> and <code>Qzone</code>. In previous days, I followed more than two hundred people in <code>Weibo</code>. To be honest, people I followed most don’t know me and have nothing with my own life. Why I follow them just because I curious about what happened on their daily life. In the beginning, it’s funny. But now I delete them all. Yep, I wake up to reality! It have onthing with my life! I shouldn’t waste time on others who isn’t important for me. WE DO HAVE OUROWN LIFE.</p>

<p>I like a motto from steve jobs.</p>

<blockquote>
  <p>If you want to live your life in a creative way, as an artist, you have to not look back too much. You have to be willing to take whatever you’ve done and whoever you were and throw them away. People think focus means saying yes to the thing you’ve got to focus on. But that’s not what it means at all. It means saying not to the hundred other good ideas that there be. You have to pick carefully. I’m actually as proud of the things we haven’t done as the things I have done. Innovation is saying no to 1,000 things.</p>
</blockquote>

<p>What I want to say is that</p>

<blockquote>
  <p>“Focus on yourself :)”.</p>
</blockquote>

<hr />
<p>Photo by Jason Leaster</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_17/street.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory Model of Objects in C++]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/06/13/memory-model-of-objects-in-c-plus-plus/"/>
    <updated>2015-06-13T19:48:42+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/06/13/memory-model-of-objects-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>In this blog, I assume that you have a basic background about C++ and know that there is a “monster” we call it as <code>virtual table</code> :)</p>

<p>If there is virtual member function in your class’s definition, there will be a virtual table.</p>

<p>Compiler will generate a pointer which’s name is <code>_vprt</code> and use this pointer to find the virtual table.</p>

<!-- more -->

<p>The function below there is very important for us to understand the C++ object model.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Function <code>get_element</code> take the reference of object which’s type is T(I used template technology) and <code>offset</code>.</p>

<p>We get the address of this object by <code>&amp;obj</code> and then we cast it into pointer which point to unsigned long and then we dereference that pointer. Acctually, the pointer which we dereferenced in function <code>get_element</code> is the <code>_vprt</code>.</p>

<p>After we get <code>_vprt</code>, we cast it into <code>unsigned long*</code> again and add <code>offset</code> to get others pointers in virtual table which contains all pointers that point to class virtual member functions.</p>

<p>If we dereference the return value of this function, we will get the pointer which point to the begin of function. Fantastic :)</p>

<h3 id="single-object">Single Object</h3>

<p>First of all, let’s take a glance at this demo:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="cm">/*******************************************************************</span>
</span><span class="line"><span class="cm">Programmer  :   EOF</span>
</span><span class="line"><span class="cm">Date        :   2015.06.13</span>
</span><span class="line"><span class="cm">File        :   meomory_model_for_single_object.cpp</span>
</span><span class="line"><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class="line">
</span><span class="line"><span class="cm"> ******************************************************************/</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span>  <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">FUN</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Base</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">100</span><span class="p">){</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::h()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">            Private Data</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">Base</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">b</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">            The address which point virtual</span>
</span><span class="line"><span class="cm">            function&#39;s implementation in virtual table</span>
</span><span class="line"><span class="cm">        */</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Pointer in Virutal Table: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/* Calling function by pointer in virtual table */</span>
</span><span class="line">        <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">i</span><span class="p">)))</span> <span class="p">();</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are data member <code>num</code> and <code>prv_data</code> with different access label in <code>class base</code>. There also have virtual functions and normal member functions in this class. So … what’s the memory model of this class look like?</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/single_object_memory_model.png" alt="images" /></p>

<p>The output of that demo:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/output1.png" alt="images" /></p>

<h3 id="single-inheritance">Single Inheritance</h3>

<p>The inheritance relationship between the base class and derived class :</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/single_inheritance_model.png" alt="images" /></p>

<p>It’s single inheritance that base class must be only single type.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="cm">/*******************************************************************</span>
</span><span class="line"><span class="cm">Programmer  :   EOF</span>
</span><span class="line"><span class="cm">Date        :   2015.06.12</span>
</span><span class="line"><span class="cm">File        :   virtual_function_model.cpp</span>
</span><span class="line"><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class="line">
</span><span class="line"><span class="cm"> ******************************************************************/</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span>  <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">FUN</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Base</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::h()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Private  Data</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Derived</span><span class="p">()</span><span class="o">:</span><span class="n">num</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span> <span class="n">prv_data</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">x</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::x()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">y</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::y()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">            <span class="n">Base</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">Base</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">b</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">d</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">            The address which point virtual</span>
</span><span class="line"><span class="cm">            function&#39;s implementation in virtual table</span>
</span><span class="line"><span class="cm">        */</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Pointer in Virutal Table: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/* Calling function by pointer in virtual table */</span>
</span><span class="line">        <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">i</span><span class="p">)))</span> <span class="p">();</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Pointer in Virutal Table: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">i</span><span class="p">)))</span> <span class="p">();</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Memory Model:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/single_inheritance_model.png" alt="images" /></p>

<p>Output:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/output2.png" alt="images" /></p>

<p>We find that:</p>

<ul>
  <li>
    <p>The virtual table pointer _vprt is at the beginning of the object.</p>
  </li>
  <li>
    <p>Data member store into object and have nothing with the access label but according to the sequence of declaration.</p>
  </li>
  <li>
    <p>In single inheritance model, the virtual function wichi is re-implement will be update in all virtual table.</p>
  </li>
</ul>

<h3 id="multiply-inheritance">Multiply Inheritance</h3>

<p>Now, you find that there is only one virtual table in our object under single inheritance situation. But … How about things going on with multiply inheritance(MI) ?</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/multiple_inheritance_model.png" alt="images" /></p>

<p>Let’s go and test it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="cm">/*******************************************************************</span>
</span><span class="line"><span class="cm">Programmer  :   EOF</span>
</span><span class="line"><span class="cm">Date        :   2015.06.13</span>
</span><span class="line"><span class="cm">File        :   virtual_function_for_multiple_inheritance.cpp</span>
</span><span class="line"><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class="line">
</span><span class="line"><span class="cm"> ******************************************************************/</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span>  <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">FUN</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base_1</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Base_1</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_1::f() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_1::g() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_1::h() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Private  Data</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base_2</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Base_2</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_2::f() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">x</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_2::x() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Private  Data</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base_3</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Base_3</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">300</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_3::g() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Private  Data</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base_3</span><span class="p">,</span> <span class="k">public</span> <span class="n">Base_2</span><span class="p">,</span> <span class="k">public</span> <span class="n">Base_1</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Derived</span><span class="p">()</span><span class="o">:</span><span class="n">num</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">prv_data</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">y</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::y() </span><span class="se">\t</span><span class="s">&quot;</span> <span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Here we re-implement the virtual function @f().</span>
</span><span class="line"><span class="cm">           Compiler will rewrite the virtual table</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::f() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="o">+</span> <span class="n">vprt_offset</span><span class="p">))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">void</span> <span class="n">call_vir_func</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)))</span> <span class="p">();</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Address of function: &quot;</span> <span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Base_3 and @Derived:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Base_2:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_3</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_3</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Base_1:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_3</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_3</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_3</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Memory Model:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/multiple_inheritance.png" alt="images" /></p>

<p>Output:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/output3.png" alt="images" /></p>

<p>We can declare some conclusions that:</p>

<ul>
  <li>
    <p>Each base class have their own’s virtual table. Assume that The number of base class is N in multiple inheritance. The number of the virtual table is N-1.The virtual table of derived function will be combine into the first base class in the declaration queue of base class.</p>
  </li>
  <li>
    <p>The base virtual table will be update if the derived class rewrite implementation of virtual function in base class.</p>
  </li>
</ul>

<h3 id="repeat-inheritance">Repeat Inheritance</h3>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/repeat_inheritance_model.png" alt="images" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="cm">/*******************************************************************</span>
</span><span class="line"><span class="cm">Programmer  :   EOF</span>
</span><span class="line"><span class="cm">Date        :   2015.06.14</span>
</span><span class="line"><span class="cm">File        :   virtual_function_for_repreat_inheritance.cpp</span>
</span><span class="line"><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class="line">
</span><span class="line"><span class="cm"> ******************************************************************/</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span>  <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">FUN</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Base</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::h()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Private  Data</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Derived_1</span><span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Derived_1</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_1::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">x</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_1::x()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_1::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_1::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_1::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_1::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">            <span class="n">Base</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Private  Data</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Derived_2</span><span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Derived_2</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">300</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_2::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_2::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_2::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_2::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_2::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">            <span class="n">Base</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Private  Data</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Derived_2</span><span class="p">,</span> <span class="k">public</span> <span class="n">Derived_1</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Derived</span><span class="p">()</span><span class="o">:</span><span class="n">num</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">prv_data</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">y</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::y()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Here we re-implement the virtual function @f().</span>
</span><span class="line"><span class="cm">           Compiler will rewrite the virtual table</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">            <span class="n">Derived_1</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">            <span class="n">Derived_2</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="o">+</span> <span class="n">vprt_offset</span><span class="p">))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">void</span> <span class="n">call_vir_func</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)))</span> <span class="p">();</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s"> Address of function: &quot;</span> <span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Derived, @Derived_2 and @Base:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Derived_1 and @Base:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">d</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Memory Model:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/repeat_inheritance.png" alt="images" /></p>

<p>You find that The base object was inherited again and again Output:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/output4.png" alt="images" /></p>

<p>It’s may not what we want that the base class is inherited repeatedly. So C++ use the <code>virtual base</code> technology to solve this problem :)</p>

<h3 id="diamond-inheritance">Diamond Inheritance</h3>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/diamond_inheritance_model.png" alt="images" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="cm">/*******************************************************************</span>
</span><span class="line"><span class="cm">Programmer  :   EOF</span>
</span><span class="line"><span class="cm">Date        :   2015.06.14</span>
</span><span class="line"><span class="cm">File        :   virtual_function_for_diamond_inheritance.cpp</span>
</span><span class="line"><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class="line">
</span><span class="line"><span class="cm"> ******************************************************************/</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span>  <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">FUN</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Base</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::h()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Private  Data</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Derived_1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">Base</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Derived_1</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_1::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">x</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_1::x()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_1::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_1::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_1::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_1::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">            <span class="n">Base</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Private  Data</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Derived_2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">Base</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Derived_2</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">300</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_2::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_2::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_2::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_2::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_2::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">            <span class="n">Base</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Private  Data</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Derived_2</span><span class="p">,</span> <span class="k">public</span> <span class="n">Derived_1</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Derived</span><span class="p">()</span><span class="o">:</span><span class="n">num</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">prv_data</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">y</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::y()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">           Here we re-implement the virtual function @f().</span>
</span><span class="line"><span class="cm">           Compiler will rewrite the virtual table</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">            <span class="n">Derived_1</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">            <span class="n">Derived_2</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="o">+</span> <span class="n">vprt_offset</span><span class="p">))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="kt">void</span> <span class="n">call_vir_func</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)))</span> <span class="p">();</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s"> Address of function: &quot;</span> <span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class="line"><span class="c1">//    d.show();</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Derived::Derived_2&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Derived::Derived_1&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">    cout &lt;&lt; (int*)&amp;d &lt;&lt; endl;</span>
</span><span class="line"><span class="cm">    cout &lt;&lt; (int*)&amp;d.Derived_2::num &lt;&lt; endl;</span>
</span><span class="line"><span class="cm">    cout &lt;&lt; (int*)&amp;d.Derived_1::num &lt;&lt; endl;</span>
</span><span class="line"><span class="cm">    cout &lt;&lt; (int*)&amp;d.num &lt;&lt; endl;</span>
</span><span class="line"><span class="cm">    cout &lt;&lt; (int*)&amp;d.Base::num &lt;&lt; endl;</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Derived::Derived_2::Base&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Derived</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Derived</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Derived</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s a hard time to draw this picture. But thank god… I make it.</p>

<p>Memory Model:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/diamond_inheritance.png" alt="images" /></p>

<p>Output:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/output5.png" alt="images" /></p>

<p>ATTENTION: <strong>Every class in C++ only have ONE virtual table, different objects of the same class will share the same virtual table of that class!</strong></p>

<hr />

<p>Photo by Jason Leaster images</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/end.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn to Design a Container]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/05/25/learn-to-design-a-container/"/>
    <updated>2015-05-25T19:14:38+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/05/25/learn-to-design-a-container</id>
    <content type="html"><![CDATA[<p>Container is a collection which help us to store data of different types of data structure.</p>

<p>There are only two types of container in C++/C :</p>

<ul>
  <li>array</li>
  <li>structure</li>
</ul>

<p>C++ could provide more container but it didn’t.</p>

<p><strong>Give a man a fish and you feed him for a day; teach a man to fish and you feed him for a lifetime; knowledge is the best charity;</strong></p>

<p>:)</p>

<!-- more -->
<p>Here we are gona to design a container which is like array but not the same.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_24/arch.png" alt="images" /></p>

<p>You could find the implementation of this container on my github.</p>

<p><a href="https://github.com/jasonleaster/Rumination_On_C_plus_plus/blob/master/chapter_13/con_array.h">Our Container Implementation</a></p>

<p>You could test out container by this program.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="C++"><span class="line"><span class="cp">#include &quot;con_array.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">Array</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">ap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">Pointer</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">(</span><span class="o">*</span><span class="n">ap</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class="line">    <span class="c1">//delete ap;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="p">(</span><span class="o">*</span><span class="n">ap</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The size of Array &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ap</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="o">*</span><span class="n">ap</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">ap</span><span class="o">-&gt;</span><span class="n">resize</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After resize(), the size of Array &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ap</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="o">*</span><span class="n">ap</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You could also see the output beblow there:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_24/output1.png" alt="images" /></p>

<hr />
<p>Photo by Jason Leaster in ChangDe, China</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_24/cherry_blossom.png" alt="images" /></p>

]]></content>
  </entry>
  
</feed>
