<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[EOF]]></title>
  <link href="http://jasonleaster.github.io/atom.xml" rel="self"/>
  <link href="http://jasonleaster.github.io/"/>
  <updated>2016-01-23T02:26:19+08:00</updated>
  <id>http://jasonleaster.github.io/</id>
  <author>
    <name><![CDATA[Jason Leaster]]></name>
    <email><![CDATA[jasonleaster@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Machine Learning With K-Means]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/12/30/machine-learning-with-k-means/"/>
    <updated>2015-12-30T16:03:13+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/12/30/machine-learning-with-k-means</id>
    <content type="html"><![CDATA[<p>K-Means is a classical unsupervised clustering Learning Algorithm. The detail of the theory about K-Means that you can find it in Wikipedia. Now I introduce to implement this algorithm by myself.</p>

<p>If you are interesting in the implementation and change it into a better version, you could find it in my github repository and give me some advices. I will be appreciated.</p>

<hr />

<p>So consider about if I want to classify the data into three different cluster. How could I make it?</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_30/original.png" alt="images" /></p>

<p>Here is the result:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_30/result.png" alt="images" /></p>

<p>With the mean values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Means</span> <span class="o">=</span>
</span><span class='line'><span class="p">[[</span><span class="mf">3.5</span>       <span class="mi">1</span>       <span class="mi">6</span><span class="p">]</span>
</span><span class='line'> <span class="p">[</span><span class="mf">1.66666</span>   <span class="mi">6</span>       <span class="mi">6</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>In the implementation, I just choose the euclidean distance equation as my sensor to calculate the distance between samples. You could assign the <code>self.distance</code> with your function which is in your application.</p>

<p>Here, I show you how to classify the sample point in <code>K-Means</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">classify</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">SampleNum</span><span class="p">):</span>
</span><span class='line'>        <span class="n">minDis</span> <span class="o">=</span> <span class="o">+</span><span class="n">numpy</span><span class="o">.</span><span class="n">inf</span>
</span><span class='line'>        <span class="n">label</span>  <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">classNum</span><span class="p">):</span>
</span><span class='line'>            <span class="n">d</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">distance</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_Mat</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">meanVal</span><span class="p">[:,</span> <span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">())</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="n">minDis</span><span class="p">:</span>
</span><span class='line'>                <span class="n">minDis</span> <span class="o">=</span> <span class="n">d</span>
</span><span class='line'>                <span class="n">label</span>  <span class="o">=</span> <span class="n">k</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">classification</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">label</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">classification</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">minDis</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, here you will glance at the main procesure of this algorithm.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    After you initialized this class, just call this</span>
</span><span class='line'><span class="sd">    function and K Means Model will be built</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">stopOrNot</span><span class="p">():</span>
</span><span class='line'>                <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">classify</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">classNum</span><span class="p">):</span>
</span><span class='line'>                <span class="n">mean</span>    <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>                <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">SampleNum</span><span class="p">):</span>
</span><span class='line'>                    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">classification</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">mean</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>                            <span class="n">mean</span> <span class="o">=</span>  <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_Mat</span><span class="p">[:,</span> <span class="n">i</span><span class="p">])</span><span class="o">*</span><span class="mf">1.</span>
</span><span class='line'>                        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                            <span class="n">mean</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_Mat</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>                        <span class="n">counter</span> <span class="o">+=</span> <span class="mf">1.</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">mean</span> <span class="o">/=</span> <span class="n">counter</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">meanVal</span><span class="p">[:,</span> <span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">mean</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope my work will help you in some day. Thank you.</p>

<p>Yous, EOF</p>

<hr />

<p>Photo by Annabella</p>

<p>Aha! Look! What a big shark. I&rsquo;m fighting &hellip;</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_30/bigshark.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Labs of MIT 6.034]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/12/25/labs-of-mit-6-dot-034/"/>
    <updated>2015-12-25T23:30:06+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/12/25/labs-of-mit-6-dot-034</id>
    <content type="html"><![CDATA[<p>Two month ago, I decide to do a project about machine learning. So, I get start to learn machine learning and implemment some algorithms of ML.
I find that there is a course in MIT &ndash; 6.034 Artificial Intelligence which contain a lot of funny labs. That will help me to learn ML.</p>

<p>I don&rsquo;t want to write a lot of analysis article about this course like what I have done in 6.008 . So, I just push my solution which also is incompletement onto github. If anyone interesting in this lab, you could touch me and I would like to communicate with you about these labs if I&rsquo;m not busy.</p>

<p>What you should know is that the version of this labs is updated in 2015.</p>

<p>Here is the link you could get my solution:
<a href="https://github.com/jasonleaster/MIT_6.034_2015">My Solution of MIT 6.034</a></p>

<!-- more -->


<hr />

<p>Photo by Jason Leaster</p>

<p>Thanks god. There is a beautiful girl in my life and encourage me walk through the dark time of my life. Thank you. Annabella.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_25/girlfriend.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning With Boosting]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/12/13/machine-learning-with-boosting/"/>
    <updated>2015-12-13T17:00:47+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/12/13/machine-learning-with-boosting</id>
    <content type="html"><![CDATA[<p>This blog will talk about the theory and implementation about famouse
concept in machine learning &ndash; <code>Boosting</code>.</p>

<p>All algorithms are implemented in Python.</p>

<p>There are two main tasks which people want to finish with Machine Learning.</p>

<ul>
<li>Classification</li>
<li>Regression</li>
</ul>


<p>There are a lot of other ways to do it but now we focus on <code>boosting</code> algorithm. You know that it&rsquo;s a fantastic way to make our work done.</p>

<h3>Adaboost for classification</h3>

<p>If you never hear about adaboost, I recommend you to finish the 7-th lab in MIT 6.034. It will help you a lot to understand what I&rsquo;m taking about. But this lab didn&rsquo;t build adaboost completely. So, I implement it individually.</p>

<p>Give the input training samples which have tag with it.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/equation.png" alt="images" /></p>

<p>where x[i] is the feature of the i-th sample point and y[i] is the <code>label</code> (soemtimes we call it as <code>tag</code>) with the sample point.</p>

<p>In this algorithm, there are only two different label of samples {-1, +1}.</p>

<p>Some classifier like decision tree also can work correctly about classification. But it&rsquo;s also easy to overfitting. So, we can&rsquo;t use it in some special situation. Instread of using decision tree, we use <code>decision stump</code> which is a special type of decision tree which&rsquo;s depth is only one. So we call it as <code>decision stump</code>.</p>

<p><code>Yoav Freund</code> and <code>Robert Schapire</code> create this algorithm <strong>AdaBoost</strong> which means adaptive boosting. It combine some weaker classifier into a stronger classifier to avoid overfitting.</p>

<p>Test case:</p>

<p>There are training points with two different label. What if we input a point which&rsquo;s type is unkown, what the result will be?</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/samples.png" alt="images" /></p>

<p>The test result is below there:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/result.png" alt="images" /></p>

<p>Just create a object of class <code>Adaboost</code> with your training samples with label. like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="kn">import</span> <span class="nn">adaboost</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">AdaBoost</span><span class="p">(</span><span class="n">Original_Data</span><span class="p">,</span> <span class="n">Tag</span><span class="p">)</span>
</span><span class='line'><span class="c"># The up bound of training time to avoid the algorithm won&#39;t stop for not meeting the training accuracy.</span>
</span><span class='line'><span class="n">times</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">times</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">prediction</span><span class="p">(</span><span class="n">UnkownPoints</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>API <code>prediction()</code> of class AdaBoost will return the result of prediction according to the model. All job done.</p>

<p>You could find other test case in my repository in github.</p>

<p><a href="https://github.com/jasonleaster/Machine_Learning/tree/master/Adaboost">Implementation of Adaboost in Python</a></p>

<p>You can check the validity of my implementation by the accuracy.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/samples2.png" alt="images" /></p>

<p>The data used to train the weaker classifier and get that accuracy is showed below there :</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/accuracy.png" alt="images" /></p>

<h3>Boosting Tree</h3>

<p>We have knew to use <code>AdaBoost</code> to do classification. <code>Boosting Tree</code> will help us to do regression.</p>

<p>We also use decision stump as the weak classifier. But implementation of decision stump in this algorithm is not the same as that in AdaBoost.</p>

<p>There are ten samples in my test module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Original_Data</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">4</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">5</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">6</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">7</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">8</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">9</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">10</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="p">])</span><span class="o">.</span><span class="n">transpose</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">ExpVal</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>
</span><span class='line'>        <span class="p">[</span><span class="mf">5.70</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mf">5.91</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mf">6.40</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mf">6.80</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mf">7.05</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mf">8.90</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mf">8.70</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mf">9.00</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mf">9.05</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mf">5.56</span><span class="p">]</span>
</span><span class='line'>        <span class="p">])</span><span class="o">.</span><span class="n">transpose</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The expected value of Original_Data[i] is ExpVal[i]. The input is from 1 to 10. How about to predict the output when the input is 1 or 11?</p>

<p>Let&rsquo;s test it. Here is the result:
<img src="http://jasonleaster.github.io/images/img_for_2015_12_13/output_of_boosting_tree.png" alt="images" /></p>

<p>Just used 11 weak classifier to construct a stronger classifier to do the regressio. The output is reasonable.</p>

<p>Here is my implementation of <code>Boosting Tree</code>
<a href="https://github.com/jasonleaster/Machine_Learning/tree/master/Boosting_Tree">Implementation of Boosting Tree in Python</a></p>

<p>Reference:</p>

<ol>
<li>MIT-6.034, Artificial Intelligence. Lab-7</li>
<li>&lt;&lt; The statistic methods >> by HangLi.</li>
<li><a href="https://en.wikipedia.org/wiki/AdaBoost">Wikipedia</a></li>
</ol>


<hr />

<p>Photo by Jason Leaster</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_12_13/street.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Search Tree]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/09/24/binary-search-tree/"/>
    <updated>2015-09-24T01:28:33+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/09/24/binary-search-tree</id>
    <content type="html"><![CDATA[<p>I try to collect problems about <code>Binary Search Tree (BST)</code> which are asked in interview frequently.</p>

<p>Basicly, here is the definition of Binary Search Tree. And I show the way how to implement the basic operation like <code>insert</code>, <code>delete</code> and so on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">()</span> <span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">num</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">right</span>  <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">left</span>   <span class="o">=</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could find all my practices with BST in github: <a href="https://github.com/jasonleaster/Algorithm/blob/master/Binary_Search_Tree/Python_version/bst.py">BST</a></p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_09_25/bst.png" alt="images" /></p>

<!-- more -->


<p>There are three different ways to travel a BST. N(node), L(left subtree), R(right subtree)</p>

<ul>
<li><p>NLR: Firstly the traveller access the data of the Node(N) and then it enter into the left sub-tree, travel the right sub-tree</p></li>
<li><p>LNR</p></li>
<li><p>LRN</p></li>
</ul>


<p>It&rsquo;s very easy and obvious to implement the recursive definition of the three different traveller.</p>

<p>You will find that it&rsquo;s a very efficient way to understand what means Pre-traveller, In-traveller and Post-traveller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Recursive definition</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">pre_traveller</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="bp">None</span> <span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">pre_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">pre_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">in_traveller</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">in_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">in_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">post_traveller</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">post_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">post_traveller</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the interview officer may not be satisfy with your recursive implementation. Take some time to understand the iteratly implementation below there.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Iterately implementation</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Given a binary tree, return the preorder traversal of </span>
</span><span class='line'><span class="sd">    its nodes&#39; values.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">preorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type root: TreeNode</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">left</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Given a binary tree, return the inorder traversal </span>
</span><span class='line'><span class="sd">    of its nodes&#39; values.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>        <span class="n">res</span><span class="p">,</span> <span class="n">stack</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="k">while</span> <span class="n">root</span><span class="p">:</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>                <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">stack</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">res</span>
</span><span class='line'>            <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>            <span class="n">root</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">postorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type root: TreeNode</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">res</span>   <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">):</span>
</span><span class='line'>            <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>                <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is another interesting problem that how to travel a BST in level order. Something like this:
For example:</p>

<p>Given binary tree {3,9,20,#,#,15,7},</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_09_25/1.png" alt="images" /></p>

<p>return its level order traversal as:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_09_25/2.png" alt="images" /></p>

<p>At this moment, you should try to use some basic data structure to solve this problem. Don&rsquo;t forget STACK :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Given a binary tree, return the level order traversal of </span>
</span><span class='line'><span class="sd">its nodes&#39; values. (ie, from left to right, level by level).</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">levelOrder</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">node</span><span class="p">]</span>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">length</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">([])</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">ret</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">left</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">right</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
</span><span class='line'>            <span class="n">stack</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you solve this problem, you have knew that stack is a efficient and useful ADT. Once you meet a hard problem, try to use another ADT to solve your problem.</p>

<p>Function <code>isValidBST</code> help us to check whether the tree is a BST. Now, if you have no idea about what means a BST, go to wikipedia and help yourself :)</p>

<p>You know that if we travel the tree with <code>In-Order traveller</code>, the output of the traveller is sorted from small element to big one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">isValidBST</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>    <span class="n">A</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">A</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">in_traveller</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">A</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a joke about how to invert a BST.</p>

<blockquote><p>Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p></blockquote>

<p>It&rsquo;s easy to solve this problem by recursion.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">invertTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">,</span> <span class="n">root</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">invertTree</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">invertTree</span><span class="p">(</span><span class="n">root</span><span class="o">.</span><span class="n">right</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may also be asked to translate a sorted array into BST. So, how to make it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sortedArrayToBST</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    :type nums: List[int]</span>
</span><span class='line'><span class="sd">    :rtype: TreeNode</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">helperSortedArrayToBST</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">helperSortedArrayToBST</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">start</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">middle</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">middle</span><span class="p">])</span>
</span><span class='line'>    <span class="n">root</span><span class="o">.</span><span class="n">left</span>  <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">helper</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">middle</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">helper</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">root</span>
</span></code></pre></td></tr></table></div></figure>


<p>How to use the output of <code>InOrder-Traveller</code> and <code>PostOrder-Traveller</code> to rebuild a BST ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Given inorder and postorder traversal of a tree, </span>
</span><span class='line'><span class="sd">construct the binary tree.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Note:</span>
</span><span class='line'><span class="sd">You may assume that duplicates do not exist in the tree.</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">buildTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inorder</span><span class="p">,</span> <span class="n">postorder</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    :type inorder: List[int]</span>
</span><span class='line'><span class="sd">    :type postorder: List[int]</span>
</span><span class='line'><span class="sd">    :rtype: TreeNode</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">inorder</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">postorder</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">index</span> <span class="o">=</span> <span class="n">inorder</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">postorder</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
</span><span class='line'>    <span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">inorder</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># You HAVE TO build right sub-tree first, </span>
</span><span class='line'>    <span class="c"># otherwise you will get wrong answer</span>
</span><span class='line'>    <span class="c"># because you poped the last element of @postorder before here.</span>
</span><span class='line'>    <span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">buildTree</span><span class="p">(</span><span class="n">inorder</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span> <span class="n">postorder</span><span class="p">)</span>
</span><span class='line'>    <span class="n">root</span><span class="o">.</span><span class="n">left</span>  <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">buildTree</span><span class="p">(</span><span class="n">inorder</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">index</span><span class="p">]</span> <span class="p">,</span> <span class="n">postorder</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">root</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>Photo By Jason Leaster in ChangDe, China</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_09_25/highschool.jpg" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Search]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/07/24/binary-search/"/>
    <updated>2015-07-24T10:17:20+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/07/24/binary-search</id>
    <content type="html"><![CDATA[<p>This is a story why I write this algorithm again.</p>

<blockquote><p>In this days, I work as an intern for Alibaba. To be honest, it totally a bad time for the beginning days. More awful fact to me is that my mentor do his job mostly in Java and I have to pick it up as quickly as possible. It’s totally a stranger for me about Java. <strong>What I have to say is that thanks god and my mentor.</strong> He is so nice and never blame me for my problem. You know that I suffer pressure heavily for I learned nothing but time wasted in this two weeks. I asked for help from human resource manager and hope to find someone guide me to walk out this shadow. Bo who is my mentor. He understand me and know my feeling. Bo encourage me and try to let me believe things will be better. Today, I face to a problem which I think is very naive but I didn’t show the solution to a leader of a department very well. And I could feel that he doubt about my ability in programming. I feel shame about he ask me that “Do you have programming in C or C++ for ten thousand lines ?”.</p></blockquote>

<!-- more -->


<p>Ok, the story end and it don’t important anymore. What I should do is to pay attention to my weak ability and work hard to make me more stronger. Then I will prepare for the coming recruitment in autumn.</p>

<p>This is a classical question. How to find an element in sequenced data ? The solution is <code>Binary Search</code>. It’s the quickest way to find element in sorted data set.</p>

<p>The theory about <code>Binary Search</code> show in blew picture.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_07_24/binary_search.png" alt="images" /></p>

<p>Here you could see my code and show you how to implement a Binary Search in C++, Java and Python.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/**********************************************************</span>
</span><span class='line'><span class="cm">Programmer   :  EOF</span>
</span><span class='line'><span class="cm">E-mail       :  jasonleaster@163.com</span>
</span><span class='line'><span class="cm">File         :  binary_search.cpp</span>
</span><span class='line'><span class="cm">Date         :  2015.07.25</span>
</span><span class='line'>
</span><span class='line'><span class="cm">***********************************************************/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="n">BinarySearch</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="n">p_array</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">,</span> <span class="n">T</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">p_array</span> <span class="o">||</span> <span class="n">start</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Empty Data set or bad scope &quot;</span>
</span><span class='line'>                     <span class="s">&quot;try to modify your parameter @start &quot;</span>
</span><span class='line'>                     <span class="s">&quot;or end. And make sure that @start smaller &quot;</span>
</span><span class='line'>                     <span class="s">&quot;than @end&quot;</span>
</span><span class='line'>                   <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">p_array</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">p_array</span><span class="p">[</span><span class="n">end</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(;</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">middle</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">p_array</span><span class="p">[</span><span class="n">middle</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">middle</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">p_array</span><span class="p">[</span><span class="n">middle</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">start</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">end</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The element you find don&#39;t exist in the data set&quot;</span>
</span><span class='line'>              <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">array</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">20</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="n">BinarySearch</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="mi">7</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="n">BinarySearch</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="mi">12</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could also find the other implementation follow this link:</p>

<p><a href="https://github.com/jasonleaster/Algorithm/tree/master/Binary_search">Binary Search</a></p>

<hr />

<p>Photo by Jason Leaster, Hangzhou, China</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_07_24/cute.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Should We Focus on ?]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/06/17/what-should-we-focus-on/"/>
    <updated>2015-06-17T02:46:15+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/06/17/what-should-we-focus-on</id>
    <content type="html"><![CDATA[<p>Nowadays, people use the social networks like <code>Facebook</code>, <code>Weibo</code>, <code>Qzone</code> and so on. That social networks make you feel that you live with others who have no relationship with you in real life. And more and more people pay a lot of time to refresh the website or the software which is programed for social networks. So did I …</p>

<p>The most important fact is that the message comes from the social networks didn’t help us a lot. If you pay the same time to read a classical book or work hard on your projects, you will get more.</p>

<p>But you choose to refresh your social networks and fall into it. You may know that you are wasting time but you still focus on it. Something like drug … yes, you are drugging but in a different way. Social networks also let you indulge yourself with idle and feel hollow after you have waste a lot of time on that. Day after day, you get nothing but only feel more and more hollow. You know that people live well from the message which the social networks feed you.</p>

<p>Times always change, there will be more and more temptation. But the thing we should know is that we should learn to distinguish what’s important and what just kill us by wating our time.</p>

<p>I delete all message I posted on <code>Weibo</code> and <code>Qzone</code>. In previous days, I followed more than two hundred people in <code>Weibo</code>. To be honest, people I followed most don’t know me and have nothing with my own life. Why I follow them just because I curious about what happened on their daily life. In the beginning, it’s funny. But now I delete them all. Yep, I wake up to reality! It have onthing with my life! I shouldn’t waste time on others who isn’t important for me. WE DO HAVE OUROWN LIFE.</p>

<p>I like a motto from steve jobs.</p>

<blockquote><p>If you want to live your life in a creative way, as an artist, you have to not look back too much. You have to be willing to take whatever you’ve done and whoever you were and throw them away. People think focus means saying yes to the thing you’ve got to focus on. But that’s not what it means at all. It means saying not to the hundred other good ideas that there be. You have to pick carefully. I’m actually as proud of the things we haven’t done as the things I have done. Innovation is saying no to 1,000 things.</p></blockquote>

<p>What I want to say is that</p>

<blockquote><p>“Focus on yourself :)”.</p></blockquote>

<hr />

<p>Photo by Jason Leaster</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_17/street.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory Model of Objects in C++]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/06/13/memory-model-of-objects-in-c-plus-plus/"/>
    <updated>2015-06-13T19:48:42+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/06/13/memory-model-of-objects-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>In this blog, I assume that you have a basic background about C++ and know that there is a “monster” we call it as <code>virtual table</code> :)</p>

<p>If there is virtual member function in your class’s definition, there will be a virtual table.</p>

<p>Compiler will generate a pointer which’s name is <code>_vprt</code> and use this pointer to find the virtual table.</p>

<!-- more -->


<p>The function below there is very important for us to understand the C++ object model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Function <code>get_element</code> take the reference of object which’s type is T(I used template technology) and <code>offset</code>.</p>

<p>We get the address of this object by <code>&amp;obj</code> and then we cast it into pointer which point to unsigned long and then we dereference that pointer. Acctually, the pointer which we dereferenced in function <code>get_element</code> is the <code>_vprt</code>.</p>

<p>After we get <code>_vprt</code>, we cast it into <code>unsigned long*</code> again and add <code>offset</code> to get others pointers in virtual table which contains all pointers that point to class virtual member functions.</p>

<p>If we dereference the return value of this function, we will get the pointer which point to the begin of function. Fantastic :)</p>

<h3>Single Object</h3>

<p>First of all, let’s take a glance at this demo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/*******************************************************************</span>
</span><span class='line'><span class="cm">Programmer  :   EOF</span>
</span><span class='line'><span class="cm">Date        :   2015.06.13</span>
</span><span class='line'><span class="cm">File        :   meomory_model_for_single_object.cpp</span>
</span><span class='line'><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> ******************************************************************/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span>  <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">FUN</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Base</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">100</span><span class="p">){</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::h()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">            Private Data</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Base</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">b</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">            The address which point virtual</span>
</span><span class='line'><span class="cm">            function&#39;s implementation in virtual table</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Pointer in Virutal Table: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Calling function by pointer in virtual table */</span>
</span><span class='line'>        <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">i</span><span class="p">)))</span> <span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are data member <code>num</code> and <code>prv_data</code> with different access label in <code>class base</code>. There also have virtual functions and normal member functions in this class. So … what’s the memory model of this class look like?</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/single_object_memory_model.png" alt="images" /></p>

<p>The output of that demo:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/output1.png" alt="images" /></p>

<h3>Single Inheritance</h3>

<p>The inheritance relationship between the base class and derived class :</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/single_inheritance_model.png" alt="images" /></p>

<p>It’s single inheritance that base class must be only single type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/*******************************************************************</span>
</span><span class='line'><span class="cm">Programmer  :   EOF</span>
</span><span class='line'><span class="cm">Date        :   2015.06.12</span>
</span><span class='line'><span class="cm">File        :   virtual_function_model.cpp</span>
</span><span class='line'><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> ******************************************************************/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span>  <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">FUN</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Base</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::h()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Private  Data</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Derived</span><span class="p">()</span><span class="o">:</span><span class="n">num</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span> <span class="n">prv_data</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">x</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::x()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">y</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::y()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Base</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Base</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">b</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">            The address which point virtual</span>
</span><span class='line'><span class="cm">            function&#39;s implementation in virtual table</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Pointer in Virutal Table: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Calling function by pointer in virtual table */</span>
</span><span class='line'>        <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">i</span><span class="p">)))</span> <span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Pointer in Virutal Table: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">i</span><span class="p">)))</span> <span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Memory Model:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/single_inheritance_model.png" alt="images" /></p>

<p>Output:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/output2.png" alt="images" /></p>

<p>We find that:</p>

<ul>
<li><p>The virtual table pointer _vprt is at the beginning of the object.</p></li>
<li><p>Data member store into object and have nothing with the access label but according to the sequence of declaration.</p></li>
<li><p>In single inheritance model, the virtual function wichi is re-implement will be update in all virtual table.</p></li>
</ul>


<h3>Multiply Inheritance</h3>

<p>Now, you find that there is only one virtual table in our object under single inheritance situation. But … How about things going on with multiply inheritance(MI) ?</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/multiple_inheritance_model.png" alt="images" /></p>

<p>Let’s go and test it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/*******************************************************************</span>
</span><span class='line'><span class="cm">Programmer  :   EOF</span>
</span><span class='line'><span class="cm">Date        :   2015.06.13</span>
</span><span class='line'><span class="cm">File        :   virtual_function_for_multiple_inheritance.cpp</span>
</span><span class='line'><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> ******************************************************************/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span>  <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">FUN</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Base_1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Base_1</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_1::f() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_1::g() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_1::h() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Private  Data</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Base_2</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Base_2</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_2::f() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">x</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_2::x() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Private  Data</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Base_3</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Base_3</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">300</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base_3::g() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Private  Data</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base_3</span><span class="p">,</span> <span class="k">public</span> <span class="n">Base_2</span><span class="p">,</span> <span class="k">public</span> <span class="n">Base_1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Derived</span><span class="p">()</span><span class="o">:</span><span class="n">num</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">prv_data</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">y</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::y() </span><span class="se">\t</span><span class="s">&quot;</span> <span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Here we re-implement the virtual function @f().</span>
</span><span class='line'><span class="cm">           Compiler will rewrite the virtual table</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::f() </span><span class="se">\t</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="o">+</span> <span class="n">vprt_offset</span><span class="p">))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">call_vir_func</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)))</span> <span class="p">();</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Address of function: &quot;</span> <span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Base_3 and @Derived:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Base_2:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_3</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_3</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Base_1:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_3</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_3</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_3</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Memory Model:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/multiple_inheritance.png" alt="images" /></p>

<p>Output:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/output3.png" alt="images" /></p>

<p>We can declare some conclusions that:</p>

<ul>
<li><p>Each base class have their own’s virtual table. Assume that The number of base class is N in multiple inheritance. The number of the virtual table is N-1.The virtual table of derived function will be combine into the first base class in the declaration queue of base class.</p></li>
<li><p>The base virtual table will be update if the derived class rewrite implementation of virtual function in base class.</p></li>
</ul>


<h3>Repeat Inheritance</h3>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/repeat_inheritance_model.png" alt="images" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/*******************************************************************</span>
</span><span class='line'><span class="cm">Programmer  :   EOF</span>
</span><span class='line'><span class="cm">Date        :   2015.06.14</span>
</span><span class='line'><span class="cm">File        :   virtual_function_for_repreat_inheritance.cpp</span>
</span><span class='line'><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> ******************************************************************/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span>  <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">FUN</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Base</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::h()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Private  Data</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived_1</span><span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Derived_1</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_1::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">x</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_1::x()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_1::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_1::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_1::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_1::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Base</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Private  Data</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived_2</span><span class="o">:</span> <span class="k">public</span> <span class="n">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Derived_2</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">300</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_2::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_2::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_2::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_2::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_2::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Base</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Private  Data</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Derived_2</span><span class="p">,</span> <span class="k">public</span> <span class="n">Derived_1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Derived</span><span class="p">()</span><span class="o">:</span><span class="n">num</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">prv_data</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">y</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::y()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Here we re-implement the virtual function @f().</span>
</span><span class='line'><span class="cm">           Compiler will rewrite the virtual table</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Derived_1</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>            <span class="n">Derived_2</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="o">+</span> <span class="n">vprt_offset</span><span class="p">))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">call_vir_func</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)))</span> <span class="p">();</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s"> Address of function: &quot;</span> <span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Derived, @Derived_2 and @Base:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Derived_1 and @Base:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Memory Model:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/repeat_inheritance.png" alt="images" /></p>

<p>You find that The base object was inherited again and again Output:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/output4.png" alt="images" /></p>

<p>It’s may not what we want that the base class is inherited repeatedly. So C++ use the <code>virtual base</code> technology to solve this problem :)</p>

<h3>Diamond Inheritance</h3>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/diamond_inheritance_model.png" alt="images" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/*******************************************************************</span>
</span><span class='line'><span class="cm">Programmer  :   EOF</span>
</span><span class='line'><span class="cm">Date        :   2015.06.14</span>
</span><span class='line'><span class="cm">File        :   virtual_function_for_diamond_inheritance.cpp</span>
</span><span class='line'><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> ******************************************************************/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span>  <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">FUN</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Base</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Base::h()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Base::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Private  Data</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived_1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Derived_1</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_1::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">x</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_1::x()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_1::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_1::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_1::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_1::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Base</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Private  Data</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived_2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">Base</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Derived_2</span><span class="p">()</span><span class="o">:</span><span class="n">prv_data</span><span class="p">(</span><span class="mi">300</span><span class="p">),</span> <span class="n">num</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived_2::g()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_2::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived_2::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_2::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived_2::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Base</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Private  Data</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Derived_2</span><span class="p">,</span> <span class="k">public</span> <span class="n">Derived_1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Derived</span><span class="p">()</span><span class="o">:</span><span class="n">num</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">prv_data</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">y</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::y()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Here we re-implement the virtual function @f().</span>
</span><span class='line'><span class="cm">           Compiler will rewrite the virtual table</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Derived::f()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::num &quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::prv_data &quot;</span>   <span class="o">&lt;&lt;</span> <span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::num &quot;</span>       <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&amp;Derived::prv_data &quot;</span>  <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">prv_data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Derived_1</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>            <span class="n">Derived_2</span><span class="o">::</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">prv_data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span> <span class="n">get_element</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="o">+</span> <span class="n">vprt_offset</span><span class="p">))</span> <span class="o">+</span> <span class="n">offset</span> <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">call_vir_func</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">vprt_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">((</span><span class="n">FUN</span><span class="p">)(</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)))</span> <span class="p">();</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s"> Address of function: &quot;</span> <span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">get_element</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vprt_offset</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'><span class="c1">//    d.show();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Derived::Derived_2&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Derived::Derived_1&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Derived_2</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">    cout &lt;&lt; (int*)&amp;d &lt;&lt; endl;</span>
</span><span class='line'><span class="cm">    cout &lt;&lt; (int*)&amp;d.Derived_2::num &lt;&lt; endl;</span>
</span><span class='line'><span class="cm">    cout &lt;&lt; (int*)&amp;d.Derived_1::num &lt;&lt; endl;</span>
</span><span class='line'><span class="cm">    cout &lt;&lt; (int*)&amp;d.num &lt;&lt; endl;</span>
</span><span class='line'><span class="cm">    cout &lt;&lt; (int*)&amp;d.Base::num &lt;&lt; endl;</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Virtual Table of @Derived::Derived_2::Base&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Derived</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Derived</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_vir_func</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Derived</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It’s a hard time to draw this picture. But thank god… I make it.</p>

<p>Memory Model:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/diamond_inheritance.png" alt="images" /></p>

<p>Output:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/output5.png" alt="images" /></p>

<p>ATTENTION: <strong>Every class in C++ only have ONE virtual table, different objects of the same class will share the same virtual table of that class!</strong></p>

<hr />

<p>Photo by Jason Leaster images</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_06_12/end.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn to Design a Container]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/05/25/learn-to-design-a-container/"/>
    <updated>2015-05-25T19:14:38+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/05/25/learn-to-design-a-container</id>
    <content type="html"><![CDATA[<p>Container is a collection which help us to store data of different types of data structure.</p>

<p>There are only two types of container in C++/C :</p>

<ul>
<li>array</li>
<li>structure</li>
</ul>


<p>C++ could provide more container but it didn’t.</p>

<p><strong>Give a man a fish and you feed him for a day; teach a man to fish and you feed him for a lifetime; knowledge is the best charity;</strong></p>

<p>:)</p>

<!-- more -->


<p>Here we are gona to design a container which is like array but not the same.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_24/arch.png" alt="images" /></p>

<p>You could find the implementation of this container on my github.</p>

<p><a href="https://github.com/jasonleaster/Rumination_On_C_plus_plus/blob/master/chapter_13/con_array.h">Our Container Implementation</a></p>

<p>You could test out container by this program.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &quot;con_array.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Array</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">ap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Pointer</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">(</span><span class="o">*</span><span class="n">ap</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//delete ap;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">ap</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The size of Array &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ap</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="o">*</span><span class="n">ap</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ap</span><span class="o">-&gt;</span><span class="n">resize</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After resize(), the size of Array &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ap</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="o">*</span><span class="n">ap</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could also see the output beblow there:</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_24/output1.png" alt="images" /></p>

<hr />

<p>Photo by Jason Leaster in ChangDe, China</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_24/cherry_blossom.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Exercise of C++]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/05/24/an-exercise-of-c-plus-plus/"/>
    <updated>2015-05-24T13:57:36+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/05/24/an-exercise-of-c-plus-plus</id>
    <content type="html"><![CDATA[<p>In &lt;&lt; The C++ Programming Language >> , there is a exercise for learner who is studying C++. It’s that student should write a program in C++ to manipulate “character picture”, something like this.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_24/output.png" alt="images" /></p>

<!-- more -->


<p>To abstract that picture, we use this <code>class Picture</code> in the header file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/*******************************************************</span>
</span><span class='line'><span class="cm">Programmer  :   EOF</span>
</span><span class='line'><span class="cm">Date        :   2015.05.22</span>
</span><span class='line'><span class="cm">File        :   picture.h</span>
</span><span class='line'><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm">Description:</span>
</span><span class='line'><span class="cm">    Here is a demo in &lt;&lt; Ruminations on C++ &gt;&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">*******************************************************/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Picture</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">       All implementation of member function and friend functions</span>
</span><span class='line'><span class="cm">       could be found in &quot;picture.cpp&quot;</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">Picture</span> <span class="nf">frame</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">Picture</span> <span class="k">operator</span> <span class="o">&amp;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">Picture</span> <span class="k">operator</span> <span class="o">|</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Picture</span><span class="p">()</span><span class="o">:</span> <span class="n">height</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">width</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">data</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">Picture</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span><span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Picture</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>        <span class="o">~</span><span class="n">Picture</span><span class="p">()</span> <span class="p">{</span> <span class="k">delete</span> <span class="p">[]</span> <span class="n">data</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Picture</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">char</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">copyblock</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           This function is so cool! Don&#39;t you think so? :)</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">char</span><span class="o">&amp;</span> <span class="n">position</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="n">row</span> <span class="o">*</span> <span class="n">width</span> <span class="o">+</span> <span class="n">col</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">char</span> <span class="n">position</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="n">row</span> <span class="o">*</span> <span class="n">width</span> <span class="o">+</span> <span class="n">col</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">clear</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">init</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>        <span class="k">static</span> <span class="kt">int</span> <span class="nf">max</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we should support three different operation to our user.</p>

<ul>
<li>Adding frame for picture.</li>
<li>Connecting picture vertically</li>
<li>Connecting picture horizontal</li>
</ul>


<p>Aha~ We support that operation by provide there interfaces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Picture</span> <span class="nf">frame</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="n">Picture</span> <span class="k">operator</span> <span class="o">&amp;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="n">Picture</span> <span class="k">operator</span> <span class="o">|</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">q</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could test our implementation by this test program :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &quot;picture.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="n">init</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Paris&quot;</span><span class="p">,</span> <span class="s">&quot;in the&quot;</span><span class="p">,</span> <span class="s">&quot;Spring&quot;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Picture</span> <span class="n">p</span><span class="p">(</span><span class="n">init</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">frame</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">p</span> <span class="o">&amp;</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">p</span> <span class="o">|</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Picture</span> <span class="n">q</span><span class="p">(</span><span class="n">init</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">q</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is my implementation: file: picture.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/***************************************************</span>
</span><span class='line'><span class="cm">    Programmer  :   EOF</span>
</span><span class='line'><span class="cm">    File        :   picture.cpp</span>
</span><span class='line'><span class="cm">    Date        :   2015.05.24</span>
</span><span class='line'><span class="cm">    E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> ***************************************************/</span>
</span><span class='line'><span class="cp">#include &quot;picture.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   public functions of class @Picture</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">Picture</span><span class="o">::</span><span class="n">Picture</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span><span class="o">*</span> <span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">w</span> <span class="o">=</span> <span class="n">Picture</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">w</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">src</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">src</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">position</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">src</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">position</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Picture</span><span class="o">::</span><span class="n">Picture</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">height</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">width</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">),</span>
</span><span class='line'>    <span class="n">data</span><span class="p">(</span><span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">copyblock</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Picture</span><span class="o">&amp;</span> <span class="n">Picture</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="k">this</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="p">[]</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="n">init</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">);</span>
</span><span class='line'>        <span class="n">copyblock</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">    Private functions</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Picture</span><span class="o">::</span><span class="n">copyblock</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">height</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">position</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">row</span><span class="p">,</span> <span class="n">j</span> <span class="o">+</span> <span class="n">col</span><span class="p">)</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Picture</span><span class="o">::</span><span class="n">clear</span><span class="p">(</span><span class="kt">int</span> <span class="n">r1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">r1</span><span class="p">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">r2</span><span class="p">;</span> <span class="n">r</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">c1</span><span class="p">;</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">c2</span><span class="p">;</span> <span class="n">c</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">position</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Picture</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="kt">int</span> <span class="n">h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">w</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">height</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'>    <span class="n">width</span>  <span class="o">=</span> <span class="n">w</span><span class="p">;</span>
</span><span class='line'>    <span class="n">data</span>   <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">height</span> <span class="o">*</span> <span class="n">width</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Picture</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">m</span> <span class="o">&gt;</span> <span class="n">n</span> <span class="o">?</span> <span class="nl">m</span> <span class="p">:</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   Friend functions.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">height</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">o</span> <span class="o">&lt;&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">o</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">    This function @frame() will help us to add frame </span>
</span><span class='line'><span class="cm">   into the old picture which was referenced by @p.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">Picture</span> <span class="n">frame</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Picture</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">r</span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;|&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">r</span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;|&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">.</span><span class="n">width</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">r</span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">r</span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;+&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;+&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;+&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">position</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;+&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">copyblock</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   We redefine the @&amp; operator to connect two picture </span>
</span><span class='line'><span class="cm">   @p and @q vertically.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   The height of the new picture will be @p.height + @q.height.</span>
</span><span class='line'><span class="cm">   The width of the new one will be max value between </span>
</span><span class='line'><span class="cm">   @p.width and @q.width</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   We also should clear the new empty region for alignment,</span>
</span><span class='line'><span class="cm">   if the size of the inputed two pictures are different.</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">Picture</span> <span class="k">operator</span> <span class="o">&amp;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">q</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Picture</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="n">q</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">Picture</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">q</span><span class="p">.</span><span class="n">width</span><span class="p">));</span>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">clear</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>  <span class="n">p</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">width</span><span class="p">);</span>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">clear</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">q</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">width</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">copyblock</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">copyblock</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   Operator @| is like @&amp; but different.</span>
</span><span class='line'><span class="cm">   This operation connect two pictures @p and @q horizonal.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">Picture</span> <span class="k">operator</span> <span class="o">|</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">q</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Picture</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="n">Picture</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">q</span><span class="p">.</span><span class="n">height</span><span class="p">),</span>
</span><span class='line'>            <span class="n">p</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="n">q</span><span class="p">.</span><span class="n">width</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">clear</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">);</span>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">clear</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">width</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">copyblock</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="n">r</span><span class="p">.</span><span class="n">copyblock</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You know that that solution is not hard and is easy for us to understand. But there is a weakpoint that we lose the basic intern information of the old picture which we used to connect and create a new picture.</p>

<p><strong>we can’t seperate the real frame and pure picture after we finished our @frame operation.</strong></p>

<p>The same problem exist in others operation. We lose information which may be very useful for us in future.</p>

<p>So… Refactoring is needed.</p>

<h3>The second solution</h3>

<p>The header file which contains the class that is used for abstrcation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/***********************************************</span>
</span><span class='line'><span class="cm">    Programmer  :   EOF</span>
</span><span class='line'><span class="cm">    Date        :   2015.05.22</span>
</span><span class='line'><span class="cm">    File        :   picture.h</span>
</span><span class='line'><span class="cm">    E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> ***********************************************/</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Picture</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">P_Node</span><span class="p">;</span><span class="c1">// base class</span>
</span><span class='line'><span class="k">class</span> <span class="nc">String_Pic</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Frame_Pic</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">VCat_Pic</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HCat_Pic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Picture</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">Picture</span> <span class="nf">frame</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">Picture</span> <span class="k">operator</span><span class="o">&amp;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">Picture</span> <span class="k">operator</span><span class="o">|</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Picture</span><span class="p">()</span><span class="o">:</span><span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span> <span class="p">;</span>
</span><span class='line'>        <span class="n">Picture</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span><span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Picture</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>        <span class="o">~</span><span class="n">Picture</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Picture</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">friend</span> <span class="k">class</span> <span class="nc">String_Pic</span><span class="p">;</span>
</span><span class='line'>        <span class="k">friend</span> <span class="k">class</span> <span class="nc">Frame_Pic</span><span class="p">;</span>
</span><span class='line'>        <span class="k">friend</span> <span class="k">class</span> <span class="nc">HCat_Pic</span><span class="p">;</span>
</span><span class='line'>        <span class="k">friend</span> <span class="k">class</span> <span class="nc">VCat_Pic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="n">P_Node</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Picture</span><span class="p">(</span><span class="n">P_Node</span><span class="o">*</span> <span class="n">p_node</span><span class="p">)</span> <span class="o">:</span> <span class="n">p</span><span class="p">(</span><span class="n">p_node</span><span class="p">)</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">height</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">width</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">display</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">P_Node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Picture</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>        <span class="n">P_Node</span><span class="p">()</span><span class="o">:</span> <span class="n">use</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">int</span> <span class="n">height</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">int</span> <span class="n">width</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">display</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="o">~</span><span class="n">P_Node</span><span class="p">()</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">use</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">String_Pic</span><span class="o">:</span> <span class="k">public</span> <span class="n">P_Node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Picture</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">String_Pic</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span><span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>        <span class="o">~</span><span class="n">String_Pic</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">height</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">width</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">display</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">char</span><span class="o">**</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Frame_Pic</span><span class="o">:</span> <span class="k">public</span> <span class="n">P_Node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">Picture</span> <span class="n">frame</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Frame_Pic</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">height</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">width</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">display</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Picture</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">VCat_Pic</span><span class="o">:</span> <span class="k">public</span> <span class="n">P_Node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">Picture</span> <span class="k">operator</span><span class="o">&amp;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">VCat_Pic</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">height</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">width</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">display</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Picture</span> <span class="n">top</span><span class="p">,</span> <span class="n">bottom</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HCat_Pic</span><span class="o">:</span> <span class="k">public</span> <span class="n">P_Node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">Picture</span> <span class="k">operator</span> <span class="o">|</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">HCat_Pic</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">height</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">width</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">display</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Picture</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Member functions are all implemented in this file “picture.cpp”.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/********************************************************</span>
</span><span class='line'><span class="cm">    Programmer  :   EOF</span>
</span><span class='line'><span class="cm">    File        :   picture.cpp</span>
</span><span class='line'><span class="cm">    Date        :   2015.05.24</span>
</span><span class='line'><span class="cm">    E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> *******************************************************/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;picture.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   Member function of @class-P_Node</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">P_Node</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span> <span class="o">?</span> <span class="nl">x</span> <span class="p">:</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   Member function of @class-Picture</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">Picture</span><span class="o">::</span><span class="n">Picture</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="o">*</span><span class="n">str</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="n">p</span><span class="p">(</span><span class="k">new</span> <span class="n">String_Pic</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Picture</span><span class="o">::</span><span class="n">Picture</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">orig</span><span class="p">)</span><span class="o">:</span><span class="n">p</span><span class="p">(</span><span class="n">orig</span><span class="p">.</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">orig</span><span class="p">.</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Picture</span><span class="o">::~</span><span class="n">Picture</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Picture</span><span class="o">&amp;</span>
</span><span class='line'><span class="n">Picture</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">orig</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">orig</span><span class="p">.</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">orig</span><span class="p">.</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Picture</span><span class="o">::</span><span class="n">height</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Picture</span><span class="o">::</span><span class="n">width</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Picture</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&gt;</span><span class="n">display</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'><span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ht</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">height</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">wd</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ht</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">p</span><span class="p">.</span><span class="n">display</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">wd</span><span class="p">);</span>
</span><span class='line'>        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   Member function of @class-String_Pic</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">String_Pic</span><span class="o">::</span><span class="n">String_Pic</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">data</span><span class="p">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">*</span> <span class="p">[</span><span class="n">n</span><span class="p">]),</span> <span class="n">size</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">strlen</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>        <span class="n">strcpy</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">String_Pic</span><span class="o">::~</span><span class="n">String_Pic</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="p">[]</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">delete</span> <span class="p">[]</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">String_Pic</span><span class="o">::</span><span class="n">height</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">String_Pic</span><span class="o">::</span><span class="n">width</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">pad</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">String_Pic</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">width</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">row</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">height</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">data</span><span class="p">[</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">row</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pad</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">width</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   Member function of @class-Frame_Pic</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">Frame_Pic</span><span class="o">::</span><span class="n">Frame_Pic</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">pic</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">p</span><span class="p">(</span><span class="n">pic</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Frame_Pic</span><span class="o">::</span><span class="n">height</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="p">.</span><span class="n">height</span><span class="p">()</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Frame_Pic</span><span class="o">::</span><span class="n">width</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">()</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Frame_Pic</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">wd</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">row</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">row</span> <span class="o">&gt;=</span> <span class="n">height</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//run-across ??</span>
</span><span class='line'>        <span class="n">pad</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">wd</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">row</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">row</span> <span class="o">==</span> <span class="n">height</span><span class="p">()</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;+&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">();</span>
</span><span class='line'>            <span class="k">while</span><span class="p">(</span><span class="o">--</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;-&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;+&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;|&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span><span class="p">.</span><span class="n">display</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">());</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;|&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">pad</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">width</span><span class="p">(),</span> <span class="n">wd</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Picture</span> <span class="n">frame</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">pic</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Frame_Pic</span><span class="p">(</span><span class="n">pic</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   Member functions of @class-VCat_Pic</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">VCat_Pic</span><span class="o">::</span><span class="n">VCat_Pic</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="n">top</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">bottom</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">VCat_Pic</span><span class="o">::</span><span class="n">height</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">top</span><span class="p">.</span><span class="n">height</span><span class="p">()</span> <span class="o">+</span> <span class="n">bottom</span><span class="p">.</span><span class="n">height</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">VCat_Pic</span><span class="o">::</span><span class="n">width</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">max</span><span class="p">(</span><span class="n">top</span><span class="p">.</span><span class="n">width</span><span class="p">(),</span> <span class="n">bottom</span><span class="p">.</span><span class="n">width</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">VCat_Pic</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">wd</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">row</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">top</span><span class="p">.</span><span class="n">height</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">top</span><span class="p">.</span><span class="n">display</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">wd</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">row</span> <span class="o">&lt;</span> <span class="n">top</span><span class="p">.</span><span class="n">height</span><span class="p">()</span> <span class="o">+</span> <span class="n">bottom</span><span class="p">.</span><span class="n">height</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">bottom</span><span class="p">.</span><span class="n">display</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">row</span><span class="o">-</span><span class="n">top</span><span class="p">.</span><span class="n">height</span><span class="p">(),</span> <span class="n">wd</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">pad</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">wd</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Picture</span> <span class="k">operator</span> <span class="o">&amp;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">VCat_Pic</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   Member functions of @class-HCat_Pic</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="n">HCat_Pic</span><span class="o">::</span><span class="n">HCat_Pic</span><span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">l</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">r</span><span class="p">)</span><span class="o">:</span> <span class="n">left</span><span class="p">(</span><span class="n">l</span><span class="p">),</span> <span class="n">right</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">HCat_Pic</span><span class="o">::</span><span class="n">height</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">left</span><span class="p">.</span><span class="n">height</span><span class="p">(),</span> <span class="n">right</span><span class="p">.</span><span class="n">height</span><span class="p">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">HCat_Pic</span><span class="o">::</span><span class="n">width</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">left</span><span class="p">.</span><span class="n">width</span><span class="p">()</span> <span class="o">+</span> <span class="n">right</span><span class="p">.</span><span class="n">width</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">HCat_Pic</span><span class="o">::</span><span class="n">display</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">wd</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">left</span><span class="p">.</span><span class="n">display</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">left</span><span class="p">.</span><span class="n">width</span><span class="p">());</span>
</span><span class='line'>    <span class="n">right</span><span class="p">.</span><span class="n">display</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">right</span><span class="p">.</span><span class="n">width</span><span class="p">());</span>
</span><span class='line'>    <span class="n">pad</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">width</span><span class="p">(),</span> <span class="n">wd</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Picture</span> <span class="k">operator</span> <span class="o">|</span> <span class="p">(</span><span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">l</span><span class="p">,</span> <span class="k">const</span> <span class="n">Picture</span><span class="o">&amp;</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">HCat_Pic</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could use this test program to test our solution :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &quot;picture.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="n">init</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Paris&quot;</span><span class="p">,</span> <span class="s">&quot;in the&quot;</span><span class="p">,</span> <span class="s">&quot;Spring&quot;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Picture</span> <span class="n">p</span><span class="p">(</span><span class="n">init</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">frame</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">frame</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">|</span> <span class="n">frame</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">frame</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">frame</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>Photo by YanZixin in Changde, China</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_24/tree.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Example for OOP in C++]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/05/19/an-example-for-oop-in-c-plus-plus/"/>
    <updated>2015-05-19T23:13:08+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/05/19/an-example-for-oop-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>Generally, OOP( Object Oriented Progarmming) have three important elements:</p>

<ul>
<li>Abstraction of data</li>
<li>Inheritance</li>
<li>Dynamic Binding</li>
</ul>


<p>Now, there is a demo for how to build an arithmetic expression-tree.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_19/exp_tree.png" alt="images" /></p>

<!-- more -->


<p>We want to build a node-tree like the tree in that picture to print a correct arithmetic expression.</p>

<p>Here you could see the relationship between the classes we used in our demo.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_19/class_relationship.png" alt="images" /></p>

<p>You know that the three classes <code>Int_node</code>, <code>Unary_node</code> and <code>Binary_node</code> are all inherit from the base class <code>Expr_node</code>.</p>

<p>Let’s look at the simple unary arithmetic expression <code>(-5)</code>. In this expression, there is only one operand <code>-</code> and one integer <code>5</code>. In expression <code>( 3 + 4)</code>, there are two integer and one operand.</p>

<p>We could find that there are only three different expression in representation of arithmetic expression. They are:</p>

<ul>
<li>Integer Expression</li>
<li>Unary Expression</li>
<li>Binary Expression</li>
</ul>


<p>So, we find the common attributes on the three different types of expression and use a base-class <code>Expr_node</code> to represent this attribute.</p>

<p>If you have background in class handle, you may notice that <code>class Expr</code> is the handle for <code>Expr_node</code>.</p>

<p>We don’t need real objects of <code>class Expr_node</code>. What we need is the classes which inherit from that base-class. The meaning of the base-class is to provide the public interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">    Programmer  :   EOF</span>
</span><span class='line'><span class="cm">    Date        :   2015.05.19</span>
</span><span class='line'><span class="cm">    File        :   exp_node.cpp</span>
</span><span class='line'><span class="cm">    E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   This @Expr_node is the base-class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Expr_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Expr_node</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Expr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">use</span><span class="p">;</span><span class="c1">// @use is a counter to avoid copying objects.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//protected:</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Expr_node</span><span class="p">()</span><span class="o">:</span> <span class="n">use</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">)</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="o">~</span><span class="n">Expr_node</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Expr</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Expr</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Expr_node</span><span class="o">*</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Expr</span><span class="p">()</span><span class="o">:</span><span class="n">p</span><span class="p">(</span><span class="nb">NULL</span><span class="p">){}</span>
</span><span class='line'>        <span class="n">Expr</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">Expr</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">Expr</span><span class="p">,</span> <span class="n">Expr</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">Expr</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span> <span class="n">p</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">p</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Expr</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Expr</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">~</span><span class="n">Expr</span><span class="p">()</span> <span class="p">{</span> <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">delete</span> <span class="n">p</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">,</span> <span class="k">const</span> <span class="n">Expr_node</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">e</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Expr</span><span class="o">&amp;</span>
</span><span class='line'><span class="n">Expr</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Expr</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">rhs</span><span class="p">.</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">,</span> <span class="k">const</span> <span class="n">Expr</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">print</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Int_node</span><span class="o">:</span> <span class="k">public</span> <span class="n">Expr_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Expr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Int_node</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">)</span><span class="o">:</span> <span class="n">n</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="n">o</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Unary_node</span><span class="o">:</span> <span class="k">public</span> <span class="n">Expr_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Expr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">op</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Expr</span> <span class="n">opnd</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Unary_node</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">b</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="n">op</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">opnd</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">o</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;(&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">op</span> <span class="o">&lt;&lt;</span> <span class="n">opnd</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Binary_node</span><span class="o">:</span> <span class="k">public</span> <span class="n">Expr_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Expr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">op</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Expr</span> <span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Expr</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Binary_node</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">b</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">c</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="n">op</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">left</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">right</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">o</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;(&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">left</span> <span class="o">&lt;&lt;</span> <span class="n">op</span> <span class="o">&lt;&lt;</span> <span class="n">right</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Expr</span><span class="o">::</span><span class="n">Expr</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Int_node</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Expr</span><span class="o">::</span><span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">op</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Unary_node</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Expr</span><span class="o">::</span><span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">op</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">left</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Binary_node</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Expr</span> <span class="n">t</span> <span class="o">=</span> <span class="n">Expr</span><span class="p">(</span><span class="s">&quot;*&quot;</span><span class="p">,</span> <span class="n">Expr</span><span class="p">(</span><span class="s">&quot;-&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">Expr</span><span class="p">(</span><span class="s">&quot;+&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">t</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">Expr</span><span class="p">(</span><span class="s">&quot;*&quot;</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">t</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could run this program and will get the output like this one.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_19/output1.png" alt="images" /></p>

<h3>More Opeartion</h3>

<p>We could evaluate the expression and add more types of node.</p>

<p>Here is the implementation. That’s cool!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">    Programmer  :   EOF</span>
</span><span class='line'><span class="cm">    Date        :   2015.05.19</span>
</span><span class='line'><span class="cm">    File        :   8.5.cpp</span>
</span><span class='line'><span class="cm">    E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   This @Expr_node is the base-class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Expr_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Expr_node</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Expr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">use</span><span class="p">;</span><span class="c1">// @use is a counter to avoid copying objects.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Expr_node</span><span class="p">()</span><span class="o">:</span> <span class="n">use</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">)</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="o">~</span><span class="n">Expr_node</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">int</span> <span class="n">eval</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Expr</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Expr</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Expr_node</span><span class="o">*</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Expr</span><span class="p">()</span><span class="o">:</span><span class="n">p</span><span class="p">(</span><span class="nb">NULL</span><span class="p">){}</span>
</span><span class='line'>        <span class="n">Expr</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">Expr</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">Expr</span><span class="p">,</span> <span class="n">Expr</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">Expr</span><span class="p">,</span> <span class="n">Expr</span><span class="p">,</span> <span class="n">Expr</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">Expr</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span> <span class="n">p</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">p</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Expr</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Expr</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">~</span><span class="n">Expr</span><span class="p">()</span> <span class="p">{</span> <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">delete</span> <span class="n">p</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">eval</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">eval</span><span class="p">();}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">,</span> <span class="k">const</span> <span class="n">Expr_node</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">e</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Expr</span><span class="o">&amp;</span>
</span><span class='line'><span class="n">Expr</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Expr</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">rhs</span><span class="p">.</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">use</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">,</span> <span class="k">const</span> <span class="n">Expr</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">o</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="o">*</span><span class="n">t</span><span class="p">.</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Int_node</span><span class="o">:</span> <span class="k">public</span> <span class="n">Expr_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Expr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Int_node</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">)</span><span class="o">:</span> <span class="n">n</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="n">o</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">eval</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">n</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Unary_node</span><span class="o">:</span> <span class="k">public</span> <span class="n">Expr_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Expr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">op</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Expr</span> <span class="n">opnd</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Unary_node</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">b</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="n">op</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">opnd</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">o</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;(&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">op</span> <span class="o">&lt;&lt;</span> <span class="n">opnd</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">eval</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="s">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="n">opnd</span><span class="p">.</span><span class="n">eval</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">throw</span> <span class="s">&quot;error, bad op&quot;</span> <span class="o">+</span> <span class="n">op</span> <span class="o">+</span> <span class="s">&quot;int UnaryNode&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Binary_node</span><span class="o">:</span> <span class="k">public</span> <span class="n">Expr_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Expr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">op</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Expr</span> <span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Expr</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Binary_node</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">b</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">c</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="n">op</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">left</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">right</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">o</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;(&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">left</span> <span class="o">&lt;&lt;</span> <span class="n">op</span> <span class="o">&lt;&lt;</span> <span class="n">right</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">eval</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">op1</span> <span class="o">=</span> <span class="n">left</span><span class="p">.</span><span class="n">eval</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">op2</span> <span class="o">=</span> <span class="n">right</span><span class="p">.</span><span class="n">eval</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="s">&quot;-&quot;</span><span class="p">)</span> <span class="k">return</span> <span class="n">op1</span> <span class="o">-</span> <span class="n">op2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="s">&quot;+&quot;</span><span class="p">)</span> <span class="k">return</span> <span class="n">op1</span> <span class="o">+</span> <span class="n">op2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="s">&quot;*&quot;</span><span class="p">)</span> <span class="k">return</span> <span class="n">op1</span> <span class="o">*</span> <span class="n">op2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="s">&quot;/&quot;</span><span class="p">)</span> <span class="k">return</span> <span class="n">op1</span> <span class="o">/</span> <span class="n">op2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="s">&quot;/&quot;</span> <span class="o">&amp;&amp;</span> <span class="n">op2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">op1</span><span class="o">/</span> <span class="n">op2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">throw</span> <span class="s">&quot;error, bad op&quot;</span> <span class="o">+</span> <span class="n">op</span> <span class="o">+</span> <span class="s">&quot;int BinaryNode&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Ternary_node</span><span class="o">:</span><span class="k">public</span> <span class="n">Expr_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Expr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">string</span> <span class="n">op</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Expr</span> <span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Expr</span> <span class="n">middle</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Expr</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Ternary_node</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">b</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">c</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">d</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="n">op</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">left</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">middle</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="n">right</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">eval</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Ternary_node</span><span class="o">::</span><span class="n">print</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">o</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">o</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;(&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">left</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; ? &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">middle</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">right</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Ternary_node</span><span class="o">::</span><span class="n">eval</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">left</span><span class="p">.</span><span class="n">eval</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">middle</span><span class="p">.</span><span class="n">eval</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">right</span><span class="p">.</span><span class="n">eval</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Expr</span><span class="o">::</span><span class="n">Expr</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Int_node</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Expr</span><span class="o">::</span><span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">op</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Unary_node</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Expr</span><span class="o">::</span><span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">op</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">left</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Binary_node</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Expr</span><span class="o">::</span><span class="n">Expr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">op</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">left</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">middle</span><span class="p">,</span> <span class="n">Expr</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ternary_node</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Expr</span> <span class="n">t</span> <span class="o">=</span> <span class="n">Expr</span><span class="p">(</span><span class="s">&quot;*&quot;</span><span class="p">,</span> <span class="n">Expr</span><span class="p">(</span><span class="s">&quot;-&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">Expr</span><span class="p">(</span><span class="s">&quot;+&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">t</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">t</span><span class="p">.</span><span class="n">eval</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">Expr</span><span class="p">(</span><span class="s">&quot;*&quot;</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">t</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">t</span><span class="p">.</span><span class="n">eval</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">Expr</span><span class="p">(</span><span class="s">&quot;?&quot;</span><span class="p">,</span><span class="n">Expr</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="n">Expr</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span><span class="n">Expr</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">t</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">t</span><span class="p">.</span><span class="n">eval</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_19/output2.png" alt="images" /></p>

<hr />

<p>Photo by Zhouyin in ShangHai, China</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_19/me.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handle Class]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/05/18/handle-class/"/>
    <updated>2015-05-18T19:13:34+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/05/18/handle-class</id>
    <content type="html"><![CDATA[<p>For some types of class, if we could avoid the copy operation, it will be great advantage.</p>

<p>Sometimes, copy cost a lot.</p>

<p>It’s not a good way to use pointer to avoid copy operation. It’s unsafe.</p>

<p>What if we want the attribute of polymiorphism and reduce the cost of copy ?</p>

<p>The answer is Handle which is a special class.</p>

<!-- more -->


<p>We use count to avoid copying. The count can not be a part of handle. If we do that, each handle have to know others handles’ location(it’s easy for us to get address of members who are in the same class). Only we do that, we could update the count correctly. We also could not let the count be a part of objects. Becasue we have to rewrite the type of class which have already existed.</p>

<p>So, we define a new type of class to store the count and object.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_19/arch.png" alt="images" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/**********************************************</span>
</span><span class='line'><span class="cm">    Programmer  :   EOF</span>
</span><span class='line'><span class="cm">    Date        :   2015.05.19</span>
</span><span class='line'><span class="cm">    File        :   6.6.cpp</span>
</span><span class='line'><span class="cm">    E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm">**********************************************/</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Point</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Point</span><span class="p">()</span><span class="o">:</span> <span class="n">xval</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">yval</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">Point</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span><span class="o">:</span> <span class="n">xval</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">yval</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">x</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">xval</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">y</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">yval</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">Point</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">(</span><span class="kt">int</span> <span class="n">xv</span><span class="p">)</span> <span class="p">{</span> <span class="n">xval</span> <span class="o">=</span> <span class="n">xv</span><span class="p">;</span> <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">Point</span><span class="o">&amp;</span> <span class="n">y</span><span class="p">(</span><span class="kt">int</span> <span class="n">yv</span><span class="p">)</span> <span class="p">{</span> <span class="n">yval</span> <span class="o">=</span> <span class="n">yv</span><span class="p">;</span> <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">xval</span><span class="p">,</span> <span class="n">yval</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   This class is used for store the @Point class and count @u</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UPoint</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Handle</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">counter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UPoint</span><span class="p">()</span><span class="o">:</span> <span class="n">counter</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">UPoint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span><span class="o">:</span> <span class="n">p</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">counter</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">UPoint</span><span class="p">(</span><span class="k">const</span> <span class="n">Point</span><span class="o">&amp;</span> <span class="n">p0</span><span class="p">)</span><span class="o">:</span> <span class="n">p</span><span class="p">(</span><span class="n">p0</span><span class="p">),</span> <span class="n">counter</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Handle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Handle</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Handle</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Handle</span><span class="p">(</span><span class="k">const</span> <span class="n">Point</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Handle</span><span class="p">(</span><span class="k">const</span> <span class="n">Handle</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Handle</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Handle</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">~</span><span class="n">Handle</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">x</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Handle</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">y</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Handle</span><span class="o">&amp;</span> <span class="n">y</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">            All we have done in @Handle is to maintain this data member :)</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">UPoint</span> <span class="o">*</span><span class="n">up</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Handle</span><span class="o">::~</span><span class="n">Handle</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">--</span><span class="n">up</span><span class="o">-&gt;</span><span class="n">counter</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">up</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   Constructor function of @Handle</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">Handle</span><span class="o">::</span><span class="n">Handle</span><span class="p">()</span><span class="o">:</span> <span class="n">up</span><span class="p">(</span><span class="k">new</span> <span class="n">UPoint</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="n">Handle</span><span class="o">::</span><span class="n">Handle</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span><span class="o">:</span> <span class="n">up</span><span class="p">(</span><span class="k">new</span> <span class="n">UPoint</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="n">Handle</span><span class="o">::</span><span class="n">Handle</span><span class="p">(</span><span class="k">const</span> <span class="n">Point</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span><span class="o">:</span> <span class="n">up</span><span class="p">(</span><span class="k">new</span> <span class="n">UPoint</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="n">Handle</span><span class="o">::</span><span class="n">Handle</span><span class="p">(</span><span class="k">const</span> <span class="n">Handle</span><span class="o">&amp;</span> <span class="n">h</span><span class="p">)</span><span class="o">:</span> <span class="n">up</span><span class="p">(</span><span class="n">h</span><span class="p">.</span><span class="n">up</span><span class="p">)</span> <span class="p">{</span> <span class="o">++</span><span class="n">up</span><span class="o">-&gt;</span><span class="n">counter</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Handle</span><span class="o">&amp;</span>
</span><span class='line'><span class="n">Handle</span><span class="o">::</span><span class="k">operator</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">Handle</span><span class="o">&amp;</span> <span class="n">h</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">++</span><span class="p">(</span><span class="n">h</span><span class="p">.</span><span class="n">up</span><span class="o">-&gt;</span><span class="n">counter</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="p">(</span><span class="n">up</span><span class="o">-&gt;</span><span class="n">counter</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">up</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">up</span> <span class="o">=</span> <span class="n">h</span><span class="p">.</span><span class="n">up</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Handle</span><span class="o">::</span><span class="n">x</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">up</span><span class="o">-&gt;</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">Handle</span><span class="o">::</span><span class="n">y</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">up</span><span class="o">-&gt;</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Handle</span><span class="o">&amp;</span> <span class="n">Handle</span><span class="o">::</span><span class="n">x</span><span class="p">(</span><span class="kt">int</span> <span class="n">x0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">up</span><span class="o">-&gt;</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">(</span><span class="n">x0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Handle</span><span class="o">&amp;</span> <span class="n">Handle</span><span class="o">::</span><span class="n">y</span><span class="p">(</span><span class="kt">int</span> <span class="n">y0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">up</span><span class="o">-&gt;</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">(</span><span class="n">y0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Handle</span> <span class="n">h</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Handle</span> <span class="n">h2</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">h2</span><span class="p">.</span><span class="n">x</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">h</span><span class="p">.</span><span class="n">x</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;n = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this scheme, we meet a weak point of the mechanisim that we have to attach the handler onto the class (in our demo, it’s @UPoint).</p>

<p>It’s not convenient for us to use that scheme for different types of class which are inhiret from base class.</p>

<p>We sperate data and reference count by changing our handle into this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">class</span> <span class="nc">Handle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// member unchanged</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Point</span><span class="o">*</span> <span class="n">p_Point</span><span class="p">;</span>
</span><span class='line'>        <span class="n">UseCount</span> <span class="n">u</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the other and better implementation for handle.</p>

<p>In this implementation, we use a very cool teachnology – Copy On Write(COW). You may have see this teachnology in Operating System which use it to implement a very important function – <code>fork</code> .</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/**********************************************</span>
</span><span class='line'><span class="cm">    Programmer  :   EOF</span>
</span><span class='line'><span class="cm">    Date        :   2015.05.19</span>
</span><span class='line'><span class="cm">    File        :   7.3.cpp</span>
</span><span class='line'><span class="cm">    E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm">**********************************************/</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define COW</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Point</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Point</span><span class="p">()</span><span class="o">:</span> <span class="n">xval</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">yval</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">Point</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span><span class="o">:</span> <span class="n">xval</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">yval</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">x</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">xval</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">y</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">yval</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">Point</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">(</span><span class="kt">int</span> <span class="n">xv</span><span class="p">)</span> <span class="p">{</span> <span class="n">xval</span> <span class="o">=</span> <span class="n">xv</span><span class="p">;</span> <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">Point</span><span class="o">&amp;</span> <span class="n">y</span><span class="p">(</span><span class="kt">int</span> <span class="n">yv</span><span class="p">)</span> <span class="p">{</span> <span class="n">yval</span> <span class="o">=</span> <span class="n">yv</span><span class="p">;</span> <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">xval</span><span class="p">,</span> <span class="n">yval</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UseCount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">UseCount</span><span class="p">();</span>
</span><span class='line'>        <span class="n">UseCount</span><span class="p">(</span><span class="k">const</span> <span class="n">UseCount</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>        <span class="o">~</span><span class="n">UseCount</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">//another things</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">bool</span> <span class="nf">only</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="nf">reattach</span><span class="p">(</span><span class="k">const</span> <span class="n">UseCount</span><span class="o">&amp;</span> <span class="p">);</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="nf">makeonly</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">*</span> <span class="n">p_counter</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">UseCount</span><span class="o">::</span><span class="n">UseCount</span><span class="p">()</span><span class="o">:</span> <span class="n">p_counter</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">UseCount</span><span class="o">::</span><span class="n">UseCount</span><span class="p">(</span><span class="k">const</span> <span class="n">UseCount</span><span class="o">&amp;</span> <span class="n">u</span><span class="p">)</span><span class="o">:</span> <span class="n">p_counter</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="n">p_counter</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">++</span><span class="p">(</span><span class="o">*</span><span class="n">p_counter</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">UseCount</span><span class="o">::~</span><span class="n">UseCount</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">--</span><span class="p">(</span><span class="o">*</span><span class="n">p_counter</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">p_counter</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">UseCount</span><span class="o">::</span><span class="n">only</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="o">*</span><span class="n">p_counter</span> <span class="o">==</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">UseCount</span><span class="o">::</span><span class="n">reattach</span><span class="p">(</span><span class="k">const</span> <span class="n">UseCount</span><span class="o">&amp;</span> <span class="n">u</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">++</span><span class="p">(</span><span class="o">*</span><span class="n">u</span><span class="p">.</span><span class="n">p_counter</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">--*</span><span class="n">p_counter</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">p_counter</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p_counter</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="n">p_counter</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p_counter</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="n">p_counter</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">UseCount</span><span class="o">::</span><span class="n">makeonly</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">p_counter</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">--</span><span class="p">(</span><span class="o">*</span><span class="n">p_counter</span><span class="p">);</span>
</span><span class='line'>    <span class="n">p_counter</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Handle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Handle</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Handle</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Handle</span><span class="p">(</span><span class="k">const</span> <span class="n">Point</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Handle</span><span class="p">(</span><span class="k">const</span> <span class="n">Handle</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Handle</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Handle</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">~</span><span class="n">Handle</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">x</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Handle</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">y</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Handle</span><span class="o">&amp;</span> <span class="n">y</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">show_pointer</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p_Point</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// what we added</span>
</span><span class='line'>        <span class="n">Point</span> <span class="o">*</span><span class="n">p_Point</span><span class="p">;</span>
</span><span class='line'>        <span class="n">UseCount</span> <span class="n">u</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Handle</span><span class="o">::~</span><span class="n">Handle</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="n">only</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">p_Point</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   Constructor function of @Handle</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">Handle</span><span class="o">::</span><span class="n">Handle</span><span class="p">()</span><span class="o">:</span> <span class="n">p_Point</span><span class="p">(</span><span class="k">new</span> <span class="n">Point</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="n">Handle</span><span class="o">::</span><span class="n">Handle</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span><span class="o">:</span> <span class="n">p_Point</span><span class="p">(</span><span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="n">Handle</span><span class="o">::</span><span class="n">Handle</span><span class="p">(</span><span class="k">const</span> <span class="n">Point</span><span class="o">&amp;</span> <span class="n">p0</span><span class="p">)</span><span class="o">:</span> <span class="n">p_Point</span><span class="p">(</span><span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">p0</span><span class="p">))</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="n">Handle</span><span class="o">::</span><span class="n">Handle</span><span class="p">(</span><span class="k">const</span> <span class="n">Handle</span><span class="o">&amp;</span> <span class="n">h</span><span class="p">)</span><span class="o">:</span> <span class="n">u</span><span class="p">(</span><span class="n">h</span><span class="p">.</span><span class="n">u</span><span class="p">),</span> <span class="n">p_Point</span><span class="p">(</span><span class="n">h</span><span class="p">.</span><span class="n">p_Point</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Handle</span><span class="o">&amp;</span>
</span><span class='line'><span class="n">Handle</span><span class="o">::</span><span class="k">operator</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">Handle</span><span class="o">&amp;</span> <span class="n">h</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="n">reattach</span><span class="p">(</span><span class="n">h</span><span class="p">.</span><span class="n">u</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">p_Point</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p_Point</span> <span class="o">=</span> <span class="n">h</span><span class="p">.</span><span class="n">p_Point</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef COW</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Handle</span><span class="o">::</span><span class="n">x</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">p_Point</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">Handle</span><span class="o">::</span><span class="n">y</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">p_Point</span><span class="o">-&gt;</span><span class="n">y</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Handle</span><span class="o">&amp;</span> <span class="n">Handle</span><span class="o">::</span><span class="n">x</span><span class="p">(</span><span class="kt">int</span> <span class="n">x0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">p_Point</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">(</span><span class="n">x0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Handle</span><span class="o">&amp;</span> <span class="n">Handle</span><span class="o">::</span><span class="n">y</span><span class="p">(</span><span class="kt">int</span> <span class="n">y0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">p_Point</span><span class="o">-&gt;</span><span class="n">y</span><span class="p">(</span><span class="n">y0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   &quot;Copy On Write&quot;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Handle</span><span class="o">::</span><span class="n">x</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p_Point</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Handle</span><span class="o">&amp;</span> <span class="n">Handle</span><span class="o">::</span><span class="n">x</span><span class="p">(</span><span class="kt">int</span> <span class="n">x0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="n">makeonly</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">p_Point</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="o">*</span><span class="n">p_Point</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p_Point</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">(</span><span class="n">x0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Handle</span> <span class="n">h</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Handle</span> <span class="n">h2</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;before rewriting&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">h</span><span class="p">.</span><span class="n">show_pointer</span><span class="p">();</span>
</span><span class='line'>    <span class="n">h2</span><span class="p">.</span><span class="n">show_pointer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">h2</span><span class="p">.</span><span class="n">x</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;after rewriting&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">h</span><span class="p">.</span><span class="n">show_pointer</span><span class="p">();</span>
</span><span class='line'>    <span class="n">h2</span><span class="p">.</span><span class="n">show_pointer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">h</span><span class="p">.</span><span class="n">x</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;n = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will get this output :)</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_19/output.png" alt="images" /></p>

<hr />

<p>Photo by Jason Leaster in XiangTan University</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_19/scenery.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surrogate Class]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/05/18/surrogate-class/"/>
    <updated>2015-05-18T14:13:38+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/05/18/surrogate-class</id>
    <content type="html"><![CDATA[<p>Here is a question.</p>

<p>How could we design a type of class to enable it to include the classes which is different but have something in common ?</p>

<p>The solution is sorrogate</p>

<!-- more -->


<p>A demo about “Vehicle”:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">    Programmer  :  EOF</span>
</span><span class='line'><span class="cm">    Date        :  2015.05.18</span>
</span><span class='line'><span class="cm">    File        :  5.1.c</span>
</span><span class='line'><span class="cm">    E-mail      :  jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Vehicle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           It will be OK, if you don&#39;t use virtual function.</span>
</span><span class='line'><span class="cm">        double weight() const;</span>
</span><span class='line'><span class="cm">        void start();</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">double</span> <span class="n">weight</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">start</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RoadVehicle</span><span class="o">:</span> <span class="k">public</span> <span class="n">Vehicle</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AutoVehicle</span><span class="o">:</span> <span class="k">public</span> <span class="n">RoadVehicle</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Aircraft</span><span class="o">:</span> <span class="k">public</span> <span class="n">Vehicle</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Helicopter</span><span class="o">:</span> <span class="k">public</span> <span class="n">Aircraft</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vehicle</span> <span class="n">parking_lot</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you gona to compile this source file, you will got errors and warnings like this:</p>

<p>images</p>

<p>The reason why we got error is that Vihecle is a base class, member function @weight and @start is pure virtual function. With the = 0 in the declaration, we declare that that pure virtual function could without definitaion. Only the class which is inherit from base class Vihecle.</p>

<p>So, the object Vehicle is not existed and we can’t define an array of that type.</p>

<p>If we change the virtual function into non-virtual function, we could pass the compile process.</p>

<p>But it’s very dangerous.</p>

<p>Eg, if we delete all pure virtual functions in Vehicle, what would happen?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Vehicle</span> <span class="n">parking_lot</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">Automobile</span> <span class="n">x</span> <span class="o">=</span> <span class="cm">/* ... */</span>
</span><span class='line'>
</span><span class='line'><span class="n">Parking_lot</span><span class="p">[</span><span class="n">num_vihicles</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The answer is that there would be a cast on @x. @x is class Automobile which inhiret from base class Vehicle. @x will be cast into class Vehicle and then assign to object Parking_lot[num_vihicles]. In the process of casing, @x will lost anything which is not in Vehicle.</p>

<p>More explicit, the array Parking_lot is an array of class Vehicle but not Automobile.</p>

<p>It’s time release our scheme to solve that problem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/**********************************************</span>
</span><span class='line'><span class="cm">Programmer  :   EOF</span>
</span><span class='line'><span class="cm">Date        :   2015.05.18</span>
</span><span class='line'><span class="cm">File        :   5.4.cpp</span>
</span><span class='line'><span class="cm">E-mail      :   jasonleaster@gmail.com</span>
</span><span class='line'>
</span><span class='line'><span class="cm">***********************************************/</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Vehicle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           It will be OK, if you don&#39;t use virtual function.</span>
</span><span class='line'><span class="cm">        double weight() const;</span>
</span><span class='line'><span class="cm">        void start();</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">double</span> <span class="n">weight</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">start</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="n">Vehicle</span><span class="o">*</span> <span class="n">copy</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="o">~</span><span class="n">Vehicle</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span> <span class="p">;</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RoadVehicle</span><span class="o">:</span> <span class="k">public</span> <span class="n">Vehicle</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AutoVehicle</span><span class="o">:</span> <span class="k">public</span> <span class="n">RoadVehicle</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Aircraft</span><span class="o">:</span> <span class="k">public</span> <span class="n">Vehicle</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Helicopter</span><span class="o">:</span> <span class="k">public</span> <span class="n">Aircraft</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">VehicleSurrogate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Constructor</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">VehicleSurrogate</span><span class="p">();</span>
</span><span class='line'>        <span class="n">VehicleSurrogate</span><span class="p">(</span><span class="k">const</span> <span class="n">Vehicle</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">VehicleSurrogate</span><span class="p">(</span><span class="k">const</span> <span class="n">VehicleSurrogate</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           De-constructor</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="o">~</span><span class="n">VehicleSurrogate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">VehicleSurrogate</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">VehicleSurrogate</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">           Operations from class Vehicle</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">weight</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Vehicle</span><span class="o">*</span> <span class="n">vp</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">VehicleSurrogate</span><span class="o">::</span><span class="n">VehicleSurrogate</span><span class="p">()</span><span class="o">:</span> <span class="n">vp</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="n">VehicleSurrogate</span><span class="o">::</span><span class="n">VehicleSurrogate</span><span class="p">(</span><span class="k">const</span> <span class="n">Vehicle</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">vp</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">copy</span><span class="p">())</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">VehicleSurrogate</span><span class="o">::</span> <span class="o">~</span><span class="n">VehicleSurrogate</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">vp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">VehicleSurrogate</span><span class="o">::</span><span class="n">VehicleSurrogate</span> <span class="p">(</span><span class="k">const</span> <span class="n">VehicleSurrogate</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">vp</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">vp</span> <span class="o">?</span> <span class="n">v</span><span class="p">.</span><span class="n">vp</span><span class="o">-&gt;</span><span class="n">copy</span><span class="p">()</span> <span class="o">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">VehicleSurrogate</span><span class="o">&amp;</span>
</span><span class='line'><span class="n">VehicleSurrogate</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">VehicleSurrogate</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">vp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">vp</span> <span class="o">=</span> <span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">vp</span> <span class="o">?</span> <span class="n">v</span><span class="p">.</span><span class="n">vp</span><span class="o">-&gt;</span><span class="n">copy</span><span class="p">()</span> <span class="o">:</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="n">VehicleSurrogate</span><span class="o">::</span><span class="n">weight</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">vp</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="s">&quot;empty VehicleSurrogate.weight()&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">vp</span><span class="o">-&gt;</span><span class="n">weight</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">VehicleSurrogate</span><span class="o">::</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">vp</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="s">&quot;empty VehicleSurrogate.start()&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vp</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Automobile</span><span class="o">:</span> <span class="k">public</span> <span class="n">AutoVehicle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">weight</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">start</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Vehicle</span><span class="o">*</span> <span class="n">copy</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span>
</span><span class='line'><span class="n">Automobile</span><span class="o">::</span><span class="n">weight</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="n">Automobile</span><span class="o">::</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello this is automobile&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vehicle</span><span class="o">*</span>
</span><span class='line'><span class="n">Automobile</span><span class="o">::</span><span class="n">copy</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Automobile</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">   Here is our test unit.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   Attention! </span>
</span><span class='line'><span class="cm">   Never use assignment between class objects out of function block.</span>
</span><span class='line'><span class="cm">   If your assignment operation is not in function block, you must got </span>
</span><span class='line'><span class="cm">   an error from compiler.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   But it&#39;s ok, if you would like to define the varibles outside of blocks.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="n">VehicleSurrogate</span> <span class="n">parking_lot</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">Automobile</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">num_vehicles</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">       These two assignment statement are doing the same thing.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">parking_lot</span><span class="p">[</span><span class="n">num_vehicles</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//parking_lot[num_vehicles++] = VehicleSurrogate(x);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may noticed that the key point of our solution is to use the class to represent a concept.</p>

<p>We defined a contructor without any parameters, so we define an array of this type of class.</p>

<p>If you have understand what we have done, you may feel excited. Yes, we create a container which could be used to represent any type of classes which are have relationships of inhiretance.</p>

<p><code>parking_lot[num_vehicles++] = x;</code> is equal to <code>parking_lot[num_vehicles++] = VehicleSurrogate(x);</code></p>

<p>This statement create a copy of object @x and attach @VehicleSurrogate onto object @x. If we destory elements in @parking_lot, the corresponding copy will be deleted.</p>

<p><em>Finally, you have know that why this techonology named <strong>Surrogate</strong>.</em></p>

<p>The objects in this type of class could be used to represent others class objects which are have completly relationships of inhiretance.</p>

<hr />

<p>Margaret Heafield Hamilton who is a very famous computer scientist, systems engineer, and business owner. Picture blew there is that hamilton during the Apollo Program.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_18/margaret.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Should We Use C++]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/05/15/why-should-we-use-c-plus-plus/"/>
    <updated>2015-05-15T22:56:11+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/05/15/why-should-we-use-c-plus-plus</id>
    <content type="html"><![CDATA[<p>After reading the chapter 0, 1 and 2 of <code>&lt;&lt; Reminations on C++ &gt;&gt;</code>, I try to make myself more sober and do some summaries for this question.</p>

<p><strong>Why should we use C++ ?</strong></p>

<p>What I want to do is to give the answer in advance and then give the reason.</p>

<p>Here we go.</p>

<!-- more -->


<p>In OOP (Object Oriented Programming), what we should do is focus on data but not the process. The key concept in C++ is class which is use for abstraction. Wait… what we use it for ? what’s that we do abstract operation on? The answer is the data which we used to abstract objects or concepts.</p>

<p>Abstraction is a very powerful operation to help us focus on our question and solve our problems.</p>

<p>What means abstraction, never afraid it, it just a operation that we focus on things that we are interesting and ignore something not important but do existed.</p>

<p>It isn’t totally new things, C++ will form us to treat thing more pragmatism. In daily life, custom’s requirements mostly change when time flows. So we have to solve this big problem in a gentle way. You do not need to rewrite all your code which you have writed but what you should do is to design your code in pragmatism.</p>

<p>Here is a demonstration for how to design your code.</p>

<p>This code was writed in C but not C++. And the purpose of this code is explicit. It use two function @trace_on and @trace_off to control the function @trace will output the string which pointer @s point to onto the standary output stream.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">noisy</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">trace</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">noisy</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">trace_on</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">noisy</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">trace_off</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">noisy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">trace</span><span class="p">(</span><span class="s">&quot;begin main()</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// the body of main function</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trace</span><span class="p">(</span><span class="s">&quot;end main()</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Weakness:</p>

<p>You may have noticed that this code can only output the string into the standary output stream. If you want to modify this code and enable it have the ability to output into others stream, you may do a lot of work to meet your requirement.</p>

<p>Everyone could call @trace_on and @trace_off, it may not what we want if we want do a good job on encapsulation. The reason we want our code more encapsulated is that we want our code more robust and modularity. This great mind helps us to keep complex things in a simple way. We solve a big problem in some little sub-problem. Our contribution is how to design our code and enble it more encapsulation.</p>

<p>C++ do a good job on local functions which C don’t support. Here is a demo. The function @print in class Trace can only be called by class Trace object like this t.print(), you can’t call it individually. If there is another different one implementation of function @print in others class, they won’t interfere each other. This is the encapsulation what we want.</p>

<p>This is what we promoted in C++.</p>

<p>If you want to output into different stream, just use different construct function is OK. If you want to close the output, it’s convinent to call the member function @off.</p>

<p>All work we do is for only two things</p>

<ul>
<li>int noisy</li>
<li>FILE *f</li>
</ul>


<p>Yes, the data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nf">Trace</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Trace</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">noisy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="n">f</span> <span class="o">=</span> <span class="n">stdout</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Trace</span><span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span> <span class="n">ff</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">noisy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="n">f</span> <span class="o">=</span> <span class="n">ff</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">noisy</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">fprintf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">on</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">noisy</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="n">off</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">noisy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">noisy</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Trace</span> <span class="n">t</span><span class="p">(</span><span class="n">stderr</span><span class="p">);</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;begin main()</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The body of main function</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;end main()</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>Photo by Jason Leaster in Changde, China.</p>

<p><img src="http://jasonleaster.github.io/images/img_for_2015_05_16/bridge.png" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Means Freedom ?]]></title>
    <link href="http://jasonleaster.github.io/blog/2015/05/09/what-means-freedom/"/>
    <updated>2015-05-09T00:46:36+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2015/05/09/what-means-freedom</id>
    <content type="html"><![CDATA[<p>What does it mean to be free? Free is being able to choose. To choose your own space to be in. To form your surrounding in a way that will make you to take out the best of you. Free is to say no. Get your freedom &hellip;</p>

<p><img src="http://jasonleaster.github.io/images/img_for_What_means_freedom/freedom.png" alt="images" /></p>
]]></content>
  </entry>
  
</feed>
