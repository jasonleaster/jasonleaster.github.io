<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EOF</title>
  <subtitle>In this life, be myself!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jasonleaster.github.io/"/>
  <updated>2017-05-22T15:17:08.281Z</updated>
  <id>http://jasonleaster.github.io/</id>
  
  <author>
    <name>Jason Leaster</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Design Pattern</title>
    <link href="http://jasonleaster.github.io/2017/04/16/2017-04-16-Design-Pattern/"/>
    <id>http://jasonleaster.github.io/2017/04/16/2017-04-16-Design-Pattern/</id>
    <published>2017-04-16T03:05:59.000Z</published>
    <updated>2017-05-22T15:17:08.281Z</updated>
    
    <content type="html"><![CDATA[<p>Definition of Design Pattern:</p>
<blockquote>
<p>In software engineering, a software design pattern is a <strong>general reusable solution</strong> to a commonly occurring problem within a given context in software design. – WikiPedia.</p>
</blockquote>
<p>Depends on abstract model but not implementation details.</p>
<h3 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h3><p><img src="/images/img_for_2017_04_16/Singleton_UML_class_diagram.svg.png" alt="images"></p>
<p>Applicable scene:<br><em>We should use this design pattern when we will get trouble if we create many instances of a class. It’s enough for us to create only one instance of a class like Log Manager, utils, thread pool, cache manager, configure files manager and so on.</em></p>
<p>Targt:<br><em>We could use this pattern to restricts the instantiation of a class to one object.</em></p>
<p>An implementation of the singleton pattern must:</p>
<ul>
<li>ensure that only one instance of the singleton class ever exists</li>
<li>provide global access to that instance.</li>
</ul>
<a id="more"></a>
<p>There also have two different way to construct this pattern.</p>
<p>The first way:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The other way(Lazy Initialization):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">		    <span class="keyword">synchronized</span>(Singleton.class) &#123;</div><div class="line">	            	<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">		     	    instance = <span class="keyword">new</span> Singleton();</div><div class="line">		    	&#125;</div><div class="line">		    &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Example in real project:<br>I used single pattern to implement the <code>JedisPoolUtils</code> class. This class helps me to manage a Jedis pool and binding lots of helpful functions in this tool class.<br><a href="https://github.com/jasonleaster/TheWayToJava/blob/master/TinyTools/src/main/java/org/jasonleaster/utils/cache/JedisPoolUtils.java" target="_blank" rel="external">JedisPoolUtils.java</a></p>
<h3 id="Template-Method-Pattern"><a href="#Template-Method-Pattern" class="headerlink" title="Template Method Pattern"></a>Template Method Pattern</h3><p>Definition Of this pattern:<br><em>Template method pattern defines the program skeleton of an algorithm. It define a base class and allow the sub-class to override or implement some methods in the base class. The sub-class can redefine some special steps in the algorithm and don’t need to modify the architecture of the algorithm.</em></p>
<p><img src="/images/img_for_2017_04_16/Template_Method_UML_class_diagram.svg.png" alt="images"></p>
<p>Applicable scene:</p>
<ol>
<li>Operations and procdure have common logical. </li>
<li>Extract common codes into base class when you refactor your implementation.  </li>
<li>The target of algorithm is clearly.</li>
</ol>
<p>Key elements to implement this pattern：</p>
<ul>
<li><p>Abstract Base Class<br>a. Basic Methods. To different sub class, basic methods are same to them.<br>b. Abstract Methods or Callback Function. It know the principle but don’t know the detail of implementation.<br>c. Hook function. It only supply a default implementation in the base class, which can make sub-class more flexiable.<br>d. Template Method. According to the need of subclass (which means different needs of bussiness request)，this method define an algorithm framework for all sub-class. It must be declared as <code>final</code>. Sub-class can replace the <code>Call back function</code> and <code>Hook functio</code> of base class but can’t replace another methods of base class.</p>
</li>
<li><p>Concrete Sub Class<br>a. Implement the call back function which is inherited from base class.<br>b. The optional hook functions.</p>
</li>
</ul>
<p>Prepare a base class and implement some basic common methods for different sub-class. Then, just leave some abstract methods for sub-class to implement. Finally, the template method function combine all element into a template method(algorithm).</p>
<p>Advantages:</p>
<ul>
<li>Encapsulation. This pattern encapsulate a algorithm framework and put the core part of the algorithm into a final method of base class. Lots of details are shielded.</li>
<li>Reuse of codes. Avoid to write duplicate codes.</li>
<li>Easy to maintain. All framework done :)</li>
</ul>
<p>Disadvantages：</p>
<ul>
<li>Inheritance makes code coupling tightly.</li>
</ul>
<p>Example in real project:<br><a href="https://github.com/jasonleaster/TheWayToJava/blob/master/TinyTools/src/main/java/org/jasonleaster/utils/cache/JedisPoolUtils.java" target="_blank" rel="external">JedisPoolUtils.java</a><br>The inner class <code>Executor</code> is the base class of template method pattern and the different anonymous class is the sub-class which extend <code>Executor</code> and override the abstract method. <code>getResult()</code> is the template method.</p>
<h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>A proxy is a wrapper or agent object that is being called by the client to access the real serving object behind the scenes.<br>For the client, usage of a proxy object is similar to using the real object, because both implement the same interface.</p>
<p><img src="/images/img_for_2017_04_16/Proxy_pattern_diagram.svg.png" alt="images"></p>
<h4 id="Static-Proxy"><a href="#Static-Proxy" class="headerlink" title="Static Proxy"></a>Static Proxy</h4><h4 id="Dynamic-Proxy"><a href="#Dynamic-Proxy" class="headerlink" title="Dynamic Proxy"></a>Dynamic Proxy</h4><p>In contrast with static proxy, the dynamic proxy generates bytecode which requires Java reflection at runtime. With dynamic you need not crate the proxy class, which can lead to more convenience.</p>
<h3 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h3><p>Applicable scene:</p>
<ul>
<li>有一组类似的对象需要创建</li>
<li>在编码时不能预见需要创建哪种类的实例</li>
<li>系统需要考虑扩展性，不应依赖于产品类实例如何被创建、组合和表达的细节</li>
</ul>
<p>目的:<br>   定义一个接口来创建对象，但是让子类来决定哪些类需要被实例化。工厂方法把实例化的工作推迟到子类中去实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//几个Button类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span></span>&#123;<span class="comment">/* ...*/</span>&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WinButton</span> <span class="keyword">extends</span> <span class="title">Button</span></span>&#123;<span class="comment">/* ...*/</span>&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacButton</span> <span class="keyword">extends</span> <span class="title">Button</span></span>&#123;<span class="comment">/* ...*/</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">//它们的工厂类</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ButtonFactory</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> Button <span class="title">createButton</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WinButtonFactory</span> <span class="keyword">implements</span> <span class="title">ButtonFactory</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WinButton();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacButtonFactory</span> <span class="keyword">implements</span> <span class="title">ButtonFactory</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MacButton();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><h4 id="工厂模式和抽象工厂模式的对比"><a href="#工厂模式和抽象工厂模式的对比" class="headerlink" title="工厂模式和抽象工厂模式的对比"></a>工厂模式和抽象工厂模式的对比</h4><ul>
<li><small>工厂模式是一个极端情况的抽象工厂模式，而抽象工厂模式可以看成是工厂模式的推广</small></li>
<li><small>工厂模式用来创建一个产品的等级结构，而抽象工厂模式是用来创建多个产品的等级结构</small></li>
<li><small>工厂模式只有一个抽象产品类，而抽象工厂模式有多个抽象产品类</small></li>
</ul>
<h3 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式 Observer"></a>观察者模式 Observer</h3><p>定义：<br>    定义对象间的一种 <strong>一对多的依赖关系</strong>。当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。</p>
<p>目标与观察者之间的关系：<br>一个目标可以对应多个观察者，但是如果要实现多个目标对应多个观察者的时候，观察者应该为不同的目标提供不同的更新接口，这样实现才能简洁易懂，而不要只提供一个接口并被迫在该接口内部判断各个不同的目标。</p>
<p>适用场景：<br>触发联动。</p>
<ul>
<li>当一个抽象模型有两个方面，其中一个方面的操作依赖于另外一个方面的状态变化</li>
<li>如果在更改一个对象的时候，需要同时连带改动其他对象，而且不知道究竟应该有多少对象需要被连带改变</li>
<li>当一个对象必须通知其他的对象，但是你有希望这个对象和其他被通知的对象是松散耦合的。</li>
</ul>
<p>单向依赖：<br>只有观察者依赖目标，而不是目标依赖观察者。他们之间的联系掌握在目标手中，只有目标知道什么时候更新观察者的信息，在整个过程中，观察者是被动的，等待目标对其更新。</p>
<p>命名建议：<br>观察者模式又称发布订阅模式。</p>
<ul>
<li>目标接口的定义，建议在名称后面跟Subject</li>
<li>观察者接口的定义，建议在名称后面跟Observer</li>
<li>观察者接口的更新方法，建议名称后面跟Update</li>
</ul>
<p>触发通知机制：<br>一定要注意触发通知的时机。一般是在完成了目标属性”状态”的维护之后，触发更新。不能先通知(notify)后更新，否则会导致目标和观察者状态属性的不一致。</p>
<p>通知的顺序：<br>目标通知观察者的顺序是不确定的，程序实现不应该依赖目标通知观察者更新的顺序。</p>
<h4 id="推模型"><a href="#推模型" class="headerlink" title="推模型"></a>推模型</h4><p>目标对象主动向观察者推送目标的详细信息，推送的信息通常是目标对象的全部或部分数据</p>
<h4 id="拉模型"><a href="#拉模型" class="headerlink" title="拉模型"></a>拉模型</h4><p>目标对象在通知观察者的时候，只传递少量的信息。如果观察者需要更具体的信息，由观察者主动到目标对象中获取，相当于是观察者从目标对象中拉去数据。一般这种模型的实现中，会把目标对象自身通过update方法传递给观察者。</p>
<p>观察者模式的优缺点：<br>优点：</p>
<ul>
<li>观察者模式实现了观察者和目标之间抽象耦合，只是在抽象层面耦合，而不是具体实现</li>
<li>观察者模式实现了动态联动</li>
<li>观察者模式支持广播通信<br>缺点：</li>
<li>可能引起无谓的操作（观察者模式实质上是一种广播通信。调用者可能只想某个观察者接受信息，但是观察者模式会使得所有观察者都接受到最新的信息）</li>
</ul>
<h3 id="适配器-Adapter"><a href="#适配器-Adapter" class="headerlink" title="适配器 Adapter"></a>适配器 Adapter</h3><p>适配器模式是为了解决不兼容不匹配的问题而引入的，有时也称包装(wrapper)。</p>
<p>定义：<br>    适配器模式将一个雷达接口，转换成客户期望的另外一个接口。使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Definition of Design Pattern:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In software engineering, a software design pattern is a &lt;strong&gt;general reusable solution&lt;/strong&gt; to a commonly occurring problem within a given context in software design. – WikiPedia.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Depends on abstract model but not implementation details.&lt;/p&gt;
&lt;h3 id=&quot;Singleton-Pattern&quot;&gt;&lt;a href=&quot;#Singleton-Pattern&quot; class=&quot;headerlink&quot; title=&quot;Singleton Pattern&quot;&gt;&lt;/a&gt;Singleton Pattern&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/img_for_2017_04_16/Singleton_UML_class_diagram.svg.png&quot; alt=&quot;images&quot;&gt;&lt;/p&gt;
&lt;p&gt;Applicable scene:&lt;br&gt;&lt;em&gt;We should use this design pattern when we will get trouble if we create many instances of a class. It’s enough for us to create only one instance of a class like Log Manager, utils, thread pool, cache manager, configure files manager and so on.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Targt:&lt;br&gt;&lt;em&gt;We could use this pattern to restricts the instantiation of a class to one object.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An implementation of the singleton pattern must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ensure that only one instance of the singleton class ever exists&lt;/li&gt;
&lt;li&gt;provide global access to that instance.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://jasonleaster.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>GoBang -- A practice with Artificial Intellijence</title>
    <link href="http://jasonleaster.github.io/2017/03/12/2017-03-12-GoBang-A-practice-with-AI/"/>
    <id>http://jasonleaster.github.io/2017/03/12/2017-03-12-GoBang-A-practice-with-AI/</id>
    <published>2017-03-12T02:11:17.000Z</published>
    <updated>2017-05-21T13:27:23.769Z</updated>
    
    <content type="html"><![CDATA[<p>To be continued [&gt;_&lt;]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;To be continued [&amp;gt;_&amp;lt;]&lt;/p&gt;

    
    </summary>
    
    
      <category term="AI" scheme="http://jasonleaster.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Good Practices with MySQL</title>
    <link href="http://jasonleaster.github.io/2017/01/12/2017-01-12-good-practices-with-mysql/"/>
    <id>http://jasonleaster.github.io/2017/01/12/2017-01-12-good-practices-with-mysql/</id>
    <published>2017-01-12T13:48:18.000Z</published>
    <updated>2017-05-21T09:47:45.060Z</updated>
    
    <content type="html"><![CDATA[<p>Here are some different solutions with MyBatis and MySQL.</p>
<p>Way to profile your statements:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set profiling=1;</div><div class="line">mysql&gt; select filed from table;</div><div class="line">mysql&gt; ... more mysql statements and operation on MySQL ...</div><div class="line">mysql&gt; show profiles;</div></pre></td></tr></table></figure>
<p>You can also profile you SQL statements with the help of the IDE. In MySQL-Workbench, the duration time is how long the statment excuted in the MySQL-Server and the fetch time is how long the results are transformed in the network.</p>
<a id="more"></a>
<h3 id="Insert-items-into-a-table-with-MyBatis-in-Java"><a href="#Insert-items-into-a-table-with-MyBatis-in-Java" class="headerlink" title="Insert items into a table with MyBatis in Java"></a>Insert items into a table with MyBatis in Java</h3><ul>
<li>Proposal soluton 1</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Bad practice --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"sims.model.User"</span> &gt;</span></div><div class="line">insert into users (email, username, password, userType)</div><div class="line">values (#&#123;email,jdbcType=VARCHAR&#125;, #&#123;username,jdbcType=VARCHAR&#125;,</div><div class="line"> #&#123;password,jdbcType=VARCHAR&#125;, #&#123;userType, jdbcType=INTEGER&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>Proposal soluton 2</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertUsers</span><span class="params">(@Param(<span class="string">"users"</span>)</span> List&lt;User&gt; users)</span>;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Good practice</span></div><div class="line">    Proposal 1:</div><div class="line">    Use INSERT IGNORE rather than INSERT. If a record doesn't duplicate</div><div class="line">    an existing record, MySQL inserts it as usual. If the record is a </div><div class="line">    duplicate, the IGNORE keyword tells MySQL to discard it silently </div><div class="line">    without generating an error.</div><div class="line"></div><div class="line">    Proposal 2:</div><div class="line">    Use REPLACE rather than INSERT. If the record is new, it's inserted</div><div class="line">    just as with INSERT. If it's a duplicate, the new record replaces the</div><div class="line">    old one</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUsers"</span>&gt;</span></div><div class="line">    insert ignore into users (email, username, password, userType)</div><div class="line">    values</div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"users"</span> <span class="attr">item</span>=<span class="string">"element"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">"),</span></span></div><div class="line">         ("  <span class="attr">close</span>=<span class="string">")"</span>&gt;</div><div class="line">        #&#123;element.email,jdbcType=VARCHAR&#125;,</div><div class="line">        #&#123;element.username,jdbcType=VARCHAR&#125;,</div><div class="line">        #&#123;element.password,jdbcType=VARCHAR&#125;,</div><div class="line">        #&#123;element.userType, jdbcType=INTEGER&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Please pay attention to those guy who write database access statements in a for-loop. They are trouble maker :)</p>
<p>Try your best to avoid to do DAO operation in for-loop.</p>
<h3 id="Performance-Comparision"><a href="#Performance-Comparision" class="headerlink" title="Performance Comparision"></a>Performance Comparision</h3><p>Operation :  </p>
<blockquote>
<p>insert 100 items into the table. </p>
</blockquote>
<p>Console output:  </p>
<blockquote>
<p>Solution One cost time: 9667 ms<br>Solution Two cost time: 495  ms</p>
</blockquote>
<p>With the help of MyBatis, we can insert multi items in a list into database, but not insert them one by one. ( Hibernate could do the same thing)</p>
<h3 id="Tuning-MySQL-my-cnf"><a href="#Tuning-MySQL-my-cnf" class="headerlink" title="Tuning MySQL: my.cnf"></a>Tuning MySQL: my.cnf</h3><p>Sometimes, you find that the query statments are very slow and the expected return data are not more than 100k rows.</p>
<p>You may try to tune your MySQL server and modify the <code>my.cnf</code> file which is loaded by MySQL for initialization. Familiar with this confiuration file will help you to avoid this common pitfall.</p>
<h4 id="Basic-settings"><a href="#Basic-settings" class="headerlink" title="Basic settings"></a>Basic settings</h4><p>Here are 3 MySQL performance tuning settings that you should always look at. If you do not, you are very likely to run into problems very quickly.</p>
<p><code>innodb_buffer_pool_size</code>: this is the #1 setting to look at for any installation using InnoDB. The buffer pool is where data and indexes are cached: having it as large as possible will ensure you use memory and not disks for most read operations. Typical values are 5-6GB (8GB RAM), 20-25GB (32GB RAM), 100-120GB (128GB RAM).</p>
<p><code>innodb_log_file_size</code>: this is the size of the redo logs. The redo logs are used to make sure writes are fast and durable and also during crash recovery. Up to MySQL 5.1, it was hard to adjust, as you wanted both large redo logs for good performance and small redo logs for fast crash recovery. Fortunately crash recovery performance has improved a lot since MySQL 5.5 so you can now have good write performance and fast crash recovery. Until MySQL 5.5 the total redo log size was limited to 4GB (the default is to have 2 log files). This has been lifted in MySQL 5.6.</p>
<p>Starting with innodb_log_file_size = 512M (giving 1GB of redo logs) should give you plenty of room for writes. If you know your application is write-intensive and you are using MySQL 5.6, you can start with innodb_log_file_size = 4G.</p>
<p><code>max_connections</code>: if you are often facing the ‘Too many connections’ error, max_connections is too low. It is very frequent that because the application does not close connections to the database correctly, you need much more than the default 151 connections. The main drawback of high values for max_connections (like 1000 or more) is that the server will become unresponsive if for any reason it has to run 1000 or more active transactions. Using a connection pool at the application level or a thread pool at the MySQL level can help here.</p>
<h3 id="Use-NOT-NULL-If-You-Can"><a href="#Use-NOT-NULL-If-You-Can" class="headerlink" title="Use NOT NULL If You Can"></a>Use NOT NULL If You Can</h3><p>Unless you have a very specific reason to use a NULL value, you should always set your columns as NOT NULL.</p>
<p>First of all, ask yourself if there is any difference between having an empty string value vs. a NULL value (for INT fields: 0 vs. NULL). If there is no reason to have both, you do not need a NULL field. (Did you know that Oracle considers NULL and empty string as being the same?)</p>
<p>NULL columns require additional space and they can add complexity to your comparison statements. Just avoid them when you can. However, I understand some people might have very specific reasons to have NULL values, which is not always a bad thing.</p>
<p>From MySQL docs:</p>
<blockquote>
<p>“NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.”</p>
</blockquote>
<p>**If you have do query operation on the table which are created by someone(maybe it’s yourself). It hasn’t a primary key and never set NOT NULL constraint with filed.</p>
<p>I will recommend you to use <strong>having id is not NULL</strong> clause to filter the NULL rows which are selected by your query statments.</p>
<p>**</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here are some different solutions with MyBatis and MySQL.&lt;/p&gt;
&lt;p&gt;Way to profile your statements:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; set profiling=1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; select filed from table;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; ... more mysql statements and operation on MySQL ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; show profiles;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You can also profile you SQL statements with the help of the IDE. In MySQL-Workbench, the duration time is how long the statment excuted in the MySQL-Server and the fetch time is how long the results are transformed in the network.&lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="http://jasonleaster.github.io/categories/Database/"/>
    
    
      <category term="MySQL" scheme="http://jasonleaster.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Summary For 2016 Year</title>
    <link href="http://jasonleaster.github.io/2017/01/11/2017-01-11-summary-for-2016-year/"/>
    <id>http://jasonleaster.github.io/2017/01/11/2017-01-11-summary-for-2016-year/</id>
    <published>2017-01-11T14:07:11.000Z</published>
    <updated>2017-02-26T12:39:43.695Z</updated>
    
    <content type="html"><![CDATA[<p>Looking back this year, for leaving school and beginning to my career life, there have many changes, twists and turns in my life. There also have many moved and warm moments in this year. At the last day of this year, they all gone.</p>
<a id="more"></a>
<p>Last year, this time, I was busy in my school for finishing my graduation project “E-Face”. Particulary, I want to say thanks to my teacher Hongzhong Tang. Without her encouragement, I can’t do it well. It amost costs my half year time to finish this project.</p>
<p>Daily, I read paper about face detection. I pay a lot of time to code, debug and verify my new idea about the implementation.</p>
<p>It’s about March and April. One day, my father call me and tell me that he felt not good. After the short call, I knew he need a surgery. Before the day when he has been performed the operation, I go back home to accompany him. He spent about six hours to finish his operation. During that time, I waited out sideof the door of the OR(operating room) all the time. After that, I stay at home for a month to accompany him and help him to recover.</p>
<p>June, thesis defense, take the diploma,  pack up and quit. I don’t feel happy for graduation nor sad for leaving. I just leave the place where I think it’s like a naive garden. From my perspective, school like a cage. They have a lot of things in common. Teenagers can’t adapt to industrial society, so adult set many rules for them and keep them in a place to avoid to be disturbed by the little guys.</p>
<p>Carrying heavy suitcases, it took me about 12-hours to come to the destination – ShenZhen, which everybody talk about.</p>
<p>Maybe, it’s for my shallow. I feel nothing different with my hometown but the high prices of daily necessities and the congested road. </p>
<p>It’s already half year ago but I can remeber that clearyly. I was impressed to remember that we lived in a narrow hotel room<br> and count how many moneys we have to spent everyday. We are anxious to rent a room but not to live in the hotel for more days. It’s too expensive for two graduate. Looking at the platfond, we sign with feeling how hard the life is. </p>
<p>I think I will remember the first night forever when we came to ShenZhen. We were hungry and go outside to the roadside with my girl friend to eat fried rice with eggs.</p>
<p>For one more month, I finished the induction process and she also found a job. We got start the “loop” of work, get off work, eat and sleep. There are lots of unstable factors in my life but it’s not that bad, isn’t it?</p>
<p>Thanks for my family and annabella. Without them, I can’t tell how can I get through this time.</p>
<p>This week, we get two tickets to get back home for Chinese New Year, which means that 2016 is ending. Finally, I wish my family and annabella’s family is health. Annabella will get a good job and stay with me as always.</p>
<p>2016 is ending, 2017 is coming. Wish you are becoming someone who you want to be. EOF.</p>
<blockquote>
<p>Be wrong or right<br>Sometimes you’ve got to sacrifice the things you like<br>But I was born to try<br>No point in talking what you should have been<br>And regretting the things that went on<br>Life’s full of mistakes, destinies and fate<br>Remove the clouds look at the bigger picture<br>And all that you see is me<br>And all I truly believe<br>     – &lt;&lt; Born To Try &gt;&gt; Delta Goodrem</p>
</blockquote>
<hr>
<p>Photo by Annabella.</p>
<p><img src="/images/img_for_2017_01/MeAtShenZhenNorthStation.jpg" width="400" height="300" align="middle"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Looking back this year, for leaving school and beginning to my career life, there have many changes, twists and turns in my life. There also have many moved and warm moments in this year. At the last day of this year, they all gone.&lt;/p&gt;
    
    </summary>
    
      <category term="essay" scheme="http://jasonleaster.github.io/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>The brief introduction to the architecture of JUnit4</title>
    <link href="http://jasonleaster.github.io/2016/09/11/2016-09-11-the-brief-introduction-to-the-archtecture-of-junit4/"/>
    <id>http://jasonleaster.github.io/2016/09/11/2016-09-11-the-brief-introduction-to-the-archtecture-of-junit4/</id>
    <published>2016-09-11T07:44:46.000Z</published>
    <updated>2017-02-27T16:10:05.568Z</updated>
    
    <content type="html"><![CDATA[<p>JUnit is a good framework for developer to finish testing tasks. I also use JUnit to help me with testing. From the perspective of a good programmer, the source code of JUnit is also a wonderful example to learnhow to write more good style code in Java.</p>
<p>In this article, I would like to try my best to share my view of JUnit.The version of JUnit what I talked is JUnit4 in this article.</p>
<a id="more"></a>
<h3 id="How-JUnit-start-to-run"><a href="#How-JUnit-start-to-run" class="headerlink" title="How JUnit start to run?"></a>How JUnit start to run?</h3><p>Most Java developers work under the IDE like eclipse, Intellij IDEA and so on. It’s no doubt that the success of Java can’t without the development of IDE in this years.<br>But there also will be a satire that some Java programmer just use this framework and have no idea about how it works.</p>
<p>Here is a simple demo for how to use JUnit to test your program.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// MyTest.java</span></div><div class="line"><span class="keyword">package</span> org.junit;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"before"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunc</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"testFunc"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@After</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"after"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>I referenced the point of someone’s view about Java programmer.</p>
<blockquote>
<p>“They press down the green buttion in their IDE, and the testing program just run. There even does’t show a main() function in their testing program. They also don’t think why it works and how it can run successfully? Why java program can run without a main() function? It’s a magic? No, please think more deeply and don’t make your self look like an innocent beginner.”</p>
</blockquote>
<p>With the help of IDE and framework, it’s more and more easy for the developer to finish their project.<br>It <strong>DO</strong> help the developer to accelerate the process to finish a project. It also hide some basical information about how program start to run. </p>
<p>With the IDE, you still a programmer but not a magician :)</p>
<ul>
<li>Why <code>MyTest.java</code> could run without main() function? </li>
<li>Why the program will run with just pressing the button in your IDE? </li>
</ul>
<p><img src="/images/img_for_2016_09/IntellijJUnitCallFrame.jpg" align="middle"></p>
<p>The reason is that IDE will integrated with some plugin. Some GUI button are corelated with that plugin.(Eg. Intellij IDEA have a junit-plugin for JUnit Framework). After you press the button, the plugin start to run and it will call the entrance of the framework for you. You can see that in the image, the first function called by java is <code>JUnitStarter</code> which is on package <code>com.intellij</code>. Finally, it will enter in <code>org.junit</code> which is the JUnit framework package.</p>
<p>You can also see the output of the console in your IDE. You can find that there is commands like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">D:\JAVA_ENV\jdk1.8\bin\java -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:58641,suspend=y,server=n -ea -Dfile.encoding=GBK -classpath &quot;D:\IntelliJ IDEA\lib\idea_rt.jar;    ... A LOT OF JAR ...     E:\Java Framework Source\junit4-master\out\production\main&quot; com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 org.junit.MyTest</div></pre></td></tr></table></figure>
<p>For simplicity, the commands over there can be simplied into the below procesure under the CMD or Linux-Shell.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Compile:</div><div class="line">    javac -cp path/to/testclasses:path/to/junit-4.8.2.jar MyTest.java</div><div class="line"></div><div class="line">Run:</div><div class="line">    java  -cp path/to/testclasses:path/to/junit-4.8.2.jar org.junit.JUnitCore org.junit.MyTest</div></pre></td></tr></table></figure>
<p>Now, the answer is clear that IDE just use a plugin to call the entrance of the framework instead of calling it by yourself under the OS console.</p>
<p>If you use <code>JUnitCore</code> to run your test, <code>JUnitCore</code> then uses reflection to find an appropriate Runner for the passed test classes. One step here is to look for a @RunWith annotation on the test class. If no other Runner is found the default runner (BlockJUnit4ClassRunner) will be used. The Runner will be instantiated and the test class will be passed to the Runner. Now it is Job of the Runner to instantiate and run the passed test class.</p>
<p>Let’s start to look the architecture of the JUnit Framework.</p>
<h3 id="The-high-level-view-of-JUnit"><a href="#The-high-level-view-of-JUnit" class="headerlink" title="The high level view of JUnit"></a>The high level view of JUnit</h3><p>There are two main abstract model for JUnit framework. The one of it is the abstraction of test unit.<br>Each test unit has its own scope, name, initial state and the way how to release the resouces which are allocated during the testing time.</p>
<p>For JUnit4, it use this inheritance model to represent that concept.</p>
<p>Review the skeleton of <code>MyTest.java</code>, the test routine is around the test class. Here is the class <code>MyTest</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// MyTest.java</span></div><div class="line"><span class="keyword">package</span> org.junit;</div><div class="line">...</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunc</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"testFunc"</span>);</div><div class="line">    &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p><img src="/images/img_for_2016_09/JUnitInheritance2.jpg" alt="images"></p>
<p>With the annotation, the framework use the reflection to get the meta-information of the test unit. </p>
<p>A class has it’s own member so JUnit use abstract class <code>FrameworkMember</code> to represent it.<br>Class member can be classify into <code>field</code> and <code>method</code>.<br>So JUnit use class <code>FrameworkFiled</code> and <code>FrameworkMethod</code> which inherite from <code>FrameworkMember</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrameworkField</span> <span class="keyword">extends</span> <span class="title">FrameworkMember</span>&lt;<span class="title">FrameworkField</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Field field;</div><div class="line"></div><div class="line">        ... ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Represents a method on a test class to be invoked at the appropriate point in</div><div class="line"> * test execution. These methods are usually marked with an annotation (such as</div><div class="line"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Test</span>&#125;, &#123;<span class="doctag">@code</span> <span class="doctag">@Before</span>&#125;, &#123;<span class="doctag">@code</span> <span class="doctag">@After</span>&#125;, &#123;<span class="doctag">@code</span> <span class="doctag">@BeforeClass</span>&#125;,</div><div class="line"> * &#123;<span class="doctag">@code</span> <span class="doctag">@AfterClass</span>&#125;, etc.)</div><div class="line"> *</div><div class="line"> * <span class="doctag">@since</span> 4.5</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrameworkMethod</span> <span class="keyword">extends</span> <span class="title">FrameworkMember</span>&lt;<span class="title">FrameworkMethod</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Method method;</div><div class="line"></div><div class="line">        ... ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>FrameworkField</code> maintain a private object of class <code>Field</code> which is used in <strong>reflection</strong>. So do <code>FrameworkMethod</code>.</p>
<p>JUnit tests are started using the <code>JUnitCore</code> class. It will can runners to finish the task.<br>The other important heritance show below there.</p>
<p><img src="/images/img_for_2016_09/JUnitInheritance1.jpg" alt="images"></p>
<p>The <code>public class AllDefaultPossibilitiesBuilder extends RunnerBuilder</code>will be called and try to find a runner to run the test class which is written by user.</p>
<p>Finally, <code>BlockJUnit4ClassRunner</code> will be called.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Implements the JUnit 4 standard test case class model, as defined by th</div><div class="line"> * annotations in the org.junit package. </div><div class="line"></div><div class="line"> * It has a much simpler implementation based on &#123;<span class="doctag">@link</span> Statement&#125;s,</div><div class="line"> * allowing new operations to be inserted into the appropriate point in the</div><div class="line"> * execution flow.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockJUnit4ClassRunner</span> <span class="keyword">extends</span> <span class="title">ParentRunner</span>&lt;<span class="title">FrameworkMethod</span>&gt; </span>&#123;</div><div class="line">     </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;FrameworkMethod, Description&gt; methodDescriptions = <span class="keyword">new</span> ConcurrentHashMap&lt;FrameworkMethod, Description&gt;();</div><div class="line"></div><div class="line">    ... ...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> List&lt;FrameworkMethod&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// scan test class for methonds annotated with @Test</span></div><div class="line">    &#125;</div><div class="line">       </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Description <span class="title">describeChild</span><span class="params">(FrameworkMethod method)</span> </span>&#123;</div><div class="line">        <span class="comment">// create Description based on method name</span></div><div class="line">    &#125;</div><div class="line">         </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">runChild</span><span class="params">(<span class="keyword">final</span> FrameworkMethod method, RunNotifier notifier)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="comment">/* method not annotated with @Ignore */</span>) &#123;                  </div><div class="line">            <span class="comment">// run methods annotated with @Before</span></div><div class="line">            <span class="comment">// run test method</span></div><div class="line">            <span class="comment">// run methods annotated with @After</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ... ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Reference: </p>
<ol>
<li><a href="http://www.mscharhag.com/java/understanding-junits-runner-architecture" target="_blank" rel="external">http://www.mscharhag.com/java/understanding-junits-runner-architecture</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JUnit is a good framework for developer to finish testing tasks. I also use JUnit to help me with testing. From the perspective of a good programmer, the source code of JUnit is also a wonderful example to learnhow to write more good style code in Java.&lt;/p&gt;
&lt;p&gt;In this article, I would like to try my best to share my view of JUnit.The version of JUnit what I talked is JUnit4 in this article.&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://jasonleaster.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Problems With Linked List</title>
    <link href="http://jasonleaster.github.io/2016/09/04/2016-09-04-problems-with-linked-list/"/>
    <id>http://jasonleaster.github.io/2016/09/04/2016-09-04-problems-with-linked-list/</id>
    <published>2016-09-04T13:47:19.000Z</published>
    <updated>2017-02-26T13:19:09.715Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Linked-List"><a href="#1-Linked-List" class="headerlink" title="1. Linked List"></a>1. Linked List</h3><p>In computer science, a linked list is a linear collection of data elements, called nodes, each pointing to the next node by means of a pointer. It is a data structure consisting of a group of nodes which together represent a sequence.</p>
<p>For single Linked list:</p>
<p><img src="/images/img_for_2016_09/Singly-linked-list.svg" alt="images"></p>
<a id="more"></a>
<p>A linked list whose nodes contain two fields: an integer value and a link to the next node. The last node is linked to a terminator used to signify the end of the list.</p>
<p>For circle Linked list:</p>
<p><img src="/images/img_for_2016_09/Circularly-linked-list.svg" alt="images"></p>
<h3 id="2-Classical-algorithm-problem"><a href="#2-Classical-algorithm-problem" class="headerlink" title="2. Classical algorithm problem"></a>2. Classical algorithm problem</h3><h4 id="2-1-Linked-List-Cycle"><a href="#2-1-Linked-List-Cycle" class="headerlink" title="2.1 Linked List Cycle"></a>2.1 Linked List Cycle</h4><blockquote>
<p>Given an linked list, to determine if it has a circle. And try to solve this problem without using extra memory.</p>
</blockquote>
<p>There is a technology called <code>fast pointer and slow pointer</code>.  The essential key point in this technology is <code>remainder %</code> in mathematic. Each remainder digital number system works like a circle. </p>
<center>Digital System: s = x % y</center>


<p>When y is an integer number which is bigger than 1, any integer number x remaind with y will drop into numbers which’s range is [0, y-1]. Got it ? Yes, It’s like a circle. With the incresement of x, the result of <code>x % y</code> will always drops into [0, y-1]. Let’s back to our initial problem.</p>
<p>So, there will be a circle if two pointer move <strong>forward</strong> with <code>different speed</code> and they meet each other before the faster pointer get the end of the list. Otherwise, there does not exist a circle.</p>
<p>We can use code to express this algorithm.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">            :type head: ListNode</div><div class="line">            :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        slow = head</div><div class="line">        fast = head</div><div class="line">                                                                             </div><div class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</div><div class="line">            </div><div class="line">            slow = slow.next</div><div class="line">            fast = fast.next.next</div><div class="line"></div><div class="line">            <span class="keyword">if</span> slow == fast:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<blockquote>
<p>How to calculate the beginning location of the circle ?</p>
</blockquote>
<p><img src="/images/img_for_2016_09/FastAndSlowPointer.jpg" alt="images"></p>
<p>We assume that there exist an circle in a linked list like the picture over there.</p>
<p>Just use two pointer to travel the list.</p>
<p>Hypothesis:</p>
<ul>
<li><p>For the faster pointer, it will move forward <strong>two steps</strong> each time. For the slower pointer, it will move forward only <strong>one steps</strong> each time.</p>
</li>
<li><p>We also assume that <code>m</code> is the distance between the start location of the circle and the start location of the linked list.</p>
</li>
<li><p>The length of the circle is <code>n</code>.</p>
</li>
<li><p>The faster pointer will catch the slower pointer after <code>x</code> steps.</p>
</li>
</ul>
<p>According to that hypothesis, we can get some useful information.<br>When the slower pointer arrive at the start location of the circle, the faster pointer have moved <code>2m</code> steps. Because they will meet each other after <code>x</code> step for the slower pointer have arrived at the beginning location of the circle. We can make a conclusion.</p>
<center> x / 1 = (n - (m % n) + x)/2 </center>

<p>Looking back, they will meet at x = (n - (m % n)) from the beginning location of the circle.</p>
<p>Looking forward, they will meet at x = (m % n) from the beginning location of the circle.</p>
<p>Aha, if we use anther traveller pointer(named <code>jack</code>) move from the original start location after the faster and the slower meet each other. It will walk through <code>m</code> unit of distance.</p>
<p>Make the slower pointer move forward continully. The <code>jack</code> and <code>slow pointer</code> will meet at the beginning point of the circle.</p>
<p>For time costing:</p>
<center> m/1 = m % n </center>

<p>If m &lt; n, the faster will not pass the beginning point more than 1 time after the slower and faster meet, otherwise it will pass the beginning location k times where m = z + k * n(z is the remainder of m % n)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Definition <span class="keyword">for</span> singly-linked list.</div><div class="line"> <span class="comment"># class ListNode(object):</span></div><div class="line"> <span class="comment">#     def __init__(self, x):</span></div><div class="line"> <span class="comment">#         self.val = x</span></div><div class="line"> <span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span></div><div class="line">         <span class="string">"""</span></div><div class="line">         :type head: ListNode</div><div class="line">         :rtype: ListNode</div><div class="line">         """</div><div class="line">         <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">             <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">           </div><div class="line">         slow = head</div><div class="line">         fast = head</div><div class="line">       </div><div class="line">         <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</div><div class="line">             slow = slow.next</div><div class="line">             fast = fast.next.next</div><div class="line">           </div><div class="line">             <span class="keyword">if</span> slow == fast:</div><div class="line">                 p = head</div><div class="line">                 <span class="keyword">while</span> p != slow:</div><div class="line">                     p = p.next</div><div class="line">                     slow = slow.next</div><div class="line">                   </div><div class="line">                 <span class="keyword">return</span> p</div><div class="line">               </div><div class="line">         <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure>
<h4 id="2-2-Find-duplicated-number"><a href="#2-2-Find-duplicated-number" class="headerlink" title="2.2 Find duplicated number"></a>2.2 Find duplicated number</h4><blockquote>
<p>Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.</p>
</blockquote>
<p>Note:</p>
<p><small>You must not modify the array (assume the array is read only). \<br>You must use only constant, O(1) extra space. \<br>Your runtime complexity should be less than O(n^2). \<br>There is only one duplicate number in the array, but it could be repeated more than once. \</small></p>
<p>We should notice that the range of these integers is [1, n]. And there are n + 1 integers.<br>We can treat a integer as the index to another integer, which like a pointer.<br>All integers are store in an array which is a continues memory area.(The implementation of built-in data structure – list is a length-variable array)</p>
<p>That array works like a linked-list, doesn’t it? Every integer can be used as index for the array. And there have one duplicate integer at least, which means that there are at least two “pointer” point to next “node”.</p>
<p>It’s like a single linked-list with circles !</p>
<p>So, the original problem can be transformed into how to find the beginning node of the circle in a linked-list. Just look back 2.1 in this article, if you still don’t know how to do it.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDuplicate</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        slow = nums[<span class="number">0</span>]</div><div class="line">        fast = nums[slow]</div><div class="line">        <span class="keyword">while</span> fast != slow:</div><div class="line">            slow = nums[slow]</div><div class="line">            fast = nums[nums[fast]]</div><div class="line">          </div><div class="line">        node = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> node != slow:</div><div class="line">            node = nums[node]</div><div class="line">            slow = nums[slow]</div><div class="line">          </div><div class="line">        <span class="keyword">return</span> node</div></pre></td></tr></table></figure>
<h3 id="More-classical-problem-wait-to-be-updated"><a href="#More-classical-problem-wait-to-be-updated" class="headerlink" title="More classical problem wait to be updated :)"></a>More classical problem wait to be updated :)</h3><hr>
<p>LiuYe Lake, HuNan, China.<br>Photo by Anabella.</p>
<p><img src="/images/img_for_2016_09/joke.jpg" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Linked-List&quot;&gt;&lt;a href=&quot;#1-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;1. Linked List&quot;&gt;&lt;/a&gt;1. Linked List&lt;/h3&gt;&lt;p&gt;In computer science, a linked list is a linear collection of data elements, called nodes, each pointing to the next node by means of a pointer. It is a data structure consisting of a group of nodes which together represent a sequence.&lt;/p&gt;
&lt;p&gt;For single Linked list:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/img_for_2016_09/Singly-linked-list.svg&quot; alt=&quot;images&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://jasonleaster.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Search Algorithm in Graph</title>
    <link href="http://jasonleaster.github.io/2016/08/24/2016-08-24-search-algorithm-in-graph/"/>
    <id>http://jasonleaster.github.io/2016/08/24/2016-08-24-search-algorithm-in-graph/</id>
    <published>2016-08-24T12:46:43.000Z</published>
    <updated>2016-08-28T02:25:20.203Z</updated>
    
    <content type="html"><![CDATA[<p>Searching in a graph is the one of the most popular topic in CS. </p>
<p>In this article, I would like to make a summary about what algorithms for searching in graphes.</p>
<a id="more"></a>
<h3 id="1-Presentation-of-Graph"><a href="#1-Presentation-of-Graph" class="headerlink" title="1. Presentation of Graph"></a>1. Presentation of Graph</h3><ul>
<li>Adjacency Matrix</li>
<li>Adjacency List</li>
</ul>
<p>What is better, adjacency lists or adjacency matrices for graph problem ?</p>
<p>It depends on the problem.</p>
<p>An adjacency matrix uses <code>O(n*n)</code> memory. It has fast lookups to check for presence or absence of a specific edge, but slow to iterate over all edges.</p>
<p>  Adjacency lists use memory in proportion to the number edges, which might save a lot of memory if the adjacency matrix is sparse. It is fast to iterate over all edges, but finding the presence or absence specific edge is slightly slower than with the matrix.</p>
<p><strong>In this article, I would like to use adjacency matrix to represent the graph in our problems. I want to express the essential idea in algorithms but not the programming language grammer. So all implementation of algorithm will be written in Python.</strong></p>
<p>We will try to use different ways to solve the demo problem. Here is the graph which we will use in this article.</p>
<p><img src="/images/img_for_2016_08/graph.jpg" alt="images"></p>
<p>The corresponding adjacency matrix:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">INF = float(<span class="string">'inf'</span>)</div><div class="line">graph = [</div><div class="line">[INF,   <span class="number">7</span>,   <span class="number">9</span>, INF, INF,  <span class="number">14</span>],</div><div class="line">[  <span class="number">7</span>, INF,  <span class="number">10</span>,  <span class="number">15</span>, INF, INF],</div><div class="line">[  <span class="number">9</span>,  <span class="number">19</span>, INF,  <span class="number">11</span>, INF,   <span class="number">2</span>],</div><div class="line">[INF,  <span class="number">15</span>,  <span class="number">11</span>, INF,   <span class="number">6</span>, INF],</div><div class="line">[INF, INF, INF,   <span class="number">6</span>, INF,   <span class="number">9</span>],</div><div class="line">[ <span class="number">14</span>, INF,   <span class="number">2</span>, INF,   <span class="number">9</span>, INF]</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="2-BFS-Breadth-First-Search"><a href="#2-BFS-Breadth-First-Search" class="headerlink" title="2. BFS Breadth First Search"></a>2. BFS Breadth First Search</h3><p>Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a ‘search key’) and explores the neighbor nodes first, before moving to the next level neighbors.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span><span class="params">(matrix, start, end)</span>:</span></div><div class="line">    size = len(matrix)</div><div class="line">    visited = [start]</div><div class="line">    Q = [ [start] ]</div><div class="line">    path = [] <span class="comment"># possible solution, @path is a nested list [[] ...]</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> len(Q) != <span class="number">0</span>:</div><div class="line">        path = Q.pop(<span class="number">0</span>)</div><div class="line">        curNode = path[<span class="number">-1</span>]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> curNode == end:</div><div class="line">            <span class="keyword">return</span> path <span class="comment"># the solution</span></div><div class="line"></div><div class="line">        neighbors = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(size):</div><div class="line">            <span class="keyword">if</span> matrix[curNode][i] != INF:</div><div class="line">            neighbors.append(i)</div><div class="line"></div><div class="line">        <span class="comment"># to find the neighbors who are unvisited</span></div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; len(neighbors):</div><div class="line">            <span class="keyword">if</span> neighbors[i] <span class="keyword">in</span> visited:</div><div class="line">                neighbors.remove(neighbors[i])</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                i += <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="comment">#add unvisited neighbor into visited line.</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> neighbors:</div><div class="line">            visited.append(i)</div><div class="line">            Q.append(path + [i])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure>
<h3 id="DFS-Depth-First-Search"><a href="#DFS-Depth-First-Search" class="headerlink" title="DFS Depth First Search"></a>DFS Depth First Search</h3><p>Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. One starts at the root (selecting some arbitrary node as the root in the case of a graph) and explores as far as possible along each branch before backtracking.</p>
<p><img src="/images/img_for_2016_08/pathForDFS.jpg" alt="images"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#####################  Pesudo Code ########################</div><div class="line">Input: A graph G and a vertex v of G</div><div class="line"></div><div class="line">Output: All vertices reachable from v labeled as discovered</div><div class="line"></div><div class="line">-----------------------------------------------------------</div><div class="line">A recursive implementation of DFS:</div><div class="line">-----------------------------------------------------------</div><div class="line">procedure DFS(G,v):</div><div class="line"></div><div class="line">    label v as discovered</div><div class="line">    for all edges from v to w in G.adjacentEdges(v) do</div><div class="line">        if vertex w is not labeled as discovered then</div><div class="line">            recursively call DFS(G,w)</div><div class="line"></div><div class="line">------------------------------------------------------------</div><div class="line">A non-recursive implementation of DFS:</div><div class="line">------------------------------------------------------------</div><div class="line"></div><div class="line">procedure DFS-iterative(G,v):</div><div class="line">    let S be a stack</div><div class="line">    S.push(v)</div><div class="line">    while S is not empty</div><div class="line">        v = S.pop()</div><div class="line">        if v is not labeled as discovered:</div><div class="line">            label v as discovered</div><div class="line">            for all edges from v to w in G.adjacentEdges(v) do</div><div class="line">                 S.push(w)</div></pre></td></tr></table></figure>
<h3 id="Foly"><a href="#Foly" class="headerlink" title="Foly"></a>Foly</h3><h3 id="Shortest-Path-Search-Dijkastra"><a href="#Shortest-Path-Search-Dijkastra" class="headerlink" title="Shortest Path Search (Dijkastra)"></a>Shortest Path Search (Dijkastra)</h3><p><img src="/images/img_for_2016_08/pathForDijkastra.jpg" alt="images"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#####################  Pesudo Code ########################</div><div class="line"></div><div class="line">function Dijkstra(Graph, source):</div><div class="line"></div><div class="line">      create vertex set Q</div><div class="line"></div><div class="line">      for each vertex v in Graph:             // Initialization</div><div class="line">          dist[v] ← INFINITY                  // Unknown distance from source to v</div><div class="line">          prev[v] ← UNDEFINED                 // Previous node in optimal path from source</div><div class="line">          add v to Q                          // All nodes initially in Q (unvisited nodes)</div><div class="line"></div><div class="line">      dist[source] ← 0                        // Distance from source to source</div><div class="line">      </div><div class="line">      while Q is not empty:</div><div class="line">          u ← vertex in Q with min dist[u]    // Source node will be selected first</div><div class="line">          remove u from Q </div><div class="line">          </div><div class="line">          for each neighbor v of u:           // where v is still in Q.</div><div class="line">              alt ← dist[u] + length(u, v)</div><div class="line">              if alt &lt; dist[v]:               // A shorter path to v has been found</div><div class="line">                  dist[v] ← alt </div><div class="line">                  prev[v] ← u </div><div class="line"></div><div class="line">      return dist[], prev[]</div></pre></td></tr></table></figure>
<p>Extention:</p>
<p>I will recommend you to finish the lab2 in 6.034</p>
<p><a href="https://github.com/jasonleaster/MIT_6.034_2015/tree/master/lab2" target="_blank" rel="external">https://github.com/jasonleaster/MIT_6.034_2015/tree/master/lab2</a></p>
<p>This article does not finished and will be update these days :)</p>
<p>You can get my implementation on <a href="https://github.com/jasonleaster/Algorithm/blob/master/Graph/Dijkstra/Python/Dijkastra.py" target="_blank" rel="external">github</a></p>
<hr>
<p>Photo by Annabella in ChongQin, China<br><img src="/images/img_for_2016_08/zhuanyunlou.png" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Searching in a graph is the one of the most popular topic in CS. &lt;/p&gt;
&lt;p&gt;In this article, I would like to make a summary about what algorithms for searching in graphes.&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://jasonleaster.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Great ideas in Object Oriented Programming</title>
    <link href="http://jasonleaster.github.io/2016/06/14/2016-06-14-great-ideas-in-object-oriented-programming/"/>
    <id>http://jasonleaster.github.io/2016/06/14/2016-06-14-great-ideas-in-object-oriented-programming/</id>
    <published>2016-06-14T04:49:00.000Z</published>
    <updated>2017-05-21T13:29:51.962Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Object-oriented programming (OOP) is a programming paradigm based on the concept of “objects”, which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. – <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="external">Wikipedia</a></p>
</blockquote>
<p>OOP is just a programming paradigm and it helps programmer to build more robust and implement more abstract concept which are needed in their project.OOP isn’t the treasure which only belongs to a special programming language. It offer a way to make the problem more easy to be understood and to be solved.</p>
<p>There are three gread ideas in OOP.</p>
<ul>
<li>Encapsulation </li>
<li>Composition, inheritance, and delegation</li>
<li>Polymophsim </li>
</ul>
<a id="more"></a>
<h3 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h3><p>The most basic idea in OOP is that each object encapsulates some data and code. The object takes requests from other client object. The object alone is responsible for its own state, exposing public message for clients, and declaring private the variables and the methods. The client depends on the simple public interface, and does not known about or depend on the details of the implementation.</p>
<p><strong>Encapsulation remind us to put details and complexity into a black box. The outside people(user) don’t need to care about how this box was built but just use it with the instructions which the box suppled.</strong></p>
<p>Q: What if we want to implement a abstract concept in mathematic – Point. </p>
<p>Point, the most basic presentation of point is two coordinates in Descartes coordinate system(x, y). How to implement it with program ?</p>
<p>Consider the following implementation in java.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[MyPoint1.java]</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPoint1</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x;   <span class="comment">// x and y are public</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> y;</div><div class="line">                </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPoint1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Client Code</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line"></div><div class="line">        MyPoint1 p = <span class="keyword">new</span> MyPoint1(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Bad style to try to use the detail information of a class.</div><div class="line">         * Here, client programmer should not use data member of the class directly.</div><div class="line">         * With the software iteration and release the library which implement the</div><div class="line">         * class which have used in your project. You may have to rewrite all your</div><div class="line">         * client program. Because the author of that library may change the </div><div class="line">         * implementation of that class and your code can't be used with the </div><div class="line">         * new library.</div><div class="line">         */</div><div class="line">        <span class="keyword">int</span> z = p.x + p.y;<span class="comment">// !! Bad style.</span></div><div class="line"></div><div class="line">        System.out.print(z);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Here all information is public, this is the most convenient for end users, but limits our ability to change things later in development. What would happend if you build a software and you find something should be changed with the implementation of <code>MyPoint1</code>. You may want to add more attributes into this class. You may also want to rewrite your code and change it into another coordinate system but not descartes coordinate system.</p>
<p>If the others module depends on your implementation of <code>MyPoints1</code> and use the data member of that class directly, you may have to rewrite your whole project and it will cost your a lot of time. It will be nightmare for programmer to be told “Hey, buddy. There is something changed with requirement, you have to rewrite your whole project. Just put the code into garbage collector. It can’t be modified to satisfy the new requirement.”</p>
<p><img src="/images/img_for_2016_06_14/wth.png" alt="images"></p>
<p>Here is a bettern one solution. In <code>MyPoint2</code>, the detail of this class are setted as private which means that the client(user) can’t use the information about the implementation directly. The only way that the user can use the information which they need is to use the interface that the class supply with. In this example, the interface which is public can access <em>getX()</em>  and <em>getY()</em> .</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[MyPoint2.java]</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPoint2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;  <span class="comment">// x and y are private</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</div><div class="line">                </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPoint2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Client Code</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        MyPoint2 p = <span class="keyword">new</span> MyPoint2(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">        <span class="keyword">int</span> z = p.getX() + p.getY(); <span class="comment">// Good Style :)</span></div><div class="line">        System.out.print(z);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The advantage of accessing control and encapsulation is that we can replace the current implementation into another better one and make sure the client don’t need to be modified for this changes in the original class(MyPoint2).</p>
<p>Here, we implement Point with polar coordinate system. All the interface that set as public in <code>MyPoint2</code> are unchanged. This make sure that the client which use <code>getX()</code> and <code>getY()</code> don’t need to be modified for changes with the implementation of Point.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[MyPoint3.java]</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPoint3</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> r;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> theta;</div><div class="line">                </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPoint3</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.r = Math.sqrt(x * x + y * y);</div><div class="line">        theta = Math.atan( (<span class="keyword">double</span>) y / x);</div><div class="line">    &#125;</div><div class="line">                    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Math.round(r * Math.cos(theta));</div><div class="line">    &#125;</div><div class="line">                        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Math.round(r * Math.sin(theta));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Client Code don't need to be modified after the implemetation of Point changed</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        MyPoint2 p = <span class="keyword">new</span> MyPoint2(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">        <span class="keyword">int</span> z = p.getX() + p.getY(); <span class="comment">// Good Style :)</span></div><div class="line">        System.out.print(z);</div><div class="line">    &#125;</div><div class="line">                            </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Composition-inheritance-and-delegation"><a href="#Composition-inheritance-and-delegation" class="headerlink" title="Composition, inheritance, and delegation"></a>Composition, inheritance, and delegation</h3><p>In object-oriented programming, inheritance is when an object or class is based on another object (prototypal inheritance) or class (class-based inheritance), using the same implementation (inheriting from an object or class) specifying implementation to maintain the same behavior (realizing an interface; inheriting behavior). In this ariticle, we only talk about the class-based inheritance.</p>
<p>What’s the adavantages of inheritance ?</p>
<ul>
<li>Overriding</li>
<li>Code Reuse</li>
</ul>
<p>Many OOP programming language permit to replace the implementation of one or more method that it inherited from the base class. We call this feature as <strong>Overriding</strong>. There are two way to help us to reuse code. The one way is composition and the other way is inheritance.</p>
<p>You reuse code by creating new classes, but instead of creating them from scratch, you use existing classes that someone has already built and debugged.</p>
<p>In Java and Python (I don’t know the implementation of C++), you always doing inheritance when you create an object.</p>
<blockquote>
<p>Class Object is the root of the class hierarchy. Every class has Object as a superclass. All objects, including arrays, implement the methods of this class.            Since: JDK1.0   – <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html" target="_blank" rel="external">Java Doc notes</a></p>
</blockquote>
<p>You could also read my article about <a href="http://jasonleaster.github.io/blog/2015/06/13/memory-model-of-objects-in-c-plus-plus/">Moemory Model of Object in C++</a> and <a href="http://jasonleaster.github.io/blog/2016/02/03/memory-model-of-int-object-in-python/">In Object In Python</a>. If you are interesting in the implementation of inheritance, just read all about it.</p>
<h4 id="Warning-of-using-inheritance"><a href="#Warning-of-using-inheritance" class="headerlink" title="Warning of using inheritance"></a>Warning of using inheritance</h4><p>In heritance is a clever and appealing techonology, it is best applied in somewhat rare circumstances where you have several deeply similar classes. It’s a common error for beginning OOP programmers to try to use inheritance for everything. In constrat, application of modularity and encapsulation and API design may be less flashy, but they are incredibly common and powerful.</p>
<h3 id="Polymophsim"><a href="#Polymophsim" class="headerlink" title="Polymophsim"></a>Polymophsim</h3><h3 id="OOP-Design"><a href="#OOP-Design" class="headerlink" title="OOP Design"></a>OOP Design</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Object-oriented programming (OOP) is a programming paradigm based on the concept of “objects”, which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. – &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OOP is just a programming paradigm and it helps programmer to build more robust and implement more abstract concept which are needed in their project.OOP isn’t the treasure which only belongs to a special programming language. It offer a way to make the problem more easy to be understood and to be solved.&lt;/p&gt;
&lt;p&gt;There are three gread ideas in OOP.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encapsulation &lt;/li&gt;
&lt;li&gt;Composition, inheritance, and delegation&lt;/li&gt;
&lt;li&gt;Polymophsim &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://jasonleaster.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Training Cascade with OpenCV</title>
    <link href="http://jasonleaster.github.io/2016/05/19/2016-05-19-training-cascade-with-opencv/"/>
    <id>http://jasonleaster.github.io/2016/05/19/2016-05-19-training-cascade-with-opencv/</id>
    <published>2016-05-19T07:45:42.000Z</published>
    <updated>2017-02-26T13:06:38.568Z</updated>
    
    <content type="html"><![CDATA[<p>Platform: Linux/Ubuntu</p>
<p>Preparation:</p>
<p>You may have to prepare two different types of images for training a <code>Binary Classifier Model</code>, the positive samples and the negative samples.</p>
<p>Here, we gona to use image database from <strong>UIUC Image Database for Car Detection</strong> to demonstrate how to use OpenCV to detection cars in a image.</p>
<a id="more"></a>
<p>User should put all positive samples which have the same size into a directory.</p>
<pre><code>ls ./pos &gt; ./pos_list.info
ls ./neg &gt; ./neg_list.info
</code></pre><p>Open <code>pos_list.info</code> and you will see the path of images have been written into the info file.</p>
<p><img src="/images/img_for_2016_05_19/files.png" alt="images"></p>
<p>But it isn’t enough. To train the cascade with OpenCV, you should supply with the information where is the object in the image. In this demo, what we want to detect is a car. The information that OpenCV need like this: <code>image_path num x y w h</code>, which should be append at the end of the path of a image.</p>
<p><code>x y w h</code> describe a rectangle which identify where is the object that we want to find. <code>num</code> describe how many objects in the rectangle.</p>
<p>So, I write a script in Python and this script will help to finish that job.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[trans_pos_location.py]</div><div class="line">fileObj = open(<span class="string">"./pos_list.info"</span>)</div><div class="line">newFile = open(<span class="string">"./pos_list_new.info"</span>, <span class="string">"a+"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileObj:</div><div class="line">    newFile.write(<span class="string">"./pos/"</span> + line[:<span class="number">-1</span>] + <span class="string">" 1 0 0 100 40\n"</span>)</div><div class="line"></div><div class="line">fileObj.close()</div><div class="line">newFile.close()</div><div class="line"></div><div class="line">[trans_neg_location.py]</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">fileObj = open(<span class="string">"./neg_list.info"</span>)</div><div class="line">newFile = open(<span class="string">"./neg_list_new.info"</span>, <span class="string">"a+"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileObj:</div><div class="line">    newFile.write(os.getcwd() + <span class="string">"/neg/"</span> + line)</div><div class="line"></div><div class="line">fileObj.close()</div><div class="line">newFile.close()</div></pre></td></tr></table></figure>
<p>Run the following comand:</p>
<pre><code>opencv_createsamples -info pos_list_new.info -num 550 -w 48 -h 24 -vec cars.vec

opencv_traincascade -data data -vec abc.vec -bg neg_list_new.info -numPos 550 -numNeg 500 -numStages 2 -w 48 -h 24
</code></pre><p><code>opencv_createsamples</code> and <code>opencv_traincascade</code> are two tool program with OpenCV. The original positive samples for training are images with 100x40 pixels. For the training process, it will cost a lot of memory, so we resize it into smaller one. With that command, <code>-w 48 -h 24</code>, positive images are resized into smaller images which’s width is 48 pixels and the height of that is 24 pixels.</p>
<p>Here, we can use this script to test the model that we get.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> image</div><div class="line"></div><div class="line">car_cascade = cv2.CascadeClassifier(<span class="string">"/home/jasonleaster/Desktop/CarData/TrainImages/data/cascade.xml"</span>)</div><div class="line"></div><div class="line">gray = image.imread(<span class="string">"/home/jasonleaster/Desktop/CarData/TestImages_Scale/test-1.pgm"</span>)</div><div class="line"></div><div class="line"></div><div class="line">faces = car_cascade.detectMultiScale(gray,</div><div class="line">                                    scaleFactor = <span class="number">1.3</span>,</div><div class="line">                                    minNeighbors=<span class="number">5</span>,</div><div class="line">                                    minSize=(<span class="number">24</span>, <span class="number">48</span>),</div><div class="line">                                    flags = cv2.cv.CV_HAAR_SCALE_IMAGE)</div><div class="line"></div><div class="line"></div><div class="line">img = gray</div><div class="line"></div><div class="line"><span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</div><div class="line">    cv2.rectangle(img, (x, y), (x+w, y+h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</div><div class="line"><span class="keyword">import</span> pylab</div><div class="line">pyplot.imshow(img, cmap = <span class="string">"gray"</span>)</div><div class="line">pylab.show()</div></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="/images/img_for_2016_05_19/detected_car1.png" alt="images"></p>
<p>Reference:</p>
<ol>
<li><a href="http://blog.csdn.net/wuxiaoyao12/article/details/39227189" target="_blank" rel="external">http://blog.csdn.net/wuxiaoyao12/article/details/39227189</a></li>
<li>www.youtube.com/watch?v=WEzm7L5zoZE</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Platform: Linux/Ubuntu&lt;/p&gt;
&lt;p&gt;Preparation:&lt;/p&gt;
&lt;p&gt;You may have to prepare two different types of images for training a &lt;code&gt;Binary Classifier Model&lt;/code&gt;, the positive samples and the negative samples.&lt;/p&gt;
&lt;p&gt;Here, we gona to use image database from &lt;strong&gt;UIUC Image Database for Car Detection&lt;/strong&gt; to demonstrate how to use OpenCV to detection cars in a image.&lt;/p&gt;
    
    </summary>
    
    
      <category term="MachineLearning" scheme="http://jasonleaster.github.io/tags/MachineLearning/"/>
    
      <category term="OpenCV" scheme="http://jasonleaster.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Iterater and generator in Python</title>
    <link href="http://jasonleaster.github.io/2016/04/09/2016-04-09-iterater-and-generator-in-python/"/>
    <id>http://jasonleaster.github.io/2016/04/09/2016-04-09-iterater-and-generator-in-python/</id>
    <published>2016-04-09T05:54:30.000Z</published>
    <updated>2016-04-09T13:07:14.756Z</updated>
    
    <content type="html"><![CDATA[<p>Try to answer the following question?</p>
<ol>
<li><p>How do generators save memory?</p>
</li>
<li><p>When is the best time to use a generator?</p>
</li>
<li><p>How can I use itertools to create complex generator workflows?</p>
</li>
<li><p>When is lazy evaluation beneficial, and when is it not?</p>
</li>
</ol>
<a id="more"></a>
<p>Programmer who is familiar with another language start learning Python, they are taken aback by the difference in <strong>for</strong> loop notation.</p>
<p>With the influence from others language, they may try to finish iteration job by this code:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</div><div class="line">    do_work(i)</div></pre></td></tr></table></figure>
<p>What the beginner don’t know the implemenation of function range in Python(2.7). The first thing the <strong>range()</strong> function must precreate the list of all numbers within the range.</p>
<p>In Python2.7, range() produce a list but xrange() return a iterator.( In Python 3, the range() is replaced with the xrange() and there is no xrange() function anymore. From this modification, programmer can know that the develop team of Python aware that it’s neccessary to force the user to use a generator when they want to iteration job.)</p>
<p>Here is a test for the differences between the range() and xrange() in memory allocation.</p>
<p><img src="/images/img_for_2016_04_09/range_xrange_time.png" alt="images"><br><img src="/images/img_for_2016_04_09/range_xrange_mem.png" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Try to answer the following question?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How do generators save memory?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When is the best time to use a generator?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How can I use itertools to create complex generator workflows?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When is lazy evaluation beneficial, and when is it not?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jasonleaster.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Tuple and list in Python</title>
    <link href="http://jasonleaster.github.io/2016/04/09/2016-04-09-Tuple-and-list-in-python/"/>
    <id>http://jasonleaster.github.io/2016/04/09/2016-04-09-Tuple-and-list-in-python/</id>
    <published>2016-04-09T00:52:51.000Z</published>
    <updated>2017-02-26T13:27:18.740Z</updated>
    
    <content type="html"><![CDATA[<p>Try to answer the following question.</p>
<p>What are lists andd tuples good for?</p>
<p>What is the complexity of a lookup in a list/tuple?</p>
<p>How is that complexity achieved?</p>
<p>What are the differences between lists and tuples?</p>
<p>How does appending to a list work?</p>
<p>When should I use lists and tuples?</p>
<a id="more"></a>
<p>Lists and tuples are a class of data structure called arrays. An array is simply a flat list of data with some intrinsic ordering.<br>This demarcates another line between lists and tuples: <strong>lists are dynamic arrays while tuples are static arrays.</strong></p>
<h3 id="Lists-Versus-Tuples"><a href="#Lists-Versus-Tuples" class="headerlink" title="Lists Versus Tuples"></a>Lists Versus Tuples</h3><p>Differences between lists and tuple</p>
<ol>
<li><p>lists are dynamic arrays; they are mutable and allow for resizing(changing the number of elements that are held).</p>
</li>
<li><p>Tuples are static arrays; they are immutable, and the data within them cannot be changed once they have been created.</p>
</li>
<li><p>Tuples are cached by the Python runtime, which means that we don’t need to talk to the kernel to reserve memory every time we want to use one.</p>
</li>
</ol>
<p>These differences outline the philosophical difference between the two: tuples are for describing multiple properties of one unchanging thing, and list can be used to store collections of data about completely disparate objects.</p>
<p><img src="/images/img_for_2016_04_09/tuple_list_construction_speed.png" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Try to answer the following question.&lt;/p&gt;
&lt;p&gt;What are lists andd tuples good for?&lt;/p&gt;
&lt;p&gt;What is the complexity of a lookup in a list/tuple?&lt;/p&gt;
&lt;p&gt;How is that complexity achieved?&lt;/p&gt;
&lt;p&gt;What are the differences between lists and tuples?&lt;/p&gt;
&lt;p&gt;How does appending to a list work?&lt;/p&gt;
&lt;p&gt;When should I use lists and tuples?&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jasonleaster.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jasonleaster.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Exception Control in Python</title>
    <link href="http://jasonleaster.github.io/2016/02/22/2016-02-22-exception-control-in-python/"/>
    <id>http://jasonleaster.github.io/2016/02/22/2016-02-22-exception-control-in-python/</id>
    <published>2016-02-22T03:31:34.000Z</published>
    <updated>2017-02-26T13:28:32.763Z</updated>
    
    <content type="html"><![CDATA[<p>Pythoner may be familiar with exception control like the demo beblow there:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    <span class="keyword">print</span> <span class="string">"after abort:"</span>, i</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"get here"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>If you press down <code>ctrl + c</code>, there will trigger a interruption by keyboard. The inner infinite loop will stop and jump into the exception handler. There are another examples of exception and interruption in the computer. Programmer may also ask what’s the benefite to handle the exception …</p>
<p>What if there is something unpredictable and it will stop the program to run correctly?</p>
<p>If you do 1 divide 0 in your program, the CPU don’t know how to compute that expression. In the level of operating system, OS will handle it as an exception and tell programmer that it doesn’t work. The program must be stopped or killed.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="number">1</span>/<span class="number">0</span></div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Welcome Chapter 42 -- Guideline to galaxy"</span></div></pre></td></tr></table></figure>
<p>Although there trig a exception for diveding zero, but we catch it and handle it correctly. So, the program end correctly.</p>
<p>The mechanism of exception handling come from operating system. </p>
<p>Here is the definition of exception object in Python. (Don’t forget that everything in Python is object).</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[Include/pyerrors.h]</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    PyObject_HEAD</div><div class="line">    PyObject *dict;</div><div class="line">    PyObject *args;</div><div class="line">    PyObject *message;</div><div class="line">&#125; PyBaseExceptionObject;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">/* Predefined exceptions */</span></div><div class="line"></div><div class="line">PyAPI_DATA(PyObject *) PyExc_BaseException;</div><div class="line">PyAPI_DATA(PyObject *) PyExc_Exception;</div><div class="line">PyAPI_DATA(PyObject *) PyExc_StopIteration;</div><div class="line">...</div><div class="line">PyAPI_DATA(PyObject *) PyExc_ZeroDivisionError;</div><div class="line">PyAPI_DATA(PyObject *) PyExc_EOFError;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>Here is a example about how python deal with the exception.</p>
<p>What would happen if there is a expression <code>1/0</code>.<br>I use IPython interpreter do this demo.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">18</span>]: code = compile(<span class="string">"1/0"</span>, <span class="string">"testscript"</span>, mode= <span class="string">"exec"</span>)</div><div class="line"></div><div class="line">In [<span class="number">19</span>]: dis.disassemble(code)</div><div class="line">      <span class="number">1</span>           <span class="number">0</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</div><div class="line">                  <span class="number">3</span> LOAD_CONST               <span class="number">1</span> (<span class="number">0</span>)</div><div class="line">                  <span class="number">6</span> BINARY_DIVIDE       </div><div class="line">                  <span class="number">7</span> POP_TOP             </div><div class="line">                  <span class="number">8</span> LOAD_CONST               <span class="number">2</span> (<span class="keyword">None</span>)</div><div class="line">                 <span class="number">11</span> RETURN_VALUE</div></pre></td></tr></table></figure>
<p>The assemble code (opcode) of expression <code>1/0</code> in Python is compiled into that opcode code. It isn’t difficult to understand what the <code>LOAD_CONST</code> do.</p>
<p>Let’s dig into the detail of <code>BINARY_DIVIDE</code> in Python/ceval.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">[Python/ceval.c]</div><div class="line">    <span class="keyword">for</span>(;;)<span class="comment">// big for loop</span></div><div class="line">        ...</div><div class="line">        TARGET_NOARG(BINARY_DIVIDE)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (!_Py_QnewFlag) &#123;</div><div class="line">                    w = POP();</div><div class="line">                    v = TOP();</div><div class="line">                    x = PyNumber_Divide(v, w); <span class="comment">//</span></div><div class="line">                    Py_DECREF(v);</div><div class="line">                    Py_DECREF(w);</div><div class="line">                    SET_TOP(x);</div><div class="line">                    <span class="keyword">if</span> (x != <span class="literal">NULL</span>) DISPATCH();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ...</div><div class="line"></div><div class="line">        <span class="comment">/* </span></div><div class="line">           set up the basic information for the reason </div><div class="line">           why exception happened  -- notes by Jason Leaster</div><div class="line">         */</div><div class="line">        <span class="comment">/* Quickly continue if no error occurred */</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (why == WHY_NOT) &#123;</div><div class="line">            <span class="keyword">if</span> (err == <span class="number">0</span> &amp;&amp; x != <span class="literal">NULL</span>) &#123;</div><div class="line">                READ_TIMESTAMP(loop1);</div><div class="line">                <span class="keyword">continue</span>; <span class="comment">/* Normal, fast path */</span></div><div class="line">            &#125;</div><div class="line">            why = WHY_EXCEPTION;</div><div class="line">            x = Py_None;</div><div class="line">            err = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ...</div><div class="line"></div><div class="line">        <span class="comment">/* Log traceback info if this is a real exception */</span></div><div class="line">        <span class="keyword">if</span> (why == WHY_EXCEPTION) &#123;</div><div class="line">            PyTraceBack_Here(f);</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line"></div><div class="line">[Objects/abstract.c]</div><div class="line">BINARY_FUNC(PyNumber_Subtract, nb_subtract, <span class="string">"-"</span>)</div><div class="line"></div><div class="line"><span class="comment">/* PyNumber_Divide is just the other name of function nb_divide </span></div><div class="line">   and then you will find that the nb_divide is just a function pointer</div><div class="line">   in struct PyNumberMethods.</div><div class="line"></div><div class="line">   The REAL implementation is function @int_classic_div in </div><div class="line">   Objects/intobject.c. The @int_classic_div will call function</div><div class="line">   @i_divmod in Objects/intobject.c</div><div class="line"></div><div class="line">                                    -- notes by Jason Leaster</div><div class="line"> */</div><div class="line">BINARY_FUNC(PyNumber_Divide, nb_divide, <span class="string">"/"</span>) </div><div class="line"></div><div class="line">BINARY_FUNC(PyNumber_Divmod, nb_divmod, <span class="string">"divmod()"</span>)</div><div class="line"></div><div class="line">[Objects/intobject.c]</div><div class="line">i_divmod(<span class="keyword">register</span> <span class="keyword">long</span> x, <span class="keyword">register</span> <span class="keyword">long</span> y,</div><div class="line">           <span class="keyword">long</span> *p_xdivy, <span class="keyword">long</span> *p_xmody)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">long</span> xdivy, xmody;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         Keypoint!</div><div class="line">         Here is where Python setup a new exception for "divide zero"</div><div class="line">         problem.</div><div class="line">                                            -- notes by JasonLeaster</div><div class="line">         */</div><div class="line">        PyErr_SetString(PyExc_ZeroDivisionError,</div><div class="line">                <span class="string">"integer division or modulo by zero"</span>);</div><div class="line">        <span class="keyword">return</span> DIVMOD_ERROR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ... ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>It’s the last mile to get the target place.<br><code>PyErr_SetString</code> finish the job about the initialization of <code>divide zero</code> exception.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[Python/errors.c]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">PyErr_Restore</span><span class="params">(PyObject *type, PyObject *value, PyObject *traceback)</span></div><div class="line">&#123;</div><div class="line">    PyThreadState *tstate = PyThreadState_GET();</div><div class="line">    PyObject *oldtype, *oldvalue, *oldtraceback;</div><div class="line"></div><div class="line">    ... </div><div class="line"></div><div class="line">    <span class="comment">/* Save these in locals to safeguard against recursive</span></div><div class="line">       invocation through Py_XDECREF */</div><div class="line">    oldtype = tstate-&gt;curexc_type;</div><div class="line">    oldvalue = tstate-&gt;curexc_value;</div><div class="line">    oldtraceback = tstate-&gt;curexc_traceback;</div><div class="line"></div><div class="line">    tstate-&gt;curexc_type = type;</div><div class="line">    tstate-&gt;curexc_value = value;</div><div class="line">    tstate-&gt;curexc_traceback = traceback;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">PyErr_SetObject</span><span class="params">(PyObject *exception, PyObject *value)</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">/* log this exception message into thread state */</span></div><div class="line">    PyErr_Restore(exception, value, (PyObject *)<span class="literal">NULL</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">PyErr_SetString</span><span class="params">(PyObject *exception, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>)</span></div><div class="line">&#123;</div><div class="line">    PyObject *value = PyString_FromString(<span class="built_in">string</span>);</div><div class="line">    PyErr_SetObject(exception, value);</div><div class="line">    Py_XDECREF(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>After the VM (ceval.c) know why there is a exception, the VM will take step<br>into handling this exception. We have knew that the big <code>for switch loop</code> execute the opcode step by step.<br>Once there is something wrong with the opcode at runtime, the VM will setup<br> exception object by <code>PyErr_SetObject</code>. And then VM also will setup the traceback object of type <code>PyTracebackObject</code>.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Traceback interface */</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _traceback &#123;</div><div class="line">    PyObject_HEAD</div><div class="line">    <span class="keyword">struct</span> _traceback *tb_next;</div><div class="line">    <span class="keyword">struct</span> _frame *tb_frame;</div><div class="line">    <span class="keyword">int</span> tb_lasti;</div><div class="line">    <span class="keyword">int</span> tb_lineno;</div><div class="line">&#125; PyTracebackObject;</div></pre></td></tr></table></figure>
<p>You may notice that the <code>PyTracebackObject</code> is a single direction linked-list. </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> PyTracebackObject *</span></div><div class="line"><span class="title">newtracebackobject</span><span class="params">(PyTracebackObject *next, PyFrameObject *frame)</span></div><div class="line">&#123;</div><div class="line">    PyTracebackObject *tb;</div><div class="line">    <span class="keyword">if</span> ((next != <span class="literal">NULL</span> &amp;&amp; !PyTraceBack_Check(next)) ||</div><div class="line">            frame == <span class="literal">NULL</span> || !PyFrame_Check(frame)) &#123;</div><div class="line">        PyErr_BadInternalCall();</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    tb = PyObject_GC_New(PyTracebackObject, &amp;PyTraceBack_Type);</div><div class="line">    <span class="keyword">if</span> (tb != <span class="literal">NULL</span>) &#123;</div><div class="line">        Py_XINCREF(next);</div><div class="line">        tb-&gt;tb_next = next;</div><div class="line">        Py_XINCREF(frame);</div><div class="line">        tb-&gt;tb_frame = frame;</div><div class="line">        tb-&gt;tb_lasti = frame-&gt;f_lasti;</div><div class="line">        tb-&gt;tb_lineno = PyFrame_GetLineNumber(frame);</div><div class="line">        PyObject_GC_Track(tb);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tb;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">PyTraceBack_Here</span><span class="params">(PyFrameObject *frame)</span></div><div class="line">&#123;</div><div class="line">    PyThreadState *tstate = PyThreadState_GET();</div><div class="line">    PyTracebackObject *oldtb = (PyTracebackObject *) tstate-&gt;curexc_traceback;</div><div class="line">    PyTracebackObject *tb = newtracebackobject(oldtb, frame);</div><div class="line">    <span class="keyword">if</span> (tb == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    tstate-&gt;curexc_traceback = (PyObject *)tb;</div><div class="line">    Py_XDECREF(oldtb);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"in frame :"</span>, sys._getframe()</div><div class="line">    <span class="keyword">print</span> <span class="string">"in function :"</span>, sys._getframe().f_code.co_name</div><div class="line">    <span class="number">1</span>/<span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"in frame :"</span>, sys._getframe()</div><div class="line">    <span class="keyword">print</span> <span class="string">"in function :"</span>, sys._getframe().f_code.co_name</div><div class="line">    h()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"in frame :"</span>, sys._getframe()</div><div class="line">    <span class="keyword">print</span> <span class="string">"in function :"</span>, sys._getframe().f_code.co_name</div><div class="line">    g()</div><div class="line"></div><div class="line">f()</div></pre></td></tr></table></figure>
<p>This program will trig the exception at function h().<br>Here is the output of that program.</p>
<p><img src="/images/img_for_2016_02_22/traceback.png" alt="images"></p>
<p><img src="/images/img_for_2016_02_22/frameobjectlist.png" alt="images"></p>
<h3 id="Hacker-Time"><a href="#Hacker-Time" class="headerlink" title="Hacker Time"></a>Hacker Time</h3><p><img src="/images/img_for_2016_02_22/hacktime0.png" alt="images"></p>
<hr>
<p>Photo by Jason Leaster, ChangeDe, HuNan, China<br><img src="/images/img_for_2016_02_22/bridge.jpg" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pythoner may be familiar with exception control like the demo beblow there:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        i += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; KeyboardInterrupt:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;after abort:&quot;&lt;/span&gt;, i&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;get here&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://jasonleaster.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Architecture of Python Virtual Machine</title>
    <link href="http://jasonleaster.github.io/2016/02/21/2016-02-21-architecture-of-python-virtual-machine/"/>
    <id>http://jasonleaster.github.io/2016/02/21/2016-02-21-architecture-of-python-virtual-machine/</id>
    <published>2016-02-21T03:42:50.000Z</published>
    <updated>2017-02-26T14:43:46.434Z</updated>
    
    <content type="html"><![CDATA[<p>Python virtual machine is the core part of this language. After compiling the original python code into <code>Opcode</code>(byte code), python VM will take the job left. Python will take every opcode from <code>PyCodeObject</code>.</p>
<a id="more"></a>
<h3 id="Executing-environment-in-Python-VM"><a href="#Executing-environment-in-Python-VM" class="headerlink" title="Executing environment in Python VM"></a>Executing environment in Python VM</h3><p>Actually, all the things that VM do is simulating what the OS do to excute a program.</p>
<p><img src="/images/img_for_2016_02_21/stack.png" alt="images"></p>
<p>The figure over there show the representation of the model of stack-based machine.</p>
<p>If you are fimilary with system programming in C, it’s easy to understand the meaning of that figure.</p>
<p>But if you are an beginner with programming in C, you may try to finish the lab2( bomb ) in CSAPP. It will help beginner a lot to understand the mechanism of stack-based machine.</p>
<p><strong>We know that all the static information about the program store in <code>PyCodeObject</code>. But what about the dynamic information when the program is running in the Python VM?</strong></p>
<p><code>PyCodeObject</code> can’t include the dynamic information and the environment where program is running.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">number = <span class="number">2016</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    number = <span class="number">42</span></div><div class="line">    <span class="keyword">print</span> number <span class="comment"># 42</span></div></pre></td></tr></table></figure>
<p>You must know <code>number</code> in function <code>f()</code> and the variable which is not inside the block of function <code>f()</code> with the same name. That two variable are in different frame which means envrionment in running time.</p>
<p>In Python, there is a class to describe the envrionment at running time – <code>PyFrameObject</code>. It’s a simulation of stack frame in x86 platform.</p>
<p>You noticed that <code>PyFrameObject</code> is a size-variable Python Object class. Because this class maintain a <code>PyCodeObject</code> and stack in different block have different size. So <code>PyFrameObject</code> can’t be a size fixed class.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[Inlcude/frameobject.h]</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _frame &#123;</div><div class="line">    PyObject_VAR_HEAD</div><div class="line">    <span class="keyword">struct</span> _frame *f_back;  <span class="comment">/* previous frame, or NULL */</span></div><div class="line"></div><div class="line">    PyCodeObject *f_code;   <span class="comment">/* code segment */</span></div><div class="line">    PyObject *f_builtins;   <span class="comment">/* builtin symbol table (PyDictObject) */</span></div><div class="line">    PyObject *f_globals;    <span class="comment">/* global symbol table (PyDictObject) */</span></div><div class="line">    PyObject *f_locals;     <span class="comment">/* local symbol table (any mapping) */</span></div><div class="line">    PyObject **f_valuestack;<span class="comment">/* points after the last local */</span></div><div class="line"></div><div class="line">    <span class="comment">/* Next free slot in f_valuestack.  </span></div><div class="line">    Frame creation sets to f_valuestack.</div><div class="line">    Frame evaluation usually NULLs it, but a frame that yields sets it</div><div class="line">    to the current stack top. */</div><div class="line">    PyObject **f_stacktop;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">&#125; PyFrameObject;</div></pre></td></tr></table></figure>
<p>This figure show the origanization of PyFrameObject like a single linked-list. <code>f_back</code> point to the previous frame. <code>f_valuestack</code> is something like <code>ebp</code> register in x86 and <code>f_stacktop</code> like the <code>esp</code> register.</p>
<p><img src="/images/img_for_2016_02_21/frame.png" alt="images"></p>
<p>How to create a new PyFrameObject? The answer is function <code>PyFrame_New</code>.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[Object/frameobject.c]</div><div class="line"></div><div class="line"><span class="function">PyFrameObject *</span></div><div class="line"><span class="title">PyFrame_New</span><span class="params">(PyThreadState *tstate, PyCodeObject *code, PyObject *globals,</span></div><div class="line">                    PyObject *locals)</div><div class="line">&#123;</div><div class="line">    PyFrameObject *back = tstate-&gt;frame;</div><div class="line">    PyFrameObject *f; <span class="comment">/* New frame object */</span></div><div class="line">    PyObject *builtins;</div><div class="line">    Py_ssize_t i;</div><div class="line"></div><div class="line">    ... </div><div class="line">    <span class="comment">/* Big block of code to set value of @builtins */</span></div><div class="line">    ...</div><div class="line"></div><div class="line">    f-&gt;f_stacktop = f-&gt;f_valuestack;</div><div class="line">    f-&gt;f_builtins = builtins;</div><div class="line">    Py_XINCREF(back);</div><div class="line">    f-&gt;f_back = back;</div><div class="line">    Py_INCREF(code);</div><div class="line">    Py_INCREF(globals);</div><div class="line">    f-&gt;f_globals = globals;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="comment">/* some details are ommited */</span></div><div class="line">    ...</div><div class="line"></div><div class="line">    f-&gt;f_locals = locals;</div><div class="line">    f-&gt;f_tstate = tstate;</div><div class="line">    f-&gt;f_lasti = <span class="number">-1</span>;</div><div class="line">    f-&gt;f_lineno = code-&gt;co_firstlineno;</div><div class="line">    f-&gt;f_iblock = <span class="number">0</span>;</div><div class="line"></div><div class="line">    _PyObject_GC_TRACK(f);</div><div class="line">    <span class="keyword">return</span> f;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Luckly, we could access <code>PyFrameObject</code> in Python at running time.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">value = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    _getframe([depth]) return a frame object from the call stack.</div><div class="line">    If that is deeper than the call stack, ValueError is raised.  The default</div><div class="line">    for depth is zero, returning the frame at the top of the call stack.</div><div class="line">    """</div><div class="line">    frame = sys._getframe()</div><div class="line">    <span class="keyword">print</span> <span class="string">"current function is : "</span>, frame.f_code.co_name</div><div class="line">    caller = frame.f_back</div><div class="line">    <span class="keyword">print</span> <span class="string">"caller function is : "</span>, caller.f_code.co_name</div><div class="line">    <span class="keyword">print</span> <span class="string">"caller's local namespace : "</span>, caller.f_locals</div><div class="line">    <span class="keyword">print</span> <span class="string">"caller's global namespace : "</span>, caller.f_globals.keys()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">1</span></div><div class="line">    b = <span class="number">2</span></div><div class="line">    g()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></div><div class="line">    f()</div><div class="line"></div><div class="line">show()</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">the output of this program :</div><div class="line">jasonleaster@ubuntu:~/Code_by_Jason/Python_language$ python caller.py </div><div class="line">current function is :  g</div><div class="line">caller function is :  f</div><div class="line">caller's local namespace :  &#123;'a': 1, 'b': 2&#125;</div><div class="line">caller's global namespace :  ['g', 'f', '__builtins__', '__file__', 'show', 'value', '__package__', 'sys', '__name__', '__doc__']</div><div class="line">"""</div></pre></td></tr></table></figure>
<h3 id="Name-Scope-and-Namespace"><a href="#Name-Scope-and-Namespace" class="headerlink" title="Name, Scope and Namespace"></a>Name, Scope and Namespace</h3><p>We have knew the three different namespace – locals, globals and builtins.<br>In Python, there is a important basic structure – <code>module</code>.<br>More generally, every <code>.py</code> file is a module in Python. This concept help Python to divide namespace and reuse the program which have been writed.</p>
<p>Name is helpful to memory something which is not simple enough.</p>
<p>Assignment expression in Python have two things in common:</p>
<ul>
<li>Create a new object</li>
<li>build a connection between that new object and a name</li>
</ul>
<p>You may be familary with assignment like this <code>x = 1</code>. But expression like<br><code>def function():</code> and <code>class A():</code>, all these expression are also assignment expressions. What assignment to do is that build a connection between the object and name. It’s like a pair (name, object), (x, 1), (code, codeObject) and so on.</p>
<p>A namespace is corresponding with unique scope.</p>
<p>There is a comparasion between Python and C about namespace.</p>
<p><img src="/images/img_for_2016_02_21/compare.png" alt="images"></p>
<p>Just guess what would happend if you run these two program ?</p>
<p>The right side C program will run correctly but the left side Python program will run into exception for “local variable ‘a’ referenced before assignment”.</p>
<p>The reason is that no matter where the variable are decalred in the scope, all things in that scope can see that variable. But what is interesting is that the assignment expression are after the first print expression. When program run into the first print expression, the assginment are unfinished,<br><strong>which means the local object haven’t created yet.</strong></p>
<p><code>global</code> keyword help programmer to declare a name which is in the global scope.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> a</div><div class="line">    <span class="keyword">print</span> a</div><div class="line">    a = <span class="number">2016</span></div><div class="line">    <span class="keyword">print</span> a</div></pre></td></tr></table></figure>
<p>But you should know that once you declare a variable with <code>global</code> keyword, all thing happen to the variable in the local scope will influence that object in the global scope and change it’s value. After function <code>f()</code> finished, the value of a in global scope changed into 2016.</p>
<h3 id="Runtime-Architecture-of-Python-VM"><a href="#Runtime-Architecture-of-Python-VM" class="headerlink" title="Runtime Architecture of Python VM"></a>Runtime Architecture of Python VM</h3><p>This function is the core part of virtual machine in Python. Once we get the opcode from <code>PyFrameObject</code>, the function <code>PyEval_EvalFrameEx</code> will process that opcode and run it.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">[Python/ceval.c]</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">/* Code access macros */</div><div class="line"></div><div class="line">#define INSTR_OFFSET()  ((int)(next_instr - first_instr))</div><div class="line">#define NEXTOP()        (*next_instr++)</div><div class="line">#define NEXTARG()       (next_instr += 2, (next_instr[-1]&lt;&lt;8) + next_instr[-2])</div><div class="line">#define PEEKARG()       ((next_instr[2]&lt;&lt;8) + next_instr[1])</div><div class="line">#define JUMPTO(x)       (next_instr = first_instr + (x))</div><div class="line">#define JUMPBY(x)       (next_instr += (x))</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">PyObject *</div><div class="line">PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    for(;;)</div><div class="line">    &#123;</div><div class="line">            f-&gt;f_lasti = INSTR_OFFSET();// get the opcode</div><div class="line">            ...</div><div class="line">            opcode = NEXTOP();</div><div class="line"></div><div class="line">            oparg = 0;   </div><div class="line">            /* allows oparg to be stored in a register because</div><div class="line">               it doesn't have to be remembered across a full loop */</div><div class="line">            if (HAS_ARG(opcode))</div><div class="line">                oparg = NEXTARG();</div><div class="line">dispatch_opcode:</div><div class="line">                                                                                    /* Main switch on opcode */</div><div class="line">                                                                                        READ_TIMESTAMP(inst0);</div><div class="line">            switch (opcode) &#123;</div><div class="line"></div><div class="line">                case NOP:</div><div class="line">                    ...</div><div class="line">                case LOAD_FAST:</div><div class="line">                    ...</div><div class="line">                case LOAD_CONST:</div><div class="line">                    ...</div><div class="line">                    ...</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>Photo by QianNan Qu. In XiangTan, HuNan, China.</p>
<p><img src="/images/img_for_2016_02_21/me.jpg" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python virtual machine is the core part of this language. After compiling the original python code into &lt;code&gt;Opcode&lt;/code&gt;(byte code), python VM will take the job left. Python will take every opcode from &lt;code&gt;PyCodeObject&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://jasonleaster.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Web Crawler</title>
    <link href="http://jasonleaster.github.io/2016/02/19/2016-02-19-web-crawler/"/>
    <id>http://jasonleaster.github.io/2016/02/19/2016-02-19-web-crawler/</id>
    <published>2016-02-19T13:27:47.000Z</published>
    <updated>2016-02-21T14:35:40.824Z</updated>
    
    <content type="html"><![CDATA[<p>Finished my first web scrawler … =_=|</p>
<p>Here is all about the spider. It’s small but funny.</p>
<p>After I finish this web scrawler, I learn that. The most important thing to build a web scrawler is not the code but the inverse process. How to build your program like a web browser.</p>
<p>Static web page is easy to get but how about a dynamic web page. Nowadays, more and more website use <code>ajax</code> to meet their bussiness requirement. If you just send a simple request to the server of that web site, you will find than the returned page is just only part of the total user page that you saw in the web browser.</p>
<a id="more"></a>
<p>Here is my demonstration.<br><a href="www.duitang.com">duitang.com</a> is a funny images web site. I love a cute virtual character who is named as Mr.zhangcao . There is a lot of images of that guy. So I want build a web crawler to get that images all.</p>
<p>If you send a request to the <a href="http://www.duitang.com/album/56759353" target="_blank" rel="external">main page</a> and anlysis the returned page (Python’s library <strong>BeautifulSoup</strong> is helpful to analysis html files), you will find there are some links in the html file. But you will only get about 20+ images but not all images that you viewed in the web browser. When you pull down the button of the brower, you will see more and more images coming out to user.</p>
<p>Why the returned page don’t have all links of images? The answer is <code>ajax</code>(asynchronous JavaScript and XML) is a set of web development techniques using many web technologies on the client-side to create asynchronous Web application.</p>
<p><strong>The monitor in browswer will help programmer who is writing a web spider.</strong></p>
<p>Dig into the detail of http transport, you will find a special request which are sent to server by the client browser.</p>
<p>This is that special url.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">http://www.duitang.com/napi/blog/list/by_album/?album_id=</div><div class="line">&amp;limit=24</div><div class="line">&amp;include_fields=top_comments%2Cis_root%2Csource_link%2Cbuyable%2Croot_id%2C</div><div class="line">status%2Clike_count%2Csender%2Creply_count&amp;start=48&amp;_=1455881387791</div></pre></td></tr></table></figure>
<p>If client request that url to the server, the server will return a json data object. The job left is to analysis the json object and then get the resource links.</p>
<p>The important part of building a web crawler is not the code but how to find the useful url and get more useful information.</p>
<p>Here is a screenshut for what my web scrawler got.<br><img src="/images/img_for_2016_02_19/screenshut.png" alt="images"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">Programmer 	: EOF</div><div class="line">E-mail 		: jasonleaster@163.com</div><div class="line">File        : duitang.py</div><div class="line">Date        : 2016.02.19</div><div class="line"></div><div class="line">"""</div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">downloadCount = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">album_id = <span class="number">72129639</span></div><div class="line">limit = <span class="number">100</span></div><div class="line">start = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># This function return a URL and this URL will return a json object data.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">duitangURLMaker</span><span class="params">(album_id, limit, start)</span>:</span></div><div class="line">    url_part_1 = <span class="string">"http://www.duitang.com/napi/blog/list/by_album/?album_id="</span></div><div class="line">    url_part_2 = <span class="string">"&amp;limit="</span></div><div class="line">    url_part_3 = <span class="string">"&amp;include_fields=top_comments%2Cis_root%2Csource_link%2Cbuyable%2Croot_id%2Cstatus%2Clike_count%2Csender%2Creply_count&amp;start="</span></div><div class="line">    url_part_4 = <span class="string">"&amp;_=1455881387791"</span></div><div class="line"></div><div class="line">    URL = url_part_1 + str(album_id) + url_part_2 + str(limit) + url_part_3 + str(start) + url_part_4</div><div class="line"></div><div class="line">    <span class="keyword">return</span> URL</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">imgURLs</span><span class="params">(jsonDict)</span>:</span></div><div class="line">	URLs = []</div><div class="line">	object_list = jsonDict[<span class="string">"data"</span>][<span class="string">"object_list"</span>]</div><div class="line">	<span class="keyword">for</span> item <span class="keyword">in</span> object_list:</div><div class="line">		URLs.append(item[<span class="string">"photo"</span>][<span class="string">"path"</span>])</div><div class="line"></div><div class="line">	<span class="keyword">return</span> URLs</div><div class="line"></div><div class="line">URL 		= duitangURLMaker(album_id, limit, start)</div><div class="line">string 		= urllib.urlopen(URL).read()</div><div class="line">jsonDict 	= json.loads(string)</div><div class="line"></div><div class="line">URLs = imgURLs(jsonDict)</div><div class="line"></div><div class="line"><span class="keyword">for</span> url <span class="keyword">in</span> URLs:</div><div class="line">    Filename = <span class="string">"duitang_%s.jpeg"</span> % (downloadCount)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        urllib.urlretrieve(url, Filename)</div><div class="line">        <span class="keyword">print</span> <span class="string">"Download from"</span>, url</div><div class="line">        downloadCount += <span class="number">1</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"Analyse Failed"</span></div></pre></td></tr></table></figure>
<h3 id="Download-some-pdf-documents-on-a-website"><a href="#Download-some-pdf-documents-on-a-website" class="headerlink" title="Download some pdf documents on a website"></a>Download some pdf documents on a website</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">Programmer 	:   EOF</div><div class="line">E-mail 		:   jasonleaster@163.com</div><div class="line">File        :   stanford.py</div><div class="line">Date        :   2016.02.19</div><div class="line"></div><div class="line">Description:</div><div class="line">	This programmer will help user who is learn cs97 in stanford to download some pdf material in the website.</div><div class="line"></div><div class="line">"""</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">from</span> BeautifulSoup <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">URL = <span class="string">"http://web.stanford.edu/class/cs97si/"</span></div><div class="line">html = urllib.urlopen(URL).read()</div><div class="line">soup = BeautifulSoup(html)</div><div class="line">tags = soup(<span class="string">'a'</span>)</div><div class="line"></div><div class="line">downloadCount = <span class="number">0</span></div><div class="line"></div><div class="line">pattern = <span class="string">".pdf$"</span></div><div class="line">regex = re.compile(pattern)</div><div class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> tags:</div><div class="line">    fileName = tag[<span class="string">"href"</span>]</div><div class="line">    url = URL + fileName</div><div class="line">    </div><div class="line">    <span class="string">"""</span></div><div class="line">    search(string[, pos[, endpos]]) --&gt; match object or None.</div><div class="line">    Scan through string looking for a match, and return a corresponding</div><div class="line">    MatchObject instance. Return None if no position in the string matches.</div><div class="line">    """</div><div class="line">    url = regex.search(url)</div><div class="line">    regex.search</div><div class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        url = url.string</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            urllib.urlretrieve(url, fileName)</div><div class="line">            <span class="keyword">print</span> <span class="string">"Download from"</span>, url</div><div class="line">            downloadCount += <span class="number">1</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"Analyse Failed"</span></div></pre></td></tr></table></figure>
<hr>
<p>Photo by Jason Leaster. LiuYe Lake in ChangDe, HuNan, China.<br><img src="/images/img_for_2016_02_19/liuyehu.jpg" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Finished my first web scrawler … =_=|&lt;/p&gt;
&lt;p&gt;Here is all about the spider. It’s small but funny.&lt;/p&gt;
&lt;p&gt;After I finish this web scrawler, I learn that. The most important thing to build a web scrawler is not the code but the inverse process. How to build your program like a web browser.&lt;/p&gt;
&lt;p&gt;Static web page is easy to get but how about a dynamic web page. Nowadays, more and more website use &lt;code&gt;ajax&lt;/code&gt; to meet their bussiness requirement. If you just send a simple request to the server of that web site, you will find than the returned page is just only part of the total user page that you saw in the web browser.&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://jasonleaster.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Brief introduction to opcodes in Python</title>
    <link href="http://jasonleaster.github.io/2016/02/06/2016-02-06-brief-introduction-to-opcodes-in-python/"/>
    <id>http://jasonleaster.github.io/2016/02/06/2016-02-06-brief-introduction-to-opcodes-in-python/</id>
    <published>2016-02-06T10:39:50.000Z</published>
    <updated>2016-02-15T12:19:13.983Z</updated>
    
    <content type="html"><![CDATA[<p>Python program is compiled down to bytecode which is sort of like assembly for the python virtual machine. The interpreter executes each of these bytecodes one by one.</p>
<p>Let’s look the following code. It’s easy to understand what it is doing without my explanation.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[demo.py]</div><div class="line"></div><div class="line">x = <span class="number">1</span></div><div class="line">y = <span class="number">2</span></div><div class="line">z = x + y</div><div class="line"><span class="keyword">print</span> <span class="string">"x, y, z"</span>, x, y, z</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>Programmer can use python module <code>dis</code> to transform that code into the assemble program of Python.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">python -m dis <span class="string">"./demo.py"</span></div><div class="line"><span class="comment">#line number </span></div><div class="line"><span class="comment">#in the       #assemble code           # object name in the source code</span></div><div class="line"><span class="comment">#source code</span></div><div class="line"><span class="number">1</span>           <span class="number">0</span> LOAD_CONST               <span class="number">0</span> (<span class="number">1</span>)</div><div class="line">            <span class="number">3</span> STORE_NAME               <span class="number">0</span> (x)</div><div class="line"></div><div class="line"><span class="number">2</span>           <span class="number">6</span> LOAD_CONST               <span class="number">1</span> (<span class="number">2</span>)</div><div class="line">            <span class="number">9</span> STORE_NAME               <span class="number">1</span> (y)</div><div class="line"></div><div class="line"><span class="number">3</span>          <span class="number">12</span> LOAD_NAME                <span class="number">0</span> (x)</div><div class="line">           <span class="number">15</span> LOAD_NAME                <span class="number">1</span> (y)</div><div class="line">           <span class="number">18</span> BINARY_ADD</div><div class="line">           <span class="number">19</span> STORE_NAME               <span class="number">2</span> (z)</div><div class="line"></div><div class="line"><span class="number">4</span>          <span class="number">22</span> LOAD_NAME                <span class="number">0</span> (x)</div><div class="line">           <span class="number">25</span> PRINT_ITEM</div><div class="line">           <span class="number">26</span> LOAD_NAME                <span class="number">1</span> (y)</div><div class="line">           <span class="number">29</span> PRINT_ITEM</div><div class="line">           <span class="number">30</span> LOAD_NAME                <span class="number">2</span> (z)</div><div class="line">           <span class="number">33</span> PRINT_ITEM</div><div class="line">           <span class="number">34</span> PRINT_NEWLINE</div><div class="line">           <span class="number">35</span> LOAD_CONST               <span class="number">2</span> (<span class="keyword">None</span>)</div><div class="line">           <span class="number">38</span> RETURN_VALUE</div><div class="line"></div><div class="line"><span class="comment">########################################################</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">In the interpreter of Python, programmer also can call</div><div class="line">the built-in function @compile and import module @dis</div><div class="line">to do the same thing.</div><div class="line">"""</div><div class="line"></div><div class="line">In [<span class="number">5</span>]: source = open(<span class="string">"./hello.py"</span>).read()</div><div class="line"></div><div class="line">In [<span class="number">6</span>]: code = compile(source, <span class="string">"demo"</span>, <span class="string">"exec"</span>)</div><div class="line"></div><div class="line">In [<span class="number">7</span>]: <span class="keyword">import</span> dis</div><div class="line"></div><div class="line">In [<span class="number">8</span>]: dis.dis(code)</div></pre></td></tr></table></figure>
<p>It’s not hard to understand the <code>opcode</code>. In implementation of CPython, all opcode defined as Macro in the header file <code>Include/opcode.h</code>. </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[Include/opcode.h]</div><div class="line">...</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOAD_CONST  100 <span class="comment">/* Index in const list */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOAD_NAME   101 <span class="comment">/* Index in name list */</span></span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>The evaluation machine of Python is a stack-based machine.<br>If you find the detail of <code>18 BINARY_ADD</code>, you will find that this opcode<br>will pop the two object on the stack and then add them together.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[Python/ceval.c]</div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">/* Stack manipulation macros */</span></div><div class="line"></div><div class="line"><span class="comment">/* The stack can grow at most MAXINT deep, as co_nlocals and</span></div><div class="line">      co_stacksize are ints. */</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_LEVEL()     ((int)(stack_pointer - f-&gt;f_valuestack))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EMPTY()           (STACK_LEVEL() == 0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TOP()             (stack_pointer[-1])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SECOND()          (stack_pointer[-2])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> THIRD()           (stack_pointer[-3])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOURTH()          (stack_pointer[-4])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PEEK(n)           (stack_pointer[-(n)])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SET_TOP(v)        (stack_pointer[-1] = (v))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SET_SECOND(v)     (stack_pointer[-2] = (v))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SET_THIRD(v)      (stack_pointer[-3] = (v))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SET_FOURTH(v)     (stack_pointer[-4] = (v))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SET_VALUE(n, v)   (stack_pointer[-(n)] = (v))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BASIC_STACKADJ(n) (stack_pointer += n)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BASIC_PUSH(v)     (*stack_pointer++ = (v))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BASIC_POP()       (*--stack_pointer)</span></div><div class="line">...</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python program is compiled down to bytecode which is sort of like assembly for the python virtual machine. The interpreter executes each of these bytecodes one by one.&lt;/p&gt;
&lt;p&gt;Let’s look the following code. It’s easy to understand what it is doing without my explanation.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[demo.py]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;y = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;z = x + y&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;x, y, z&quot;&lt;/span&gt;, x, y, z&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://jasonleaster.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Functional Programming in Python</title>
    <link href="http://jasonleaster.github.io/2016/02/05/2016-02-05-functional-programming-in-python/"/>
    <id>http://jasonleaster.github.io/2016/02/05/2016-02-05-functional-programming-in-python/</id>
    <published>2016-02-04T18:37:57.000Z</published>
    <updated>2016-02-06T08:30:53.211Z</updated>
    
    <content type="html"><![CDATA[<p>Functional programming is not only use functions.<br>Think of “y = f(x)” or “h = f * g”</p>
<p>For comparasion, there are different paradigms in programming.</p>
<ul>
<li>Structured/Procedural – Functions, loops, conditions</li>
<li>Object-Oriented Programming (OOP) – Classes, objects, methods</li>
<li>Functional Programming – Decorators, comprehensions, and generators</li>
<li>Logic Programming</li>
</ul>
<p>Functions in Python are <code>first class value</code>. It can take functions as arguments and return functions like a value.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">function @calc take @f as an argument and use it as a function.</div><div class="line">Something like function pointer in C.</div><div class="line">"""</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(f, x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> f(x, y)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x - y</div><div class="line"></div><div class="line">calc(add, <span class="number">10</span>, <span class="number">20</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>In Python, there have anonymous functions which is called <code>Lambda Expression</code> which’s body is limited to one expression.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(f, x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> f(x, y)</div><div class="line"></div><div class="line">calc(<span class="keyword">lambda</span> x, y: x + y, <span class="number">10</span>, <span class="number">20</span>)</div></pre></td></tr></table></figure>
<p>Here, lambda expression used as a argument which is passed into function <code>calc</code>. Function like <code>add</code> and <code>sub</code>, they are too short and don’t need a special name to be identified. So, Python support a mechanism – anonymous function which is called <code>Lambda Expression</code>.</p>
<p>There is a another demo. We will change the code from procedure oriented into functional style.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">In a procedure way.</div><div class="line">"""</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment_each</span><span class="params">(elements)</span>:</span></div><div class="line">    results = []</div><div class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> elements:</div><div class="line">        results.append(incr(elem))</div><div class="line">    <span class="keyword">return</span> results</div><div class="line"></div><div class="line">increment_each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="comment"># -&gt; [2, 3, 4]</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">In a functional way.</div><div class="line">"""</div><div class="line">map(incr, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="comment"># or</span></div><div class="line">map(<span class="keyword">lambda</span> x: x + <span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"></div><div class="line"><span class="comment"># if we want to get the length of each element in a iterable object</span></div><div class="line">map(len, iterable_object)</div></pre></td></tr></table></figure>
<p><code>filter</code> is a related idea in functional tools like map.<br><code>filter</code> return a new sequence where values are taken from the given sequence if they return True when passed to a given function.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="comment"># -&gt; [2, 4]</span></div></pre></td></tr></table></figure>
<p><code>reduce</code> will accumulate and return a single result, given a sequence<br>and passing each value to a function along with the current result.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line">reduce(<span class="keyword">lambda</span> accum, current: accum + current, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>)</div><div class="line"><span class="comment"># -&gt; 6</span></div></pre></td></tr></table></figure>
<h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><p>In Python, function is first-class value and can be used as returned value.<br>So, programmer can define nested functions in Python like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">Nested function</div><div class="line">"""</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"I am the inner function"</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line">func = outer()</div><div class="line"></div><div class="line">func()</div><div class="line"><span class="comment"># -&gt; I am the inner function</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">Closure</div><div class="line">"""</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(var = <span class="number">10</span>)</span>:</span></div><div class="line"></div><div class="line">    <span class="string">"Local scope of function @outer"</span></div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(number)</span>:</span></div><div class="line">         <span class="keyword">print</span> <span class="string">"I am the inner function!"</span></div><div class="line">         <span class="string">"""</span></div><div class="line">         You can't change value of variable once the</div><div class="line">         @outer function finished. You will get error</div><div class="line">         if you modify variable which is not in scope</div><div class="line">         of function @inner. You can't modify @var</div><div class="line">         like this: var += 1 (You will get exception</div><div class="line">         information like "UnboundLocalError")</div><div class="line">         """</div><div class="line">         <span class="keyword">return</span> var + number</div><div class="line"></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line">func = outer(<span class="number">10</span>)</div><div class="line"></div><div class="line">func(<span class="number">90</span>)</div><div class="line"><span class="comment"># -&gt; 100</span></div></pre></td></tr></table></figure>
<p>Look the demo below there.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cheker</span><span class="params">(arguments_of_func)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">            @checker receive the same arguments as @func</div><div class="line">            and do something that @func didn't do.</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> new_retVal</div><div class="line"></div><div class="line">    <span class="keyword">return</span> checker</div></pre></td></tr></table></figure>
<p>Actually, the reture value of <code>wrapper</code> is a function just little different from the original function passed into <code>wrapper</code> – <code>func</code>. Function <code>wrapper</code> like a shell on the original function and return with a more powerful function. That’s decorator. <code>wrapper</code> is a decorator.</p>
<p><strong>Decorator: A decorator is any callable Python object that is used to modify a function, method or class definition. A decorator is passed th original object being defined and returns a modified object, which is then bound to the name in the definition. Python decorators were inspired in part by Java annotations, and have a similar syntax; teh decorator syntax is pure syntactic sugar, using @ as the keyword               – Wikipedia</strong></p>
<p>Here is a more generic decorators</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">def wrapper(func):</div><div class="line">    def inner(*args, **kwargs)</div><div class="line">        print "Show arguments: %s, %s" % (args, kwargs)</div><div class="line">        return func(*args, **kwargs)</div><div class="line">    return inner</div><div class="line"></div><div class="line">@wrapper</div><div class="line">def adder(x, y)</div><div class="line">    return x + y</div><div class="line"></div><div class="line">print adder(10, 90)</div><div class="line"></div><div class="line">#-&gt; Show arguments: (10, 90), &#123;&#125;</div><div class="line">#   100</div></pre></td></tr></table></figure>
<p>A better and more detailed explaination reader could read the blog<br><a href="http://www.simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/" target="_blank" rel="external">Understanding Python Decoratos in 12 Easy Steps!</a><br>which is written by <code>simeon franklin</code>.</p>
<h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>A <code>generator</code> is a special type of iterator(not vice versa!).<br>Generator is a factory that lazily produces values.</p>
<p>There are two types of generators in Python: generator functions and generator expression.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">Demo for generator</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">()</span>:</span></div><div class="line">    prev, curr = <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="string">"""</span></div><div class="line">            There is no @return keyword in generator,</div><div class="line">        but there must be a @yield with a return object </div><div class="line">        if there is a  generator function.</div><div class="line">        """</div><div class="line">        <span class="keyword">yield</span> curr </div><div class="line">        prev, curr = curr, prev + curr</div><div class="line"></div><div class="line">f = fib()</div><div class="line">f.next()</div><div class="line"></div><div class="line"><span class="comment">############################################</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">Generator Expression</div><div class="line">"""</div><div class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line">lazy_square = ( x * x <span class="keyword">for</span> x <span class="keyword">in</span> numbers)</div><div class="line"><span class="string">"""</span></div><div class="line">Type:        generator</div><div class="line">String form: &lt;generator object &lt;genexpr&gt; at 0x7fd3bc119fa0&gt;</div><div class="line">Docstring:   &lt;no docstring&gt;</div><div class="line">"""</div><div class="line"></div><div class="line">In [<span class="number">18</span>]: lazy_square == list</div><div class="line">Out[<span class="number">18</span>]: <span class="keyword">False</span></div><div class="line"></div><div class="line">In [<span class="number">19</span>]: lazy_square</div><div class="line">Out[<span class="number">19</span>]: &lt;generator object &lt;genexpr&gt; at <span class="number">0x7fd3bc0da410</span>&gt;</div><div class="line"></div><div class="line">In [<span class="number">20</span>]: lazy_square.next()</div><div class="line">Out[<span class="number">20</span>]: <span class="number">1</span></div><div class="line"></div><div class="line">In [<span class="number">21</span>]: lazy_square.next()</div><div class="line">Out[<span class="number">21</span>]: <span class="number">4</span></div><div class="line"></div><div class="line">In [<span class="number">22</span>]: lazy_square.next()</div><div class="line">Out[<span class="number">22</span>]: <span class="number">9</span></div></pre></td></tr></table></figure>
<hr>
<p>Photo by Jason Leaster in ChangDe, HuNan, China.</p>
<p>What a big banana :)</p>
<p><img src="/images/img_for_2016_02_06/banana.png" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Functional programming is not only use functions.&lt;br&gt;Think of “y = f(x)” or “h = f * g”&lt;/p&gt;
&lt;p&gt;For comparasion, there are different paradigms in programming.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Structured/Procedural – Functions, loops, conditions&lt;/li&gt;
&lt;li&gt;Object-Oriented Programming (OOP) – Classes, objects, methods&lt;/li&gt;
&lt;li&gt;Functional Programming – Decorators, comprehensions, and generators&lt;/li&gt;
&lt;li&gt;Logic Programming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Functions in Python are &lt;code&gt;first class value&lt;/code&gt;. It can take functions as arguments and return functions like a value.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function @calc take @f as an argument and use it as a function.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Something like function pointer in C.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(f, x, y)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f(x, y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x - y&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;calc(add, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://jasonleaster.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Dict Object in Python</title>
    <link href="http://jasonleaster.github.io/2016/02/04/2016-02-04-dict-object-in-python/"/>
    <id>http://jasonleaster.github.io/2016/02/04/2016-02-04-dict-object-in-python/</id>
    <published>2016-02-04T04:54:11.000Z</published>
    <updated>2016-04-09T05:53:49.889Z</updated>
    
    <content type="html"><![CDATA[<p>Try to answer these question.</p>
<ol>
<li><p>Whatare dictionaries and sets good for?</p>
</li>
<li><p>How are dictionaries and set the same?</p>
</li>
<li><p>What is the overhead when using a dictionary?</p>
</li>
<li><p>How can I optimize the performance of a dictionary?</p>
</li>
<li><p>How does Python use dictionaries to keep track of namespace?</p>
</li>
</ol>
<a id="more"></a>
<p>Dictionary object type – mapping from hashable object to object </p>
<p>In the implemenation, Python don’t choose <code>Red-Black Tree</code> as the basic data structure but Hash Table with a special technology – <code>Open Addressing</code>.</p>
<p>About open addressing:</p>
<blockquote>
<p>In computer science, lazy deletion refers to a method of deleting elements from a hash table that uses open addressing. In this method, deletions are done by marking an element as deleted, rather than erasing it entirely. Deleted locations are treated as empty when inserting and as occupied during a search. – Wikipedia</p>
</blockquote>
<p>There three kinds of slots in the table:</p>
<ol>
<li><p>Unused.  <code>me_key</code> == <code>me_value</code> == <code>NULL</code><br>Does not hold an active (key, value) pair now and never did.  Unused can transition to Active upon key insertion.  This is the only case in which <code>me_key</code> is NULL, and is each slot’s initial state.</p>
</li>
<li><p>Active.  <code>me_key</code> != NULL and <code>me_key</code> != dummy and <code>me_value</code> != NULL Holds an active (key, value) pair.  Active can transition to Dummy upon key deletion.  This is the only case in which <code>me_value</code> != NULL.</p>
</li>
<li><p>Dummy.  <code>me_key</code> == dummy and <code>me_value</code> == NULL<br>Previously held an active (key, value) pair, but that was deleted and an active pair has not yet overwritten the slot.  Dummy can transition to Active upon key insertion. Dummy slots cannot be made Unused again (cannot have <code>me_key</code> set to NULL), else the probe sequence in case of collision would have no way to know they were once active.</p>
</li>
</ol>
<p>Here, Python define the entry data type of dict in python <code>PyDictObejct</code>. A entry is like a paire (key, value). To avoid calculating the hash value of <code>me_key</code>, <code>me_hash</code> used as a cached value for it.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[Include/dictobject.h]</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    Py_ssize_t me_hash;</div><div class="line">    PyObject *me_key;</div><div class="line">    PyObject *me_value;</div><div class="line">&#125; PyDictEntry;</div></pre></td></tr></table></figure>
<p>   To ensure the lookup algorithm terminates, there must be at least one Unused slot (NULL key) in the table.</p>
<p>   The value <code>ma_fill</code> is the number of non-NULL keys (sum of Active and Dummy);<br>   <code>ma_used</code> is the number of non-NULL, non-dummy keys (== the number of non-NULL values == the number of Active items).<br>   To avoid slowing down lookups on a near-full table, we resize the table when it’s <font color="red">two-thirds</font> full.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[Include/dictobject.h]</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _dictobject PyDictObject;</div><div class="line"><span class="keyword">struct</span> _dictobject &#123;</div><div class="line">    PyObject_HEAD</div><div class="line">    Py_ssize_t ma_fill;  <span class="comment">/* # Active + # Dummy */</span></div><div class="line">    Py_ssize_t ma_used;  <span class="comment">/* # Active */</span></div><div class="line">    <span class="comment">/* The table contains ma_mask + 1 slots, and that's a power of 2.</span></div><div class="line">     * We store the mask instead of the size because the mask is more</div><div class="line">     * frequently needed.</div><div class="line">     */</div><div class="line">    Py_ssize_t ma_mask;</div><div class="line"></div><div class="line">     */</div><div class="line">    PyDictEntry *ma_table;</div><div class="line">    PyDictEntry *(*ma_lookup)(PyDictObject *mp, PyObject *key, <span class="keyword">long</span> hash);</div><div class="line">    PyDictEntry ma_smalltable[PyDict_MINSIZE];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>PyDict_MINSIZE</code> is the minimum size of a dictionary.  This many slots are allocated directly in the dict object.<br>(in the <code>ma_smalltable</code> member).<br>It must be a power of 2, and at least 4.  8 allows dicts with no more than 5 active entries to live in <code>ma_smalltable</code> (and so avoid an additional malloc); instrumentation suggested this suffices for the majority of dicts (consisting mostly of usually-small instance dicts and usually-small dicts created to pass keyword arguments).</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PyDict_MINSIZE 8</span></div></pre></td></tr></table></figure>
<p>Here defined a array <code>ma_smalltable</code> which store 8 <code>PyDictEntry</code>.<br><code>ma_table</code> points to <code>ma_smalltable</code> for small tables, else to<br>additional malloc’ed memory.  <code>ma_table</code> is never NULL!<br>This rule saves repeated runtime null-tests in the workhorse getitem and setitem calls.</p>
<p>I draw a figure to make the idea easy to be understand.</p>
<p><img src="/images/img_for_2016_02_04/dictTable.png" alt="images"></p>
<p>The question is coming. When Python will resize the diction table of that object?</p>
<p>The answer is in function <code>dictresize</code> in file <code>Object/dictobject.c</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[Object/dictobject.c]</div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// Recall the rule of 2/3 --notes by Jason Leaster</span></div><div class="line"><span class="keyword">if</span> (!(mp-&gt;ma_used &gt; n_used &amp;&amp; mp-&gt;ma_fill*<span class="number">3</span> &gt;= (mp-&gt;ma_mask+<span class="number">1</span>)*<span class="number">2</span>)) </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            </div><div class="line">    <span class="comment">// Debug information add by Jason Leaster</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Try to resize the old diction\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"mp-&gt;ma_used  :%p \n"</span>, mp-&gt;ma_used);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"mp-&gt;ma_fill  :%p \n"</span>, mp-&gt;ma_fill);</div><div class="line">                        </div><div class="line">    <span class="keyword">return</span> dictresize(mp, (mp-&gt;ma_used &gt; <span class="number">50000</span> ? <span class="number">2</span> : <span class="number">4</span>) * mp-&gt;ma_used);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Attention, once <code>mp-ma_fill</code> bigger or equal to (2/3)<code>mp-&gt;ma_mask+1</code> and we have finished a insert operation(<code>mp-&gt;ma_used</code> &gt; <code>n_used</code>), <strong>we should resize the container(ma_table) of  the dictionary</strong>.</p>
<p>Yes, we should resize the dictionary object if there have 6 or more object in the container but <strong>not</strong> 8.</p>
<p>Here is the result of hacking.</p>
<p><img src="/images/img_for_2016_02_04/testResizeDict.png" alt="images"></p>
<p>Actually, <code>dummy</code> PyDictObject is just a <code>PyStringObject</code> in Python. Initially, dummy is a pointer in C but it finally comes to a <code>PyStringObject</code> after initialization of <code>PyDictObject</code> first time.</p>
<p><strong>It’s important to note that resizing can happen to make a hash table larger or smaller. This is , if sufficiently many element of a hash table are deleted, the table can be scaled down in size. However, resizing only happens during an insert.</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* Object used as dummy key to fill deleted entries */</span></div><div class="line"><span class="keyword">static</span> PyObject *dummy = <span class="literal">NULL</span>; <span class="comment">/* Initialized by first call to newPyDictObject() */</span></div></pre></td></tr></table></figure>
<h3 id="Initialization-Part"><a href="#Initialization-Part" class="headerlink" title="Initialization Part"></a>Initialization Part</h3><p>There are two ways to create a dict:  <code>PyDict_New()</code> is the main C API function,<br>and the <code>tp_new</code> slot maps to <code>dict_new()</code>.  In the latter case we<br>    can save a little time over what PyDict_New does because it’s guaranteed<br>    that the PyDictObject struct is already zeroed out.<br>    Everyone except dict_new() should use EMPTY_TO_MINSIZE (unless they have an excellent reason not to).</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT_NONZERO_DICT_SLOTS(mp) do &#123; \</span></div><div class="line">    (mp)-&gt;ma_table = (mp)-&gt;ma_smalltable;\</div><div class="line">    (mp)-&gt;ma_mask = PyDict_MINSIZE - 1; \</div><div class="line">&#125; while(0)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EMPTY_TO_MINSIZE(mp) do &#123;   \</span></div><div class="line">    memset((mp)-&gt;ma_smalltable, 0, sizeof((mp)-&gt;ma_smalltable))\</div><div class="line">    (mp)-&gt;ma_used = (mp)-&gt;ma_fill = 0;\</div><div class="line">    INIT_NONZERO_DICT_SLOTS(mp); \</div><div class="line">        &#125; while(0)</div></pre></td></tr></table></figure>
<hr>
<p>Photo By Jason Leaster</p>
<p><img src="/images/img_for_2016_02_04/street.jpg" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Try to answer these question.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Whatare dictionaries and sets good for?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How are dictionaries and set the same?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the overhead when using a dictionary?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How can I optimize the performance of a dictionary?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How does Python use dictionaries to keep track of namespace?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jasonleaster.github.io/categories/Python/"/>
    
      <category term="C" scheme="http://jasonleaster.github.io/categories/Python/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Int Object in Python</title>
    <link href="http://jasonleaster.github.io/2016/02/03/2016-02-03-memory-model-of-int-object-in-python/"/>
    <id>http://jasonleaster.github.io/2016/02/03/2016-02-03-memory-model-of-int-object-in-python/</id>
    <published>2016-02-02T16:56:31.000Z</published>
    <updated>2017-02-26T14:58:05.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h3><p>Here, we are goint to analysis how Python deal with <code>Int Object</code> in itself.</p>
<p>First of all, we should have a environment which help us to explore the detail of the implementation in <code>Python 2.7</code>. At the same time, our operation shouldn’t influence the origianl Python in your workstation, if you have install Python before.</p>
<p>You can get the source code from offical website of Python. And you will find that there have a file <code>configure</code> in the directory of the source.</p>
<p><em>In the file configure, you can replace all string ‘Python’ with ‘pyLab’. And then move all file prefix with <code>Python</code> into <code>pyLab</code>(mainly in directory Misc/ and Modules)</em></p>
<p>Don’t forget to run the configuration file – configure with the option <code>--prefix=Location where you want the Python which is for lab to install</code></p>
<p>Finally, just run <code>make &amp; make install</code></p>
<p>Repeat myself again, the reason that I move all ‘Python’ into ‘pyLab’ is all for making a difference with the original instance which is official and it shouldn’t be influence by any operation from us.</p>
<h3 id="Rules-of-Object-in-Python"><a href="#Rules-of-Object-in-Python" class="headerlink" title="Rules of Object in Python."></a>Rules of Object in Python.</h3><ul>
<li>Objects are structures allocated on the heap.  </li>
<li>Objects are never allocated statically or on the stack; they must be accessed through special macros and functions only.  </li>
</ul>
<a id="more"></a>
<ul>
<li><p>An object has a ‘reference count’ that is increased or decreased when a pointer to the object is copied or deleted; when the reference count reaches zero there are no references to the object left and it can be removed from the heap.</p>
</li>
<li><p>An object has a ‘type’ that determines what it represents and what kind of data it contains.  An object’s type is fixed when it is created. Types themselves are represented as objects; an object contains a pointer to the corresponding type object.  The type itself has a type pointer pointing to the object representing the type ‘type’, which contains a pointer to itself!).</p>
</li>
<li><p>Objects do not float around in memory; once allocated an object keeps the same size and address.  Objects that must hold variable-size data can contain pointers to variable-size parts of the object.  Not all objects of the same type have the same size; but the size cannot change after allocation.  </p>
</li>
<li><p>Objects are always accessed through pointers of the type ‘PyObject *‘. </p>
</li>
</ul>
<h3 id="Firt-glance-at-the-implementation"><a href="#Firt-glance-at-the-implementation" class="headerlink" title="Firt glance at the implementation."></a>Firt glance at the implementation.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">   There are two basic different type of Object in Python.</div><div class="line">   1. PyObject.    (Immutable Object eg: int, string object which's </div><div class="line">                                size is known when it is creating.)</div><div class="line">   2. PyVarObject. (Mutable Object eg: list object which's size is </div><div class="line">                    unknown when it is creating and support the </div><div class="line">                    operation of deleting and inserting)</div><div class="line">                        -- notes by Jason Leaster</div><div class="line"> */</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _object &#123;</div><div class="line">    PyObject_HEAD</div><div class="line">&#125; PyObject;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    PyObject_VAR_HEAD</div><div class="line">&#125; PyVarObject;</div></pre></td></tr></table></figure>
<p>Actually, PyObject are created by Macro <code>PyObject_HEAD</code></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[Include/object.h]</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _PyObject_HEAD_EXTRA            \</span></div><div class="line">    struct _object *_ob_next;           \</div><div class="line">    struct _object *_ob_prev;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _PyObject_EXTRA_INIT 0, 0,</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PyObject_HEAD                   \</span></div><div class="line">    _PyObject_HEAD_EXTRA                \</div><div class="line">    Py_ssize_t ob_refcnt;               \</div><div class="line">    struct _typeobject *ob_type;</div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line">   There also have some Macro to get the data member of PyObject.</div><div class="line">                    -- notes by Jason Leaster</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Py_REFCNT(ob)           (((PyObject*)(ob))-&gt;ob_refcnt)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Py_TYPE(ob)             (((PyObject*)(ob))-&gt;ob_type)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Py_SIZE(ob)             (((PyVarObject*)(ob))-&gt;ob_size)</span></div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>Typically, the Int Object in Python <code>PyIntObject</code> is a <code>immutable object</code>. Once we created the object, we can’t change the value in that object.</p>
<p>Back to our topic, let’s look at the definition of <code>PyIntObject</code>.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//[Include/intobject.h]</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</div><div class="line">    PyObject_HEAD</div><div class="line">    <span class="keyword">long</span> ob_ival;</div><div class="line">&#125; PyIntObject;</div></pre></td></tr></table></figure>
<p>Aha, the <code>PyIntObject</code> is just a simple capsulation of <code>long</code> in C.<br>This object maintain a long data member.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">int_compare</span><span class="params">(PyIntObject *v, PyIntObject *w)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    You will sigh that "the author of Python is a master in </div><div class="line">    programming". For efficient, they use `register` keyword and </div><div class="line">    try to apply for using register to store the local variable.</div><div class="line">                            -- notes by Jason Leaster.</div><div class="line">    */</div><div class="line">    <span class="keyword">register</span> <span class="keyword">long</span> i = v-&gt;ob_ival;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">long</span> j = w-&gt;ob_ival;</div><div class="line">    <span class="keyword">return</span> (i &lt; j) ? <span class="number">-1</span> : (i &gt; j) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>How about the detail of printing a integer in Python ?</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* ARGSUSED */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">int_print</span><span class="params">(PyIntObject *v, FILE *fp, <span class="keyword">int</span> flags)</span></div><div class="line">    <span class="comment">/* flags -- not used but required by interface */</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">long</span> int_val = v-&gt;ob_ival;</div><div class="line">    <span class="function">Py_BEGIN_ALLOW_THREADS</span></div><div class="line">    <span class="title">fprintf</span><span class="params">(fp, <span class="string">"%ld"</span>, int_val)</span>;</div><div class="line">    Py_END_ALLOW_THREADS</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>There have many others method which are defined in <code>PyNumberMethods</code>. Python programmer can get the information about the object with a data member <code>__doc__</code>, like this:</p>
<p><img src="/images/img_for_2016_02_03/doc.png" alt="images"></p>
<p>The implementation of that is just a plain text string in <code>Object/intobject.c</code></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">PyDoc_STRVAR(int_doc,</div><div class="line"><span class="string">"int(x=0) -&gt; int or long\n\</span></div><div class="line">int(x, base=10) -&gt; int or long\n\</div><div class="line">\n\</div><div class="line">Convert a number or string to an integer, or return 0 if no arguments\n\</div><div class="line">are given.  If x is floating point, the conversion truncates towards zero.\n\</div><div class="line">If x is outside the integer range, the function returns a long instead.\n\</div><div class="line">\n\</div><div class="line">If x is not a number or if base is given, then x must be a string or\n\</div><div class="line">Unicode object representing an integer literal in the given base.  The\n\</div><div class="line">literal can be preceded by '+' or '-' and be surrounded by whitespace.\n\</div><div class="line">The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\n\</div><div class="line">interpret the base from the string as an integer literal.\n\</div><div class="line">&gt;&gt;&gt; int('0b100', base=0)\n\</div><div class="line">4");</div></pre></td></tr></table></figure>
<h3 id="Initialization-of-PyIntObject"><a href="#Initialization-of-PyIntObject" class="headerlink" title="Initialization of PyIntObject"></a>Initialization of PyIntObject</h3><p>Python support many different API to construct a <code>PyIntObject</code>.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[Include/intobject.h]</div><div class="line">...</div><div class="line">PyAPI_FUNC(PyObject *) PyInt_FromString(<span class="keyword">char</span>*, <span class="keyword">char</span>**, <span class="keyword">int</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Py_USING_UNICODE</span></div><div class="line">PyAPI_FUNC(PyObject *) PyInt_FromUnicode(Py_UNICODE*, Py_ssize_t, <span class="keyword">int</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">PyAPI_FUNC(PyObject *) PyInt_FromLong(<span class="keyword">long</span>);</div><div class="line">PyAPI_FUNC(PyObject *) PyInt_FromSize_t(<span class="keyword">size_t</span>);</div><div class="line">PyAPI_FUNC(PyObject *) PyInt_FromSsize_t(Py_ssize_t);</div><div class="line">...</div></pre></td></tr></table></figure>
<p>Before we dig into the implementation of the initialization process.<br>Let’s do a lab.</p>
<p><img src="/images/img_for_2016_02_03/different_address.png" alt="images"></p>
<p><code>id(object)</code> will returen the address of object in CPython.(If you are interesting in the implementation<br>of built-in method id(object), you can jump to the end of this article and I presented how CPython implement this function.)</p>
<p>Try to answer the following question.</p>
<p>Why int object <code>m</code> and <code>n</code> of value <code>1000</code> have different address?</p>
<p>Why int object <code>x</code> and <code>y</code> of value <code>1</code>    have the same  address?</p>
<p>The answer relate to the mechanism with numbers in Python.</p>
<p><em>In daily programming stuff, small number are used frequently. But large number may used frequent more than small numbers</em></p>
<p>If there isn’t a special mechanism, Python will allocate memory(call malloc() in C) again and again. This stratege isn’t efficient at run time.<br>So, Python support a mechanism which will create small number only once but not bigger number.</p>
<p>There also have the other question. What means big? What means small?<br>It’s not clearly in theory. But in the implementation, there have a trade off. People can’t cache all integer number for the limitation of memory(RAM).</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[Object/intobject]</div><div class="line">...</div><div class="line"><span class="comment">/*</span></div><div class="line">NSMALLPOSINTS:    Numbers of small positive integers number</div><div class="line">NSMALLNEGINTS:    Numbers of small negative integers number</div><div class="line">        --notes by Jason Leaster</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NSMALLPOSINTS  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSMALLPOSINTS           257</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NSMALLNEGINTS  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSMALLNEGINTS           5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> NSMALLNEGINTS + NSMALLPOSINTS &gt; 0</span></div><div class="line"><span class="comment">/*  References to small integers are saved in this array so that they</span></div><div class="line">    can be shared.</div><div class="line">    The integers that are saved are those in the range</div><div class="line">    -NSMALLNEGINTS (inclusive) to NSMALLPOSINTS (not inclusive).</div><div class="line">*/</div><div class="line"><span class="keyword">static</span> PyIntObject *small_ints[NSMALLNEGINTS + NSMALLPOSINTS];</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>According to the implementation, the small number is [-5, 257). You can also modify the source code and recomplie it to change the range of small number, if you would like to.</p>
<blockquote>
<p>  Integers are quite normal objects, to make object handling uniform.<br>   (Using odd pointers to represent integers would save much space<br>   but require extra checks for this special case throughout the code.)<br>   Since a typical Python program spends much of its time allocating<br>   and deallocating integers, these operations should be very fast.<br>   Therefore we use a dedicated allocation scheme with a much lower<br>   overhead (in space and time) than straight malloc(): a simple<br>   dedicated free list, filled when necessary with memory from malloc().<br>   block_list is a singly-linked list of all PyIntBlocks ever allocated,  linked via their next members.  PyIntBlocks are never returned to the<br>   system before shutdown (PyInt_Fini).<br>   free_list is a singly-linked list of available PyIntObjects, linked<br>   via abuse of their ob_type members.</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BLOCK_SIZE      1000    <span class="comment">/* 1K less typical malloc overhead */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BHEAD_SIZE      8       <span class="comment">/* Enough for a 64-bit pointer */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N_INTOBJECTS    ((BLOCK_SIZE - BHEAD_SIZE) / sizeof(PyIntObject))</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> _intblock &#123;</div><div class="line">    <span class="keyword">struct</span> _intblock *next;</div><div class="line">    PyIntObject objects[N_INTOBJECTS];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _intblock PyIntBlock;</div><div class="line"></div><div class="line"><span class="keyword">static</span> PyIntBlock *block_list = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> PyIntObject *free_list = <span class="literal">NULL</span>; <span class="comment">// Initliazed by fill_free_list()</span></div></pre></td></tr></table></figure>
<h3 id="Insert-and-Delete"><a href="#Insert-and-Delete" class="headerlink" title="Insert and Delete"></a>Insert and Delete</h3><p>A initialization routine from <code>long type</code> integer number.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">PyObject *</span></div><div class="line"><span class="title">PyInt_FromLong</span><span class="params">(<span class="keyword">long</span> ival)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> PyIntObject *v;</div><div class="line">    <span class="comment">// try to use small number pool</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> NSMALLNEGINTS + NSMALLPOSINTS &gt; 0</span></div><div class="line">    <span class="keyword">if</span> (-NSMALLNEGINTS &lt;= ival &amp;&amp; ival &lt; NSMALLPOSINTS) &#123;</div><div class="line">        v = small_ints[ival + NSMALLNEGINTS];</div><div class="line">        Py_INCREF(v);</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> COUNT_ALLOCS</span></div><div class="line">        <span class="keyword">if</span> (ival &gt;= <span class="number">0</span>)</div><div class="line">            quick_int_allocs++;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            quick_neg_int_allocs++;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">        <span class="keyword">return</span> (PyObject *) v;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">   <span class="comment">// if ival is not a small number, create a new instance object.</span></div><div class="line">   <span class="keyword">if</span> (free_list == <span class="literal">NULL</span>) &#123;</div><div class="line">       <span class="keyword">if</span> ((free_list = fill_free_list()) == <span class="literal">NULL</span>)</div><div class="line">           <span class="comment">/*</span></div><div class="line">              fill_free_list() will create a general number pool </div><div class="line">              for PyIntObjects.</div><div class="line">              But if there is no memory, return NULL</div><div class="line">            */</div><div class="line">           <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">/* Inline PyObject_New */</span></div><div class="line">   v = free_list;</div><div class="line">   free_list = (PyIntObject *)Py_TYPE(v); </div><div class="line">   <span class="comment">// Py_TYPE(ob)  (((PyObject*)(ob))-&gt;ob_type) --notes by Jason Leaster</span></div><div class="line">   PyObject_INIT(v, &amp;PyInt_Type);</div><div class="line">   v-&gt;ob_ival = ival;</div><div class="line">   <span class="keyword">return</span> (PyObject *) v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Time-for-Hacking"><a href="#Time-for-Hacking" class="headerlink" title="Time for Hacking"></a>Time for Hacking</h3><p>Modify the <code>int_print</code> function in <code>Object/intobject.c</code>.<br>Here is my modification:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> Programmer : Jason Leaster</div><div class="line"> Date       : 2016.02.03</div><div class="line"></div><div class="line"> Modify from Robert Chen's code.</div><div class="line"> */</div><div class="line"></div><div class="line">tatic <span class="keyword">int</span> values[<span class="number">10</span>];</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> refcounts[<span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">int_print</span><span class="params">(PyIntObject *v, FILE *fp, <span class="keyword">int</span> flags)</span></div><div class="line">         <span class="comment">/* flags -- not used but required by interface */</span></div><div class="line">&#123;</div><div class="line">        <span class="comment">// &lt;&lt;&lt; modified by Jason Leaster</span></div><div class="line">        PyIntObject* intObjectPtr = <span class="literal">NULL</span>;</div><div class="line">        PyIntBlock* p    = block_list;</div><div class="line">        PyIntBlock* last = <span class="literal">NULL</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            count++;</div><div class="line">            last = p;</div><div class="line">            p = p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        intObjectPtr = last-&gt;objects;</div><div class="line">        intObjectPtr+= N_INTOBJECTS - <span class="number">1</span>;</div><div class="line">            </div><div class="line">        <span class="built_in">printf</span>(<span class="string">" Address @%p\n"</span>, v);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++, --intObjectPtr)</div><div class="line">        &#123;</div><div class="line">            values[i] = intObjectPtr-&gt;ob_ival;</div><div class="line">            refcounts[i] = intObjectPtr-&gt;ob_refcnt;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">printf</span>(<span class="string">" Values: "</span>);</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, values[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">" refcnt: "</span>);</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, refcounts[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">" block_list count: %d\n"</span>, count);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" free_list : %p\n"</span>, free_list);</div><div class="line"></div><div class="line">        <span class="comment">// &gt;&gt;&gt; Origianl</span></div><div class="line">        <span class="keyword">long</span> int_val = v-&gt;ob_ival;</div><div class="line">        <span class="function">Py_BEGIN_ALLOW_THREADS</span></div><div class="line">        <span class="title">fprintf</span><span class="params">(fp, <span class="string">"%ld"</span>, int_val)</span>;</div><div class="line">        Py_END_ALLOW_THREADS</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Tips for debugging:<br><code>getrefcount</code> in module <code>sys</code> is helpful to get the reference number of object.</p>
<p><img src="/images/img_for_2016_02_03/printout.png" alt="images"></p>
<h3 id="Extention-reading"><a href="#Extention-reading" class="headerlink" title="Extention reading"></a>Extention reading</h3><p>There are lots of built-in methods in Python. id(Object) is one of them.</p>
<p>According to the build-in doc for function id(Object). </p>
<blockquote>
<p>In [1]: print id.__doc__<br>id(object) -&gt; integer<br>Return the identity of an object.  This is guaranteed to be unique among<br>simultaneously existing objects.  (Hint: it’s the object’s memory address.)</p>
</blockquote>
<p>There is a hint and say the return value of built-in function id(object) is the object’s memory address.</p>
<p>All the function do is just 5-line codes in the implementation of CPython.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[Python/bltinmodule.c]</div><div class="line">static PyObject *</div><div class="line">builtin_id(PyObject *self, PyObject *v)</div><div class="line">&#123;</div><div class="line">        <span class="keyword">return</span> PyLong_FromVoidPtr(v);</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">static PyMethodDef builtin_methods[] = &#123;</div><div class="line">    ...</div><div class="line">    &#123;<span class="string">"id"</span>,              builtin_id,         METH_O, id_doc&#125;, // id_doc <span class="keyword">is</span> just the value of id.__doc__</div><div class="line">    &#123;<span class="string">"isinstance"</span>,  builtin_isinstance, METH_VARARGS, isinstance_doc&#125;,</div><div class="line">    &#123;<span class="string">"len"</span>,             builtin_len,        METH_O, len_doc&#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>That’s all about the built-in method id(Object)</p>
<hr>
<p>Photo by Jason Leaster, in ChangeDe Hunan<br><img src="/images/img_for_2016_02_03/street.jpg" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Preparation&quot;&gt;&lt;a href=&quot;#Preparation&quot; class=&quot;headerlink&quot; title=&quot;Preparation&quot;&gt;&lt;/a&gt;Preparation&lt;/h3&gt;&lt;p&gt;Here, we are goint to analysis how Python deal with &lt;code&gt;Int Object&lt;/code&gt; in itself.&lt;/p&gt;
&lt;p&gt;First of all, we should have a environment which help us to explore the detail of the implementation in &lt;code&gt;Python 2.7&lt;/code&gt;. At the same time, our operation shouldn’t influence the origianl Python in your workstation, if you have install Python before.&lt;/p&gt;
&lt;p&gt;You can get the source code from offical website of Python. And you will find that there have a file &lt;code&gt;configure&lt;/code&gt; in the directory of the source.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In the file configure, you can replace all string ‘Python’ with ‘pyLab’. And then move all file prefix with &lt;code&gt;Python&lt;/code&gt; into &lt;code&gt;pyLab&lt;/code&gt;(mainly in directory Misc/ and Modules)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Don’t forget to run the configuration file – configure with the option &lt;code&gt;--prefix=Location where you want the Python which is for lab to install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finally, just run &lt;code&gt;make &amp;amp; make install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Repeat myself again, the reason that I move all ‘Python’ into ‘pyLab’ is all for making a difference with the original instance which is official and it shouldn’t be influence by any operation from us.&lt;/p&gt;
&lt;h3 id=&quot;Rules-of-Object-in-Python&quot;&gt;&lt;a href=&quot;#Rules-of-Object-in-Python&quot; class=&quot;headerlink&quot; title=&quot;Rules of Object in Python.&quot;&gt;&lt;/a&gt;Rules of Object in Python.&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Objects are structures allocated on the heap.  &lt;/li&gt;
&lt;li&gt;Objects are never allocated statically or on the stack; they must be accessed through special macros and functions only.  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jasonleaster.github.io/categories/Python/"/>
    
    
      <category term="C" scheme="http://jasonleaster.github.io/tags/C/"/>
    
      <category term="Python" scheme="http://jasonleaster.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning With K-Means</title>
    <link href="http://jasonleaster.github.io/2015/12/30/2015-12-30-machine-learning-with-k-means/"/>
    <id>http://jasonleaster.github.io/2015/12/30/2015-12-30-machine-learning-with-k-means/</id>
    <published>2015-12-30T08:03:13.000Z</published>
    <updated>2016-02-04T05:51:25.851Z</updated>
    
    <content type="html"><![CDATA[<p>K-Means is a classical unsupervised clustering Learning Algorithm. The detail of the theory about K-Means that you can find it in Wikipedia. Now I introduce to implement this algorithm by myself.</p>
<p>If you are interesting in the implementation and change it into a better version, you could find it in my github repository and give me some advices. I will be appreciated.</p>
<hr>
<p>So consider about if I want to classify the data into three different cluster. How could I make it?</p>
<p><img src="/images/img_for_2015_12_30/original.png" alt="images"></p>
<p>Here is the result:</p>
<p><img src="/images/img_for_2015_12_30/result.png" alt="images"></p>
<p>With the mean values:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Means =</div><div class="line">[[<span class="number">3.5</span>       <span class="number">1</span>       <span class="number">6</span>]</div><div class="line"> [<span class="number">1.66666</span>   <span class="number">6</span>       <span class="number">6</span>]]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>In the implementation, I just choose the euclidean distance equation as my sensor to calculate the distance between samples. You could assign the <code>self.distance</code> with your function which is in your application.</p>
<p>Here, I show you how to classify the sample point in <code>K-Means</code>.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(self.SampleNum):</div><div class="line">        minDis = +numpy.inf</div><div class="line">        label  = <span class="keyword">None</span></div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(self.classNum):</div><div class="line">            d = self.distance(self._Mat[:, i].tolist(), self.meanVal[:, k].tolist())</div><div class="line">            <span class="keyword">if</span> d &lt; minDis:</div><div class="line">                minDis = d</div><div class="line">                label  = k</div><div class="line"></div><div class="line">        self.classification[i][<span class="number">0</span>] = label</div><div class="line">        self.classification[i][<span class="number">1</span>] = minDis</div></pre></td></tr></table></figure>
<p>And, here you will glance at the main procesure of this algorithm.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">After you initialized this class, just call this</div><div class="line">function and K Means Model will be built</div><div class="line">"""</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.stopOrNot():</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        self.classify()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(self.classNum):</div><div class="line">            mean    = <span class="keyword">None</span></div><div class="line">            counter = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(self.SampleNum):</div><div class="line">                <span class="keyword">if</span> self.classification[i][<span class="number">0</span>] == k:</div><div class="line">                    <span class="keyword">if</span> mean == <span class="keyword">None</span>:</div><div class="line">                        mean =  numpy.array(self._Mat[:, i])*<span class="number">1.</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        mean += self._Mat[:, i]</div><div class="line"></div><div class="line">                    counter += <span class="number">1.</span></div><div class="line"></div><div class="line">            mean /= counter</div><div class="line">            self.meanVal[:, k] = mean</div></pre></td></tr></table></figure>
<p>Hope my work will help you in some day. Thank you. </p>
<p>Yous, EOF</p>
<hr>
<p>Photo by Annabella</p>
<p>Aha! Look! What a big shark. I’m fighting …</p>
<p><img src="/images/img_for_2015_12_30/bigshark.png" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;K-Means is a classical unsupervised clustering Learning Algorithm. The detail of the theory about K-Means that you can find it in Wikipedia. Now I introduce to implement this algorithm by myself.&lt;/p&gt;
&lt;p&gt;If you are interesting in the implementation and change it into a better version, you could find it in my github repository and give me some advices. I will be appreciated.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So consider about if I want to classify the data into three different cluster. How could I make it?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/img_for_2015_12_30/original.png&quot; alt=&quot;images&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here is the result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/img_for_2015_12_30/result.png&quot; alt=&quot;images&quot;&gt;&lt;/p&gt;
&lt;p&gt;With the mean values:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Means =&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[[&lt;span class=&quot;number&quot;&gt;3.5&lt;/span&gt;       &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; [&lt;span class=&quot;number&quot;&gt;1.66666&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;       &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MachineLearning" scheme="http://jasonleaster.github.io/categories/MachineLearning/"/>
    
    
  </entry>
  
  <entry>
    <title>Labs of MIT 6.034</title>
    <link href="http://jasonleaster.github.io/2015/12/25/2015-12-25-labs-of-mit-6-dot-034/"/>
    <id>http://jasonleaster.github.io/2015/12/25/2015-12-25-labs-of-mit-6-dot-034/</id>
    <published>2015-12-25T15:30:06.000Z</published>
    <updated>2017-02-26T13:05:40.615Z</updated>
    
    <content type="html"><![CDATA[<p>Two month ago, I decide to do a project about machine learning. So, I get start to learn machine learning and implemment some algorithms of ML.<br>I find that there is a course in MIT – 6.034 Artificial Intelligence which contain a lot of funny labs. That will help me to learn ML.</p>
<p>I don’t want to write a lot of analysis article about this course like what I have done in 6.008 . So, I just push my solution which also is incompletement onto github. If anyone interesting in this lab, you could touch me and I would like to communicate with you about these labs if I’m not busy.</p>
<p>What you should know is that the version of this labs is updated in 2015.</p>
<p>Here is the link you could get my solution:<br><a href="https://github.com/jasonleaster/MIT_6.034_2015" target="_blank" rel="external">My Solution of MIT 6.034</a></p>
<a id="more"></a>
<hr>
<p>Photo by Jason Leaster</p>
<p>Thanks god. There is a beautiful girl in my life and encourage me walk through the dark time of my life. Thank you. Annabella.</p>
<p><img src="/images/img_for_2015_12_25/girlfriend.png" alt="images"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Two month ago, I decide to do a project about machine learning. So, I get start to learn machine learning and implemment some algorithms of ML.&lt;br&gt;I find that there is a course in MIT – 6.034 Artificial Intelligence which contain a lot of funny labs. That will help me to learn ML.&lt;/p&gt;
&lt;p&gt;I don’t want to write a lot of analysis article about this course like what I have done in 6.008 . So, I just push my solution which also is incompletement onto github. If anyone interesting in this lab, you could touch me and I would like to communicate with you about these labs if I’m not busy.&lt;/p&gt;
&lt;p&gt;What you should know is that the version of this labs is updated in 2015.&lt;/p&gt;
&lt;p&gt;Here is the link you could get my solution:&lt;br&gt;&lt;a href=&quot;https://github.com/jasonleaster/MIT_6.034_2015&quot;&gt;My Solution of MIT 6.034&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="labs" scheme="http://jasonleaster.github.io/categories/labs/"/>
    
    
      <category term="labs" scheme="http://jasonleaster.github.io/tags/labs/"/>
    
      <category term="MachineLearning" scheme="http://jasonleaster.github.io/tags/MachineLearning/"/>
    
  </entry>
  
</feed>
