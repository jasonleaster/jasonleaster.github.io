<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | EOF]]></title>
  <link href="http://jasonleaster.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://jasonleaster.github.io/"/>
  <updated>2016-02-23T15:38:10+08:00</updated>
  <id>http://jasonleaster.github.io/</id>
  <author>
    <name><![CDATA[Jason Leaster]]></name>
    <email><![CDATA[jasonleaster@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exception Control in Python]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/22/exception-control-in-python/"/>
    <updated>2016-02-22T11:31:34+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/22/exception-control-in-python</id>
    <content type="html"><![CDATA[<p>Pythoner may be familiar with exception control like the demo beblow there:</p>

<p>``` python</p>

<p>try:
    i = 0
    while True:
        i += 1</p>

<p>except KeyboardInterrupt:
    print “after abort:”, i</p>

<p>print “get here”</p>

<p>```</p>

<p>If you press down <code>ctrl + c</code>, there will trigger a interruption by keyboard. The inner infinite loop will stop and jump into the exception handler. There are another examples of exception and interruption in the computer. Programmer may also ask what’s the benefite to handle the exception …</p>

<p>What if there is something unpredictable and it will stop the program to run correctly?</p>

<p>If you do 1 divide 0 in your program, the CPU don’t know how to compute that expression. In the level of operating system, OS will handle it as an exception and tell programmer that it doesn’t work. The program must be stopped or killed.</p>

<p>``` python</p>

<p>try:
    1/0
except:
    print “Welcome Chapter 42 – Guideline to galaxy”</p>

<p>```</p>

<p>Although there trig a exception for diveding zero, but we catch it and handle it correctly. So, the program end correctly.</p>

<p>The mechanism of exception handling come from operating system.</p>

<p>Here is the definition of exception object in Python. (Don’t forget that everything in Python is object).</p>

<p>``` C</p>

<p>[Include/pyerrors.h]</p>

<p>…</p>

<p>typedef struct {
    PyObject_HEAD
    PyObject *dict;
    PyObject *args;
    PyObject *message;
} PyBaseExceptionObject;</p>

<p>…</p>

<p>/* Predefined exceptions */</p>

<p>PyAPI_DATA(PyObject *) PyExc_BaseException;
PyAPI_DATA(PyObject *) PyExc_Exception;
PyAPI_DATA(PyObject *) PyExc_StopIteration;
…
PyAPI_DATA(PyObject *) PyExc_ZeroDivisionError;
PyAPI_DATA(PyObject *) PyExc_EOFError;</p>

<p>…</p>

<p>```</p>

<p>Here is a example about how python deal with the exception.</p>

<p>What would happen if there is a expression <code>1/0</code>.
I use IPython interpreter do this demo.</p>

<p>``` python</p>

<p>In [18]: code = compile(“1/0”, “testscript”, mode= “exec”)</p>

<p>In [19]: dis.disassemble(code)
      1           0 LOAD_CONST               0 (1)
                  3 LOAD_CONST               1 (0)
                  6 BINARY_DIVIDE     <br />
                  7 POP_TOP           <br />
                  8 LOAD_CONST               2 (None)
                 11 RETURN_VALUE</p>

<p>```
The assemble code (opcode) of expression <code>1/0</code> in Python is compiled into that opcode code. It isn’t difficult to understand what the <code>LOAD_CONST</code> do.</p>

<p>Let’s dig into the detail of <code>BINARY_DIVIDE</code> in Python/ceval.c</p>

<p>``` C</p>

<p>[Python/ceval.c]
    for(;;)// big for loop
        …
        TARGET_NOARG(BINARY_DIVIDE)
            {
                if (!_Py_QnewFlag) {
                    w = POP();
                    v = TOP();
                    x = PyNumber_Divide(v, w); //
                    Py_DECREF(v);
                    Py_DECREF(w);
                    SET_TOP(x);
                    if (x != NULL) DISPATCH();
                    break;
                }
            }
        …</p>

<pre><code>    /* 
       set up the basic information for the reason 
       why exception happened  -- notes by Jason Leaster
     */
    /* Quickly continue if no error occurred */

    if (why == WHY_NOT) {
        if (err == 0 &amp;&amp; x != NULL) {
            READ_TIMESTAMP(loop1);
            continue; /* Normal, fast path */
        }
        why = WHY_EXCEPTION;
        x = Py_None;
        err = 0;
    }

    ...

    /* Log traceback info if this is a real exception */
    if (why == WHY_EXCEPTION) {
        PyTraceBack_Here(f);
        ...
    }
    ...
</code></pre>

<p>[Objects/abstract.c]
BINARY_FUNC(PyNumber_Subtract, nb_subtract, “-“)</p>

<p>/* PyNumber_Divide is just the other name of function nb_divide 
   and then you will find that the nb_divide is just a function pointer
   in struct PyNumberMethods.</p>

<p>The REAL implementation is function @int_classic_div in 
   Objects/intobject.c. The @int_classic_div will call function
   @i_divmod in Objects/intobject.c</p>

<pre><code>                                -- notes by Jason Leaster  */ BINARY_FUNC(PyNumber_Divide, nb_divide, "/") 
</code></pre>

<p>BINARY_FUNC(PyNumber_Divmod, nb_divmod, “divmod()”)</p>

<p>[Objects/intobject.c]
i_divmod(register long x, register long y,
           long *p_xdivy, long *p_xmody)
{
    long xdivy, xmody;</p>

<pre><code>if (y == 0) {
    /*
     Keypoint!
     Here is where Python setup a new exception for "divide zero"
     problem.
                                        -- notes by JasonLeaster
     */
    PyErr_SetString(PyExc_ZeroDivisionError,
            "integer division or modulo by zero");
    return DIVMOD_ERROR;
}

... ... }
</code></pre>

<p>```</p>

<p>It’s the last mile to get the target place.
<code>PyErr_SetString</code> finish the job about the initialization of <code>divide zero</code> exception.</p>

<p>``` C</p>

<p>[Python/errors.c]</p>

<p>void
PyErr_Restore(PyObject *type, PyObject *value, PyObject *traceback)
{
    PyThreadState *tstate = PyThreadState_GET();
    PyObject *oldtype, *oldvalue, *oldtraceback;</p>

<pre><code>... 

/* Save these in locals to safeguard against recursive
   invocation through Py_XDECREF */
oldtype = tstate-&gt;curexc_type;
oldvalue = tstate-&gt;curexc_value;
oldtraceback = tstate-&gt;curexc_traceback;

tstate-&gt;curexc_type = type;
tstate-&gt;curexc_value = value;
tstate-&gt;curexc_traceback = traceback;
... }
</code></pre>

<p>void
PyErr_SetObject(PyObject *exception, PyObject *value)
{
    …</p>

<pre><code>/* log this exception message into thread state */
PyErr_Restore(exception, value, (PyObject *)NULL); }
</code></pre>

<p>void
PyErr_SetString(PyObject *exception, const char *string)
{
    PyObject *value = PyString_FromString(string);
    PyErr_SetObject(exception, value);
    Py_XDECREF(value);
}</p>

<p>```</p>

<p>After the VM (ceval.c) know why there is a exception, the VM will take step
into handling this exception. We have knew that the big <code>for switch loop</code> execute the opcode step by step. 
Once there is something wrong with the opcode at runtime, the VM will setup
 exception object by <code>PyErr_SetObject</code>. And then VM also will setup the traceback object of type <code>PyTracebackObject</code>.</p>

<p>``` C</p>

<p>/* Traceback interface */</p>

<p>typedef struct _traceback {
    PyObject_HEAD
    struct _traceback *tb_next;
    struct _frame *tb_frame;
    int tb_lasti;
    int tb_lineno;
} PyTracebackObject;</p>

<p>```</p>

<p>You may notice that the <code>PyTracebackObject</code> is a single direction linked-list.</p>

<p>``` C</p>

<p>static PyTracebackObject *
newtracebackobject(PyTracebackObject *next, PyFrameObject *frame)
{
    PyTracebackObject *tb;
    if ((next != NULL &amp;&amp; !PyTraceBack_Check(next)) ||
            frame == NULL || !PyFrame_Check(frame)) {
        PyErr_BadInternalCall();
        return NULL;
    }
    tb = PyObject_GC_New(PyTracebackObject, &amp;PyTraceBack_Type);
    if (tb != NULL) {
        Py_XINCREF(next);
        tb-&gt;tb_next = next;
        Py_XINCREF(frame);
        tb-&gt;tb_frame = frame;
        tb-&gt;tb_lasti = frame-&gt;f_lasti;
        tb-&gt;tb_lineno = PyFrame_GetLineNumber(frame);
        PyObject_GC_Track(tb);
    }
    return tb;
}</p>

<p>int
PyTraceBack_Here(PyFrameObject *frame)
{
    PyThreadState *tstate = PyThreadState_GET();
    PyTracebackObject *oldtb = (PyTracebackObject *) tstate-&gt;curexc_traceback;
    PyTracebackObject *tb = newtracebackobject(oldtb, frame);
    if (tb == NULL)
        return -1;
    tstate-&gt;curexc_traceback = (PyObject *)tb;
    Py_XDECREF(oldtb);
    return 0;
}</p>

<p>```</p>

<p>``` python</p>

<p>import sys</p>

<p>def h():
    print “in frame :”, sys._getframe()
    print “in function :”, sys._getframe().f_code.co_name
    1/0</p>

<p>def g():
    print “in frame :”, sys._getframe()
    print “in function :”, sys._getframe().f_code.co_name
    h()</p>

<p>def f():
    print “in frame :”, sys._getframe()
    print “in function :”, sys._getframe().f_code.co_name
    g()</p>

<p>f()</p>

<p>```</p>

<p>This program will trig the exception at function h().
Here is the output of that program.</p>

<p><img src="/images/img_for_2016_02_22/traceback.png" alt="images" /></p>

<p><img src="/images/img_for_2016_02_22/frameobjectlist.png" alt="images" /></p>

<h3 id="hacker-time">Hacker Time</h3>

<p><img src="/images/img_for_2016_02_22/hacktime0.png" alt="images" /></p>

<hr />
<p>Photo by Jason Leaster, ChangeDe, HuNan, China
<img src="/images/img_for_2016_02_22/bridge.jpg" alt="images" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Architecture of Python Virtual Machine]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/21/architecture-of-python-virtual-machine/"/>
    <updated>2016-02-21T11:42:50+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/21/architecture-of-python-virtual-machine</id>
    <content type="html"><![CDATA[<p>Python virtual machine is the core part of this language. After compiling the original python code into <code>Opcode</code>(byte code), python VM will take the job left. Python will take every opcode from <code>PyCodeObject</code>.</p>

<!-- more -->

<h3 id="executing-environment-in-python-vm">Executing environment in Python VM</h3>

<p>Actually, all the things that VM do is simulating what the OS do to excute a program.</p>

<p><img src="/images/img_for_2016_02_21/stack.png" alt="images" /></p>

<p>The figure over there show the representation of the model of stack-based machine.</p>

<p>If you are fimilary with system programming in C, it’s easy to understand the meaning of that figure.</p>

<p>But if you are an beginner with programming in C, you may try to finish the lab2( bomb ) in CSAPP. It will help beginner a lot to understand the mechanism of stack-based machine.</p>

<p><strong>We know that all the static information about the program store in <code>PyCodeObject</code>. But what about the dynamic information when the program is running in the Python VM?</strong></p>

<p><code>PyCodeObject</code> can’t include the dynamic information and the environment where program is running.</p>

<p>``` python</p>

<p>number = 2016</p>

<p>def f():
    number = 42
    print number # 42</p>

<p>```</p>

<p>You must know <code>number</code> in function <code>f()</code> and the variable which is not inside the block of function <code>f()</code> with the same name. That two variable are in different frame which means envrionment in running time.</p>

<p>In Python, there is a class to describe the envrionment at running time – <code>PyFrameObject</code>. It’s a simulation of stack frame in x86 platform.</p>

<p>You noticed that <code>PyFrameObject</code> is a size-variable Python Object class. Because this class maintain a <code>PyCodeObject</code> and stack in different block have different size. So <code>PyFrameObject</code> can’t be a size fixed class.</p>

<p>``` C</p>

<p>[Inlcude/frameobject.h]</p>

<p>typedef struct _frame {
    PyObject_VAR_HEAD
    struct _frame <em>f_back;  /</em> previous frame, or NULL */</p>

<pre><code>PyCodeObject *f_code;   /* code segment */
PyObject *f_builtins;   /* builtin symbol table (PyDictObject) */
PyObject *f_globals;    /* global symbol table (PyDictObject) */
PyObject *f_locals;     /* local symbol table (any mapping) */
PyObject **f_valuestack;/* points after the last local */

/* Next free slot in f_valuestack.  
Frame creation sets to f_valuestack.
Frame evaluation usually NULLs it, but a frame that yields sets it
to the current stack top. */
PyObject **f_stacktop;

...
</code></pre>

<p>} PyFrameObject;</p>

<p>```</p>

<p>This figure show the origanization of PyFrameObject like a single linked-list. <code>f_back</code> point to the previous frame. <code>f_valuestack</code> is something like <code>ebp</code> register in x86 and <code>f_stacktop</code> like the <code>esp</code> register.</p>

<p><img src="/images/img_for_2016_02_21/frame.png" alt="images" /></p>

<p>How to create a new PyFrameObject? The answer is function <code>PyFrame_New</code>.</p>

<p>``` C</p>

<p>[Object/frameobject.c]</p>

<p>PyFrameObject *
PyFrame_New(PyThreadState <em>tstate, PyCodeObject *code, PyObject *globals,
                    PyObject *locals)
{
    PyFrameObject *back = tstate-&gt;frame;
    PyFrameObject *f; /</em> New frame object */
    PyObject *builtins;
    Py_ssize_t i;</p>

<pre><code>... 
/* Big block of code to set value of @builtins */
...

f-&gt;f_stacktop = f-&gt;f_valuestack;
f-&gt;f_builtins = builtins;
Py_XINCREF(back);
f-&gt;f_back = back;
Py_INCREF(code);
Py_INCREF(globals);
f-&gt;f_globals = globals;

...
/* some details are ommited */
...

f-&gt;f_locals = locals;
f-&gt;f_tstate = tstate;
f-&gt;f_lasti = -1;
f-&gt;f_lineno = code-&gt;co_firstlineno;
f-&gt;f_iblock = 0;

_PyObject_GC_TRACK(f);
return f; }
</code></pre>

<p>```</p>

<p>Luckly, we could access <code>PyFrameObject</code> in Python at running time.</p>

<p>``` python</p>

<p>import sys</p>

<p>value = 3</p>

<p>def g():
    “””
    _getframe([depth]) return a frame object from the call stack.
    If that is deeper than the call stack, ValueError is raised.  The default
    for depth is zero, returning the frame at the top of the call stack.
    “””
    frame = sys._getframe()
    print “current function is : “, frame.f_code.co_name
    caller = frame.f_back
    print “caller function is : “, caller.f_code.co_name
    print “caller’s local namespace : “, caller.f_locals
    print “caller’s global namespace : “, caller.f_globals.keys()</p>

<p>def f():
    a = 1
    b = 2
    g()</p>

<p>def show():
    f()</p>

<p>show()</p>

<p>”””
the output of this program :
jasonleaster@ubuntu:~/Code_by_Jason/Python_language$ python caller.py 
current function is :  g
caller function is :  f
caller’s local namespace :  {‘a’: 1, ‘b’: 2}
caller’s global namespace :  [‘g’, ‘f’, ‘<strong>builtins</strong>’, ‘<strong>file</strong>’, ‘show’, ‘value’, ‘<strong>package</strong>’, ‘sys’, ‘<strong>name</strong>’, ‘<strong>doc</strong>’]
“””</p>

<p>```</p>

<h3 id="name-scope-and-namespace">Name, Scope and Namespace</h3>

<p>We have knew the three different namespace – locals, globals and builtins.
In Python, there is a important basic structure – <code>module</code>.
More generally, every <code>.py</code> file is a module in Python. This concept help Python to divide namespace and reuse the program which have been writed.</p>

<p>Name is helpful to memory something which is not simple enough.</p>

<p>Assignment expression in Python have two things in common:</p>

<ul>
  <li>Create a new object</li>
  <li>build a connection between that new object and a name</li>
</ul>

<p>You may be familary with assignment like this <code>x = 1</code>. But expression like
<code>def function():</code> and <code>class A():</code>, all these expression are also assignment expressions. What assignment to do is that build a connection between the object and name. It’s like a pair (name, object), (x, 1), (code, codeObject) and so on.</p>

<p>A namespace is corresponding with unique scope.</p>

<p>There is a comparasion between Python and C about namespace.</p>

<p><img src="/images/img_for_2016_02_21/compare.png" alt="images" /></p>

<p>Just guess what would happend if you run these two program ?</p>

<p>The right side C program will run correctly but the left side Python program will run into exception for “local variable ‘a’ referenced before assignment”.</p>

<p>The reason is that no matter where the variable are decalred in the scope, all things in that scope can see that variable. But what is interesting is that the assignment expression are after the first print expression. When program run into the first print expression, the assginment are unfinished, 
<strong>which means the local object haven’t created yet.</strong></p>

<p><code>global</code> keyword help programmer to declare a name which is in the global scope.</p>

<p>``` python</p>

<p>def f():
    global a
    print a
    a = 2016
    print a</p>

<p>```
But you should know that once you declare a variable with <code>global</code> keyword, all thing happen to the variable in the local scope will influence that object in the global scope and change it’s value. After function <code>f()</code> finished, the value of a in global scope changed into 2016.</p>

<h3 id="runtime-architecture-of-python-vm">Runtime Architecture of Python VM</h3>

<p>This function is the core part of virtual machine in Python. Once we get the opcode from <code>PyFrameObject</code>, the function <code>PyEval_EvalFrameEx</code> will process that opcode and run it.</p>

<p>``` C</p>

<p>[Python/ceval.c]</p>

<p>…</p>

<p>/* Code access macros */</p>

<h1 id="define-instroffset--intnextinstr---firstinstr">define INSTR_OFFSET()  ((int)(next_instr - first_instr))</h1>
<p>#define NEXTOP()        (*next_instr++)
#define NEXTARG()       (next_instr += 2, (next_instr[-1]«8) + next_instr[-2])
#define PEEKARG()       ((next_instr[2]«8) + next_instr[1])
#define JUMPTO(x)       (next_instr = first_instr + (x))
#define JUMPBY(x)       (next_instr += (x))</p>

<p>…</p>

<p>PyObject *
PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
{
    …
    for(;;)
    {
            f-&gt;f_lasti = INSTR_OFFSET();// get the opcode
            …
            opcode = NEXTOP();</p>

<pre><code>        oparg = 0;   
        /* allows oparg to be stored in a register because
           it doesn't have to be remembered across a full loop */
        if (HAS_ARG(opcode))
            oparg = NEXTARG(); dispatch_opcode:
                                                                                /* Main switch on opcode */
                                                                                    READ_TIMESTAMP(inst0);
        switch (opcode) {

            case NOP:
                ...
            case LOAD_FAST:
                ...
            case LOAD_CONST:
                ...
                ...
        }


}

... }
</code></pre>

<p>```</p>

<hr />

<p>Photo by QianNan Qu. In XiangTan, HuNan, China.</p>

<p><img src="/images/img_for_2016_02_21/me.jpg" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Crawler]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/19/web-crawler/"/>
    <updated>2016-02-19T21:27:47+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/19/web-crawler</id>
    <content type="html"><![CDATA[<table>
  <tbody>
    <tr>
      <td>Finished my first web scrawler … =_=</td>
    </tr>
  </tbody>
</table>

<p>Here is all about the spider. It’s small but funny.</p>

<p>After I finish this web scrawler, I learn that. The most important thing to build a web scrawler is not the code but the inverse process. How to build your program like a web browser.</p>

<p>Static web page is easy to get but how about a dynamic web page. Nowadays, more and more website use <code>ajax</code> to meet their bussiness requirement. If you just send a simple request to the server of that web site, you will find than the returned page is just only part of the total user page that you saw in the web browser.</p>

<!-- more -->

<p>Here is my demonstration.
<a href="www.duitang.com">duitang.com</a> is a funny images web site. I love a cute virtual character who is named as Mr.zhangcao . There is a lot of images of that guy. So I want build a web crawler to get that images all.</p>

<p>If you send a request to the <a href="http://www.duitang.com/album/56759353">main page</a> and anlysis the returned page (Python’s library <strong>BeautifulSoup</strong> is helpful to analysis html files), you will find there are some links in the html file. But you will only get about 20+ images but not all images that you viewed in the web browser. When you pull down the button of the brower, you will see more and more images coming out to user.</p>

<p>Why the returned page don’t have all links of images? The answer is <code>ajax</code>(asynchronous JavaScript and XML) is a set of web development techniques using many web technologies on the client-side to create asynchronous Web application.</p>

<p><strong>The monitor in browswer will help programmer who is writing a web spider.</strong></p>

<p>Dig into the detail of http transport, you will find a special request which are sent to server by the client browser.</p>

<p>This is that special url.</p>

<p>``` python</p>

<p>http://www.duitang.com/napi/blog/list/by_album/?album_id=
&amp;limit=24
&amp;include_fields=top_comments%2Cis_root%2Csource_link%2Cbuyable%2Croot_id%2C
status%2Clike_count%2Csender%2Creply_count&amp;start=48&amp;_=1455881387791</p>

<p>```</p>

<p>If client request that url to the server, the server will return a json data object. The job left is to analysis the json object and then get the resource links.</p>

<p>The important part of building a web crawler is not the code but how to find the useful url and get more useful information.</p>

<p>Here is a screenshut for what my web scrawler got.
<img src="/images/img_for_2016_02_19/screenshut.png" alt="images" /></p>

<p>``` python</p>

<p>”””
Programmer 	: EOF
E-mail 		: jasonleaster@163.com
File        : duitang.py
Date        : 2016.02.19</p>

<p>”””
#!/usr/bin/env python
# -<em>- coding: utf-8 -</em>-</p>

<p>import urllib
import urllib2
import json
import re
import time</p>

<p>downloadCount = 0</p>

<p>album_id = 72129639
limit = 100
start = 1</p>

<h1 id="this-function-return-a-url-and-this-url-will-return-a-json-object-data">This function return a URL and this URL will return a json object data.</h1>
<p>def duitangURLMaker(album_id, limit, start):
    url_part_1 = “http://www.duitang.com/napi/blog/list/by_album/?album_id=”
    url_part_2 = “&amp;limit=”
    url_part_3 = “&amp;include_fields=top_comments%2Cis_root%2Csource_link%2Cbuyable%2Croot_id%2Cstatus%2Clike_count%2Csender%2Creply_count&amp;start=”
    url_part_4 = “&amp;_=1455881387791”</p>

<pre><code>URL = url_part_1 + str(album_id) + url_part_2 + str(limit) + url_part_3 + str(start) + url_part_4

return URL
</code></pre>

<p>def imgURLs(jsonDict):
	URLs = []
	object_list = jsonDict[“data”][“object_list”]
	for item in object_list:
		URLs.append(item[“photo”][“path”])</p>

<pre><code>return URLs
</code></pre>

<p>URL 		= duitangURLMaker(album_id, limit, start)
string 		= urllib.urlopen(URL).read()
jsonDict 	= json.loads(string)</p>

<p>URLs = imgURLs(jsonDict)</p>

<p>for url in URLs:
    Filename = “duitang_%s.jpeg” % (downloadCount)
    try:
        urllib.urlretrieve(url, Filename)
        print “Download from”, url
        downloadCount += 1
    except:
        print “Analyse Failed”</p>

<p>```</p>

<h3 id="download-some-pdf-documents-on-a-website">Download some pdf documents on a website</h3>

<p>``` python</p>

<p>”””
Programmer 	:   EOF
E-mail 		:   jasonleaster@163.com
File        :   stanford.py
Date        :   2016.02.19</p>

<p>Description:
	This programmer will help user who is learn cs97 in stanford to download some pdf material in the website.</p>

<p>”””
import urllib
from BeautifulSoup import *
import urllib2
import json
import re
import time</p>

<p>URL = “http://web.stanford.edu/class/cs97si/”
html = urllib.urlopen(URL).read()
soup = BeautifulSoup(html)
tags = soup(‘a’)</p>

<p>downloadCount = 0</p>

<p>pattern = “.pdf$”
regex = re.compile(pattern)
for tag in tags:
    fileName = tag[“href”]
    url = URL + fileName</p>

<pre><code>"""
search(string[, pos[, endpos]]) --&gt; match object or None.
Scan through string looking for a match, and return a corresponding
MatchObject instance. Return None if no position in the string matches.
"""
url = regex.search(url)
regex.search
if url is not None:
    url = url.string
    try:
        urllib.urlretrieve(url, fileName)
        print "Download from", url
        downloadCount += 1
    except:
        print "Analyse Failed"
</code></pre>

<p>```</p>

<hr />
<p>Photo by Jason Leaster. LiuYe Lake in ChangDe, HuNan, China.
<img src="/images/img_for_2016_02_19/liuyehu.jpg" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brief Introduction to Opcodes in Python]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/06/brief-introduction-to-opcodes-in-python/"/>
    <updated>2016-02-06T18:39:50+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/06/brief-introduction-to-opcodes-in-python</id>
    <content type="html"><![CDATA[<p>Python program is compiled down to bytecode which is sort of like assembly for the python virtual machine. The interpreter executes each of these bytecodes one by one.</p>

<p>Let’s look the following code. It’s easy to understand what it is doing without my explanation.</p>

<p>``` python</p>

<p>[demo.py]</p>

<p>x = 1
y = 2
z = x + y
print “x, y, z”, x, y, z</p>

<p>```
<!-- more --></p>

<p>Programmer can use python module <code>dis</code> to transform that code into the assemble program of Python.</p>

<p>``` python</p>

<p>python -m dis “./demo.py”
#line number 
#in the       #assemble code           # object name in the source code
#source code
1           0 LOAD_CONST               0 (1)
            3 STORE_NAME               0 (x)</p>

<p>2           6 LOAD_CONST               1 (2)
            9 STORE_NAME               1 (y)</p>

<p>3          12 LOAD_NAME                0 (x)
           15 LOAD_NAME                1 (y)
           18 BINARY_ADD
           19 STORE_NAME               2 (z)</p>

<p>4          22 LOAD_NAME                0 (x)
           25 PRINT_ITEM
           26 LOAD_NAME                1 (y)
           29 PRINT_ITEM
           30 LOAD_NAME                2 (z)
           33 PRINT_ITEM
           34 PRINT_NEWLINE
           35 LOAD_CONST               2 (None)
           38 RETURN_VALUE</p>

<h6 id="section">#</h6>

<p>”””
In the interpreter of Python, programmer also can call
the built-in function @compile and import module @dis
to do the same thing.
“””</p>

<p>In [5]: source = open(“./hello.py”).read()</p>

<p>In [6]: code = compile(source, “demo”, “exec”)</p>

<p>In [7]: import dis</p>

<p>In [8]: dis.dis(code)</p>

<p>```</p>

<p>It’s not hard to understand the <code>opcode</code>. In implementation of CPython, all opcode defined as Macro in the header file <code>Include/opcode.h</code>.</p>

<p>``` C</p>

<p>[Include/opcode.h]
…
#define LOAD_CONST  100 /* Index in const list <em>/
#define LOAD_NAME   101 /</em> Index in name list */
…</p>

<p>```</p>

<p>The evaluation machine of Python is a stack-based machine.
If you find the detail of <code>18 BINARY_ADD</code>, you will find that this opcode 
will pop the two object on the stack and then add them together.</p>

<p>``` C</p>

<p>[Python/ceval.c]
…</p>

<p>/* Stack manipulation macros */</p>

<p>/* The stack can grow at most MAXINT deep, as co_nlocals and
      co_stacksize are ints. */</p>

<h1 id="define-stacklevel-----intstackpointer---f-fvaluestack">define STACK_LEVEL()     ((int)(stack_pointer - f-&gt;f_valuestack))</h1>
<p>#define EMPTY()           (STACK_LEVEL() == 0)
#define TOP()             (stack_pointer[-1])
#define SECOND()          (stack_pointer[-2])
#define THIRD()           (stack_pointer[-3])
#define FOURTH()          (stack_pointer[-4])
#define PEEK(n)           (stack_pointer[-(n)])
#define SET_TOP(v)        (stack_pointer[-1] = (v))
#define SET_SECOND(v)     (stack_pointer[-2] = (v))
#define SET_THIRD(v)      (stack_pointer[-3] = (v))
#define SET_FOURTH(v)     (stack_pointer[-4] = (v))
#define SET_VALUE(n, v)   (stack_pointer[-(n)] = (v))
#define BASIC_STACKADJ(n) (stack_pointer += n)
#define BASIC_PUSH(v)     (<em>stack_pointer++ = (v))
#define BASIC_POP()       (</em>–stack_pointer)
…</p>

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming in Python]]></title>
    <link href="http://jasonleaster.github.io/blog/2016/02/05/functional-programming-in-python/"/>
    <updated>2016-02-05T02:37:57+08:00</updated>
    <id>http://jasonleaster.github.io/blog/2016/02/05/functional-programming-in-python</id>
    <content type="html"><![CDATA[<p>Functional programming is not only use functions.
Think of “y = f(x)” or “h = f * g”</p>

<p>For comparasion, there are different paradigms in programming.</p>

<ul>
  <li>Structured/Procedural – Functions, loops, conditions</li>
  <li>Object-Oriented Programming (OOP) – Classes, objects, methods</li>
  <li>Functional Programming – Decorators, comprehensions, and generators</li>
  <li>Logic Programming</li>
</ul>

<p>Functions in Python are <code>first class value</code>. It can take functions as arguments and return functions like a value.</p>

<p>``` python</p>

<p>”””
function @calc take @f as an argument and use it as a function.
Something like function pointer in C.
“””
def calc(f, x, y):
    return f(x, y)</p>

<p>def add(x, y):
    return x + y</p>

<p>def sub(x, y):
    return x - y</p>

<p>calc(add, 10, 20)</p>

<p>```</p>

<!-- more -->

<p>In Python, there have anonymous functions which is called <code>Lambda Expression</code> which’s body is limited to one expression.</p>

<p>``` python</p>

<p>def calc(f, x, y):
    return f(x, y)</p>

<p>calc(lambda x, y: x + y, 10, 20)</p>

<p>```</p>

<p>Here, lambda expression used as a argument which is passed into function <code>calc</code>. Function like <code>add</code> and <code>sub</code>, they are too short and don’t need a special name to be identified. So, Python support a mechanism – anonymous function which is called <code>Lambda Expression</code>.</p>

<p>There is a another demo. We will change the code from procedure oriented into functional style.</p>

<p>``` python</p>

<p>”””
In a procedure way.
“””
def incr(x):
    return x + 1</p>

<p>def increment_each(elements):
    results = []
    for elem in elements:
        results.append(incr(elem))
    return results</p>

<p>increment_each([1, 2, 3])
# -&gt; [2, 3, 4]</p>

<p>”””
In a functional way.
“””
map(incr, [1, 2, 3])
# or
map(lambda x: x + 1, [1, 2, 3])</p>

<h1 id="if-we-want-to-get-the-length-of-each-element-in-a-iterable-object">if we want to get the length of each element in a iterable object</h1>
<p>map(len, iterable_object)</p>

<p>```</p>

<p><code>filter</code> is a related idea in functional tools like map.
<code>filter</code> return a new sequence where values are taken from the given sequence if they return True when passed to a given function.</p>

<p>``` python</p>

<p>filter(lambda x: x % 2 == 0, [1, 2, 3, 4])
# -&gt; [2, 4]</p>

<p>```</p>

<p><code>reduce</code> will accumulate and return a single result, given a sequence
and passing each value to a function along with the current result.</p>

<p>``` python</p>

<p>from functools import reduce
reduce(lambda accum, current: accum + current, [1, 2, 3], 0)
# -&gt; 6</p>

<p>```</p>

<h3 id="decorator">Decorator</h3>

<p>In Python, function is first-class value and can be used as returned value.
So, programmer can define nested functions in Python like this:</p>

<p>``` python</p>

<p>”””
Nested function
“””
def outer():
    def inner():
        print “I am the inner function”</p>

<pre><code>return inner
</code></pre>

<p>func = outer()</p>

<p>func()
# -&gt; I am the inner function</p>

<p>”””
Closure
“””
def outer(var = 10):</p>

<pre><code>"Local scope of function @outer"

 def inner(number):
     print "I am the inner function!"
     """
     You can't change value of variable once the
     @outer function finished. You will get error
     if you modify variable which is not in scope
     of function @inner. You can't modify @var
     like this: var += 1 (You will get exception
     information like "UnboundLocalError")
     """
     return var + number

return inner
</code></pre>

<p>func = outer(10)</p>

<p>func(90)
# -&gt; 100</p>

<p>```</p>

<p>Look the demo below there.</p>

<p>``` python</p>

<p>def wrapper(func):
    def cheker(arguments_of_func):
        “””
            @checker receive the same arguments as @func
            and do something that @func didn’t do.
        “””
        return new_retVal</p>

<pre><code>return checker
</code></pre>

<p>```</p>

<p>Actually, the reture value of <code>wrapper</code> is a function just little different from the original function passed into <code>wrapper</code> – <code>func</code>. Function <code>wrapper</code> like a shell on the original function and return with a more powerful function. That’s decorator. <code>wrapper</code> is a decorator.</p>

<p><strong>Decorator: A decorator is any callable Python object that is used to modify a function, method or class definition. A decorator is passed th original object being defined and returns a modified object, which is then bound to the name in the definition. Python decorators were inspired in part by Java annotations, and have a similar syntax; teh decorator syntax is pure syntactic sugar, using @ as the keyword               – Wikipedia</strong></p>

<p>Here is a more generic decorators</p>

<p>``` python</p>

<p>def wrapper(func):
    def inner(<em>args, **kwargs)
        print “Show arguments: %s, %s” % (args, kwargs)
        return func(</em>args, **kwargs)
    return inner</p>

<p>@wrapper
def adder(x, y)
    return x + y</p>

<p>print adder(10, 90)</p>

<h1 id="show-arguments-10-90-">-&gt; Show arguments: (10, 90), {}</h1>
<p>#   100</p>

<p>```</p>

<p>A better and more detailed explaination reader could read the blog
<a href="http://www.simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/">Understanding Python Decoratos in 12 Easy Steps!</a>
which is written by <code>simeon franklin</code>.</p>

<h3 id="generator">Generator</h3>

<p>A <code>generator</code> is a special type of iterator(not vice versa!). 
Generator is a factory that lazily produces values.</p>

<p>There are two types of generators in Python: generator functions and generator expression.</p>

<p>``` python</p>

<p>”””
Demo for generator
“””</p>

<p>def fib():
    prev, curr = 0, 1
    while True:
        “””
            There is no @return keyword in generator,
        but there must be a @yield with a return object 
        if there is a  generator function.
        “””
        yield curr 
        prev, curr = curr, prev + curr</p>

<p>f = fib()
f.next()</p>

<h6 id="section">#</h6>

<p>”””
Generator Expression
“””
numbers = [1, 2, 3, 4, 5, 6]</p>

<p>lazy_square = ( x * x for x in numbers)
“””
Type:        generator
String form: &lt;generator object <genexpr> at 0x7fd3bc119fa0&gt;
Docstring:   <no docstring="">
"""</no></genexpr></p>

<p>In [18]: lazy_square == list
Out[18]: False</p>

<p>In [19]: lazy_square
Out[19]: &lt;generator object <genexpr> at 0x7fd3bc0da410&gt;</genexpr></p>

<p>In [20]: lazy_square.next()
Out[20]: 1</p>

<p>In [21]: lazy_square.next()
Out[21]: 4</p>

<p>In [22]: lazy_square.next()
Out[22]: 9</p>

<p>```</p>

<hr />
<p>Photo by Jason Leaster in ChangDe, HuNan, China.</p>

<p>What a big banana :)</p>

<p><img src="/images/img_for_2016_02_06/banana.png" alt="images" /></p>
]]></content>
  </entry>
  
</feed>
